             /***************************************/
             /                                       /
             /     MODULA-2 Multi-Pass Compiler      /
             /     ****************************      /
             /                                       /
             /         VAX Implementation            /
             /                                       /
             /          Modula-2 Syntax              /
             /                                       /
             /     Version 3.1 of  1-FEB-1983        /
             /                                       /
             /                                       /
             /     Fachbereich Informatik            /
             /     Universitaet Hamburg              /
             /     D-2000 Hamburg 13                 /
             /                                       /
             /***************************************/
                                        
ident =      letter {letter | digit | "_" | "$"} .
number =     integer | real .
integer =    digit {digit} | octalDigit {octalDigit} ("B"|"C"|"b"|"c") |
             digit {hexDigit} ("H"|"h") .
real =       digit {digit} "." {digit} [ScaleFactor] .
ScaleFactor = ("E"|"e") ["+"|"-"] digit {digit} .
hexDigit =   digit |"A"|"B"|"C"|"D"|"E"|"F"|"a"|"b"|"c"|"d"|"e"|"f" .
digit =      octalDigit | "8" | "9" .
octalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" .
string =     "'" {character} "'" | '"' {character} '"' .
qualident =  ident {"." ident} .
ConstantDeclaration = ident "=" ConstExpression .
ConstExpression = SimpleConstExpr [relation SimpleConstExpr] .
relation =   "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | IN .
SimpleConstExpr = ["+"|"-"] ConstTerm {AddOperator ConstTerm} .
AddOperator = "+" | "-" | OR .
ConstTerm =  ConstFactor {MulOperator ConstFactor} .
MulOperator = "*" | "/" | DIV | MOD | AND | "&" .
ConstFactor = qualident | number | string | set |
              "(" ConstExpression ")" | NOT ConstFactor .
set =        [qualident] "{" [element {"," element}] "}" .
element =    ConstExpression [".." ConstExpression] .
TypeDeclaration = ident "=" type .
type =       SimpleType | ArrayType | RecordType | SetType |
             PointerType | ProcedureType .
SimpleType = qualident | enumeration | SubrangeType .
enumeration = "(" IdentList ")" .
IdentList =  ident {"," ident} .
SubrangeType = "[" ConstExpression ".." ConstExpression "]" .
ArrayType =  ARRAY SimpleType {"," SimpleType} OF type .
RecordType = RECORD FieldListSequence END .
FieldListSequence = FieldList {";" FieldList} .
FieldList =  [IdentList ":" type |
             CASE [ident ":"] qualident OF variant {"|" variant}
             [ELSE FieldListSequence] END] .
variant =    CaseLabelList ":" FieldListSequence .
CaseLabelList = CaseLabels {"," CaseLabels} .
CaseLabels = ConstExpression [".." ConstExpression] .
SetType =    SET OF SimpleType .
PointerType = POINTER TO type .
ProcedureType = PROCEDURE [FormalTypeList] .
FormalTypeList = "(" [[VAR] FormalType
                 {"," [VAR] FormalType}] ")" [":" qualident] .
VariableDeclaration = IdentList ":" type .
designator = qualident {"." ident | "[" ExpList "]" | "^"} .
ExpList =    expression {"," expression} .
expression = SimpleExpression [relation SimpleExpression] .
SimpleExpression = ["+"|"-"] term {AddOperator term} .
term =       factor {MulOperator factor} .
factor =     number | string | set | designator [ActualParameters] |
             "(" expression ")" | NOT factor .
ActualParameters = "(" [ExpList] ")" .
statement =  [ assignment | ProcedureCall |
               IfStatement | CaseStatement | WhileStatement |
               RepeatStatement | LoopStatement | ForStatement |
               WithStatement | EXIT | RETURN [expression] ] .
assignment = designator ":=" expression .
ProcedureCall = designator [ActualParameters] .
StatementSequence = statement {";" statement} .
IfStatement = IF expression THEN StatementSequence
              {ELSIF expression THEN StatementSequence}
              [ELSE StatementSequence] END .
CaseStatement = CASE expression OF case {"|" case}
                [ELSE StatementSequence] END .
case =       CaseLabelList ":" StatementSequence .
WhileStatement = WHILE expression DO StatementSequence END .
RepeatStatement = REPEAT StatementSequence UNTIL expression .
ForStatement = FOR ident ":=" expression TO expression
               [BY ConstExpression] DO StatementSequence END .
LoopStatement= LOOP StatementSequence END .
WithStatement= WITH designator DO StatementSequence END .
ProcedureDeclaration= ProcedureHeading ";" block ident .
ProcedureHeading = PROCEDURE ident [FormalParameters] .
block =      {declaration} [BEGIN StatementSequence] END .
declaration = CONST {ConstantDeclaration ";"} |
              TYPE {TypeDeclaration ";"} |
              VAR {VariableDeclaration ";"} |
              ProcedureDeclaration ";" |
              ModuleDeclaration ";" .
FormalParameters = "(" [FPSection {";" FPSection}] ")" [":" qualident] .
FPSection =  [VAR] IdentList ":" FormalType .
FormalType = [ARRAY OF] qualident .
ModuleDeclaration = MODULE ident [priority] ";"
                    {import} [export] block ident .
priority =   "[" ConstExpression "]" .
export =     EXPORT [QUALIFIED] IdentList ";" .
import =     [FROM ident] IMPORT IdentList ";" .
DefinitionModule = DEFINITION MODULE ident ";"
                   {import} [export] {definition} END ident "." .
definition = CONST {ConstantDeclaration ";"} |
             TYPE {ident ["=" type] ";"} |
             VAR {VariableDeclaration ";"} |
             ProcedureHeading ";" .
ProgramModule = MODULE ident [priority] ";"
                {import} block ident "." .
CompilationUnit = DefinitionModule | ForeignDefinitionModule |
                  [IMPLEMENTATION] ProgramModule .
ForeignDefinitionModule = "%FOREIGN" DEFINITION MODULE ident ";"
                          {import} [export] {foreigndefinition} END ident "." .
foreigndefinition = CONST {ConstantDeclaration ";"} |
                    TYPE {ident ["=" type] ";"} |
                    VAR {VariableDeclaration ";"} |
                    ForeignProcedureHeading ";" .
ForeignProcedureHeading = PROCEDURE ident [ForeignFormalParameters] .
ForeignFormalParameters = "(" [ForeignFPSection {";" ForeignFPSection}] ")"
                           [":" qualident] .
ForeignFPSection =  [VAR] ["%REF" | "%IMMED" | "%DESCR" | "%STDESCR"]
                    IdentList ":" FormalType .
