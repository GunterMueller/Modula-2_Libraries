(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE M2Parser;
(*
 * TODO:
 *    There is a funny bug which is tickled by the use of unqualified
 *    imports.  If the modules has the following sequence:
 *    FROM X IMPORT a,b;  FROM X IMPORT c,d; IMPORT X;
 *    then the parser will output an error 'module appears twice in ...'
 *    when it hasn't.  Not a serious problem and really a true error
 *    message, but it isn't an error (hence the programmer might be
 *    bothered).  In general, I would like to have multi-level errors
 *    (i.e. errors and warnings), but time is short and I have other
 *    things to do.  Works fine for now, but needs comments.
 * 
 * 
 * HISTORY:
 *    Please see SCCS history. [TB].
 *    30.09.86 [Rico Cozzio] ported to Sun.
 *)

IMPORT
    SYSTEM, M2Scanner, NameLists, Strings, ProgErrOutput, Intrinsics;

PROCEDURE FindImports(   fileName   : ARRAY OF CHAR;
			 importList : NameLists.Object;
		     VAR name       : ModuleName;
		     VAR modType    : ModuleTypes )
				    : BOOLEAN;
    VAR
	inst    : M2Scanner.Instance;
	result  : BOOLEAN;
    BEGIN (* FindImports *)

	IF NOT M2Scanner.Create( inst, fileName ) THEN
	    ProgErrOutput.WriteString( "ERROR: " );
	    ProgErrOutput.WriteString( fileName );
	    ProgErrOutput.WriteString( ": file not found." );
	    ProgErrOutput.WriteLn;
	    RETURN FALSE;
	END;

	result := Parse( inst, fileName, importList, name, modType );
	IF NOT M2Scanner.Destroy( inst ) THEN (* don't care? *) END;

	RETURN result;

    END FindImports;

TYPE
    KeywordSet = SET OF M2Scanner.Keywords;

VAR
    endKeywords : KeywordSet;
    modKeywords : KeywordSet;


PROCEDURE Parse(     inst       : M2Scanner.Instance;
		     fileName   : ARRAY OF CHAR;  (* for errors *)
		     importList : NameLists.Object;
		 VAR name       : ModuleName;   (* null implies don't know *)
		 VAR modType    : ModuleTypes )
				: BOOLEAN;
    (*
     * If the name is null, then fill it in, the caller didn't know it.
     *)
    VAR
	token      : M2Scanner.Token;
	fromClause : BOOLEAN;
	skipIdent  : BOOLEAN;
	junk       : SYSTEM.ADDRESS;
	moduleKey  : M2Scanner.Keywords;
    BEGIN (* Parse *)
	(* detects the following module headers:
	    MODULE id
	    DEFINITION MODULE id
	    DEFINITION FOR C MODULE id
	    IMPLEMENTATION MODULE id
	*)
	IF NOT M2Scanner.Read( inst, token ) OR 
	   ( token.type # M2Scanner.keyword ) OR
	   NOT ( token.keyword IN modKeywords ) THEN
	    M2Scanner.PrintError( inst, fileName, 
				"expected module description keyword" );
	    RETURN FALSE;
	END;
	(* read over first word *)

	moduleKey := token.keyword;

	IF token.keyword # M2Scanner.module THEN
	    (* Does not start with MODULE, so next has to be MODULE or FOR *)
	    IF NOT M2Scanner.Read( inst, token ) THEN
		(* read failed *)
		M2Scanner.PrintError( inst, fileName, 
				       "expected MODULE or FOR keyword" );
		RETURN FALSE;
	    END;
	    (* last token read is MODULE, or FOR *)
	    IF ( token.type # M2Scanner.keyword ) THEN
		M2Scanner.PrintError (inst, fileName, "keyword expected");
		RETURN FALSE;
	    END;
	    IF ( token.keyword = M2Scanner.for ) THEN
		IF NOT M2Scanner.Read( inst, token ) OR
		    ( token.type # M2Scanner.keyword ) OR
		    ( token.keyword # M2Scanner.c ) THEN
		    M2Scanner.PrintError( inst, fileName, 
					  "expected C keyword" );
		    RETURN FALSE;
		END;
		(* ok, read so far: DEFINITION FOR C *)
		moduleKey := M2Scanner.c;	(* save for later *)
		IF NOT M2Scanner.Read( inst, token ) OR
		       ( token.type # M2Scanner.keyword ) THEN
		    M2Scanner.PrintError( inst, fileName, 
					  "expected MODULE keyword" );
		    RETURN FALSE;
		END;
	    ELSE (* not keyword FOR -> has to be keyword MODULE *)
	    END;
	    IF ( token.keyword # M2Scanner.module ) THEN
		M2Scanner.PrintError( inst, fileName, "expected MODULE keyword" );
		RETURN FALSE;
	    END;
	END;

	IF NOT M2Scanner.Read( inst, token ) OR 
	   ( token.type # M2Scanner.identifier ) THEN
	    M2Scanner.PrintError( inst, fileName, "expected module identifier" );
	    RETURN FALSE;
	END;

	IF name[ 0 ] = 0C THEN
	    (* Didn't know what real name was, copy it in *)
	    Strings.Assign( token.identifier, name );

	ELSIF Strings.Compare( token.identifier, name ) # Intrinsics.equal THEN
	    M2Scanner.PrintError( inst, name, 
				"module name different than expected" );
	    RETURN FALSE;
	END;

	
	CASE moduleKey OF
	    M2Scanner.module:
		modType := program;
	    |
	    M2Scanner.c:
		modType := definitionForC;
	    |
	    M2Scanner.definition:
		modType := definition;
	    |
	    M2Scanner.implementation:
		modType := implementation;
	END;

	(*
	 * From this point onward. We have a valid module which
	 * may not be totally correct.  However, we have a type
	 * and a name which matches.  Any RETURN statements
	 * should be TRUE so the caller knows that he has valid
	 * data (modType and name).
	 *)

	(* 
	 * If this is an implemenation module, then it is dependent 
	 * upon its definition.
	 *)
	IF modType = implementation THEN
	    IF NOT NameLists.Find( importList, name, junk ) THEN
		NameLists.Insert( importList, name, NIL );
	    END;
	END;

	fromClause := FALSE;
	skipIdent  := FALSE;

	LOOP
	    IF NOT M2Scanner.Read( inst, token ) THEN
		M2Scanner.PrintError( inst, fileName, 
				      "expected module declarations" );
		RETURN TRUE;
	    END;

	    CASE token.type OF
		M2Scanner.identifier:
		    IF NOT skipIdent 
		       AND ( Strings.Compare( token.identifier, "SYSTEM" ) 
			     # Intrinsics.equal ) THEN
			(* First put in the list *)
			IF NOT NameLists.Find( importList, token.identifier, junk ) THEN
			    NameLists.Insert( importList, token.identifier, NIL);
			ELSE
(* Don't care that module appears twice in import list....
			    M2Scanner.PrintError( inst, fileName,
				"module name appears twice in import list" );
*)
			END;
		    END;
		|
		M2Scanner.keyword:

		    CASE token.keyword OF
			M2Scanner.import:
			    skipIdent := fromClause;
			    IF fromClause THEN
				fromClause := FALSE;
			    END;
			|
			M2Scanner.from:
			    fromClause := TRUE;
			    skipIdent  := FALSE;

			ELSE
			    IF NOT ( token.keyword IN endKeywords ) THEN
				M2Scanner.PrintError( inst, fileName,
						    "unexpected keyword" );
				RETURN TRUE;
			    END;

			    EXIT; (* got an end keyword EXPORT, VAR,...*)

		    END; (* CASE keyword *)

		ELSE
		    M2Scanner.PrintError( inst, fileName, 
					  "expected keyword or identifier" );
		    RETURN TRUE;

	    END; (* CASE type *)
	END; (* LOOP *)

	RETURN TRUE;

    END Parse;


BEGIN (* M2Parser *)
	
    endKeywords := KeywordSet { M2Scanner.module, M2Scanner.type, 
				M2Scanner.const, M2Scanner.procedure, 
				M2Scanner.var, M2Scanner.export, 
				M2Scanner.begin, M2Scanner.end };

    modKeywords := KeywordSet { M2Scanner.implementation, M2Scanner.module,
				M2Scanner.definition };

END M2Parser.
