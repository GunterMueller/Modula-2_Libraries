(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE MakeParameters;
(*
 * Calls program args with the usage.
 *)

IMPORT
    NameLists,      ProgErrOutput,  ProgErr,	SYSTEM,   
    ProgArgs;

@IF MsDosOS THEN
    IMPORT
	IOSearchPaths;
@END



CONST
    flagPC   = "PC";
    flagSun  = "Sun";
    flagPath = "M";
    flagVersion2 = "v2";

    m2symName = "M2SYM";
    m2objName = "M2OBJ";
    m2lnkName = "M2LNK";

    @IF SunOS THEN
	(* At O&A we use the old logitech by default *)
	defaultVersion = lowVersionPC;
    @ELSE
	defaultVersion = highVersionPC;
    @END

PROCEDURE Usage;
    (*
     * Do it in the standard UNIX way, oh boy!
     *)
    VAR
	programName : ProgArgs.String;
    BEGIN (* Usage *)
	
	ProgErrOutput.WriteString( "Usage: " );
	IF NOT ProgArgs.GetProgramName( programName ) THEN
	    programName := "M2Depend";
	END;
	ProgErrOutput.WriteString( programName );
	ProgErrOutput.WriteString( " <source files>" );
	ProgErrOutput.WriteLn;
	ProgErrOutput.WriteString( "Options: " );
	ProgErrOutput.WriteLn;
	ProgErrOutput.WriteString( 
		"    M<path>: directory to search for imported modules." );
	ProgErrOutput.WriteLn;
	@IF SunOS THEN
	    ProgErrOutput.WriteString( 
		    "    Sun|PC: machine type (defaults to Sun)." );
	    ProgErrOutput.WriteLn;
	@END (* SunOS *)
	@IF MsDosOS THEN
	    ProgErrOutput.WriteString( 
		    "    PC: machine type (defaults to PC)." );
	    ProgErrOutput.WriteLn;
	@END (* MsDosOS *)

	ProgErrOutput.WriteString( 
		"    v2: generate 2.0 Logitech dependencies." );
	ProgErrOutput.WriteLn;

	@IF MsDosOS THEN
	    ProgErrOutput.WriteString(
    "Also searches the dirs in M2SYM, M2OBJ, and M2LNK (version dependent)." );
	    ProgErrOutput.WriteLn; 
	@END

	ProgErrOutput.WriteString(
	    "If no <sources>, the files from the current directory will be read." );
	ProgErrOutput.WriteLn; 

	ProgErr.SetMemorySaveMode( ProgErr.doNotSaveMemoryOnTermination );

	ProgErr.Terminate( "" );

    END Usage;

PROCEDURE ReadCommandLine(     paths      : NameLists.Object;
			       sources    : NameLists.Object;
			   VAR targetType : MachineTypes;
			   VAR version    : VersionNumbers );
    VAR
	isPC     : BOOLEAN;
	isSun    : BOOLEAN;
	vers     : BOOLEAN;
	DONTCARE : BOOLEAN;
    BEGIN (* ReadCommandLine *)

	vers := FALSE;
	ProgArgs.RegisterBoolHandler( flagVersion2, ProgArgs.DefaultBoolHandler,
				      SYSTEM.ADR( vers ) );
	isPC := FALSE;
	ProgArgs.RegisterBoolHandler( flagPC, ProgArgs.DefaultBoolHandler,
				      SYSTEM.ADR( isPC ) );
	isSun := FALSE;
	@IF SunOS THEN
	    ProgArgs.RegisterBoolHandler( flagSun, ProgArgs.DefaultBoolHandler,
				          SYSTEM.ADR( isSun ) );
	@END (* SunOS *)

	ProgArgs.RegisterStringHandler( flagPath, 
		 ProgArgs.DefaultStringListHandler, SYSTEM.ADDRESS( paths ) );

	ProgArgs.RegisterUnflaggedHandler( 
		 ProgArgs.DefaultStringListHandler, SYSTEM.ADDRESS( sources ) );
				   
	IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError ) THEN
	    Usage;
	END;

	@IF SunOS THEN
	    IF isPC AND isSun THEN
		ProgErrOutput.WriteString( "The " );
		ProgErrOutput.WriteString( flagPC );
		ProgErrOutput.WriteString( " and " );
		ProgErrOutput.WriteString( flagSun );
		ProgErrOutput.WriteString( 
		    " flags may not be used concurrently." );
		ProgErrOutput.WriteLn;
		Usage;
	    END;

	    IF isPC THEN
		targetType := PC;
	    ELSE
		targetType := Sun;	(* default *)
	    END;
	@END (* SunOS *)

	@IF MsDosOS THEN
	    (* 
	     * PC's can't generate Sun file names.  If they could,
	     * then we wouldn't need to specify target type!
	     *)
	    targetType := PC;

	@END (* MsDosOS *)

	IF vers THEN
	    version := lowVersionPC;
	ELSE
	    version := highVersionPC;
	END;

	@IF MsDosOS THEN
	    (*
	     * Load up the M2Sym, then obj or link depending upon version.
	     *)
	    DONTCARE := IOSearchPaths.GetFromEnviron( m2symName, 
		IOSearchPaths.pathSeparator, paths );
	    IF version = highVersionPC THEN
		DONTCARE := IOSearchPaths.GetFromEnviron( m2objName, 
		    IOSearchPaths.pathSeparator, paths );
	    ELSE
		DONTCARE := IOSearchPaths.GetFromEnviron( m2lnkName, 
		    IOSearchPaths.pathSeparator, paths );
	    END;
	@END

    END ReadCommandLine;

END MakeParameters.
