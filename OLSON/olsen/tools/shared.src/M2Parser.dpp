(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE M2Parser;
(*
 * A Simple Modula-2 parser which understands import lists.
 *
 * HISTORY:
 *     Please see SCCS history. [TB].
 *     30.09.86 [Rico Cozzio] ported to Sun.
 *)
IMPORT
    NameLists,           M2Scanner;

EXPORT QUALIFIED
    ModuleName,         ModuleTypes,    FindImports;

TYPE
    ModuleName  = M2Scanner.Identifier;
    ModuleTypes = ( definition, 	(* THIS MUST BE FOLLOWED BY impl... *)
		    implementation, 	(* because M2Depend, depends upon it *)
		    program,		(* Ditto *)
		    definitionForC,
		    notModule );	(* for completeness. *)

PROCEDURE FindImports(   fileName   : ARRAY OF CHAR;
			 importList : NameLists.Object;
		     VAR name       : ModuleName;
		     VAR modType    : ModuleTypes )
				    : BOOLEAN;
    (* 
     * Read the named file for imports and fill in the importList.
     * If the name is empty, then it fills it in with the name of
     * the module that was found.  modType is the type of the module
     * that it says in the file.  If name is not empty, then it
     * compares the name in the file with the name passed in 
     * and outputs an error in the event of an inconsistency.
     *
     * INPUT:
     *    fileName   = file to be parsed.
     *    importList = a list of found imports.
     *    name       = name of the module in fileName (null means fill in).
     *
     * OUTPUT:
     *    name       = the name of the module in the file, only modified
     *                 it was null when passed in.  Unmodified on failure.
     *    modType    = the type specified in the file (invalid on failure).
     *    <result>   = TRUE, if the file could be parsed enough to verify
     *                       the name. Syntax errors are displayed, thus
     *                       there is no need for further error output.
     *                       importList may be incorrect, but the user will
     *                       be notified.
     *                 FALSE, if modType and name could not be read.
     *)

END M2Parser.
