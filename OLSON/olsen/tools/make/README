**************************************************************************
* O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS      *
* DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND *
* FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR *
* CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF   *
* USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR  *
* OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR *
* PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.			 *
**************************************************************************

	    From "Ralph E. Droms" droms@purdue.edu

Following is a repost of the public domain 'make' that I posted
to net.sources a couple of months ago.  I have fixed a few bugs, and
added some more features, and the resulting changes amounted to
about as much text as the whole program (hence the repost).
 
For those that missed the net.sources posting, this is a public domain
re-implementation of the UNIX make program.  There is no manual included;
for documentation, refer to a UNIX manual, or the source.
 
Here is a list of the changes made:
 
i) if '-' (ignore or '@' (silent) where used at the start
    of a command, their effect was not turned off for the following
    commands.
ii)    A special target (.SUFFIXES, .PRECIOUS) or a rule (.c.o, .a.o),
    if first in the file would be taken as the default target.
    This resulted in error messages like "Don't know how to
    make .c", because things like .SUFFIXES were being made.
    This was further complicated by ---
iii)    Special target lines with no dependents (ie. .SUFFIXES:\n)
    were not clearing out the existing dependents like
    they should.
iv)    Default rules could not be redefined because of the error
    checking for commands being defined twice.  Now you are
    allowed to define a target beinging with '.', having
    no dependents with commands.
v)    The -q option didn't do the time comparison correctly,
    or clear the variable used to keep track of this.  Thus
    it didn't work very well.
vi)    The syntax ${..} for macro's supported by UNIX make was
    not supported.
vii)    There wuz a couple of spelling errors.
viii)    When make checked for implicit rules on targets without
    a suffix, there were problems.  (Note: The ~ feature of
    UNIX make wasn't and still isn't supported)
ix) the -n option did not print @ lines like it was supposed to.
x)    :: added.  (See UNIX manual)
xi)    $? added.  (see UNIX manual)

MODIFICATIONS:
    15.9.88 - Robert J. Nagler (RJN) 
      Tested on MS-DOS (Turbo-C) and Sun Unix only.
	1 Added include files.  Just specify "include <filename>" in 
	  makefile.
	2 Added exporting of macros explicitly via an export statement
	  similar to the bourne shell's.  Just specified 
	  "export <name1> <name2> ... <name3>".  Note that the macros
	  are expanded at the time they are exported.
	3 Added importing of environment variables as macros.
	  "import <name1> <name2> ... <name3>". 
	4 Added macro expansions of the form "${XXX:.def=.mod}". 
	  I improved the standard semantics by allowing recursive
	  expansions which is not available in Sun's version of make
	  (and I suspect others).
	5 Fixed a few bugs.  One of them being an "unfix" of the fix to
	  bug number (viii) above.  This may be a mistake, but it is
	  needed to link anything on unix with an implicit rule.
	6 Implemented a grade number one hack to get make to stop on 
	  MSDOS.  You see, the shell doesn't return error codes when
	  programs die, therefore you must detect an error in the 
	  compile (or whatever) someother way.  The method implemented
	  is to check for the existence of a file "makestop.$$$".
	  It is only around for the duration of the make command.
