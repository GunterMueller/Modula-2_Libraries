(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE TaskTime;
(*
 * Uses interrupts and tasks to implement timed Suspends.  A task
 * sets its Info field to the relative ticks and then inserts itself
 * in the timer queue.  The sleepQueue is a linked list of InfoRecs
 * which is in order of least time to sleep to greatest time to sleep.
 * The "relTicks" field is the amount of time the task should sleep 
 * (in ticks) when it becomes the head of the sleepQueue.  The total
 * amount of time a task has to sleep is equal to the sum of all the
 * relTicks fields from the head of the sleepQueue up to and including
 * the relTicks field of the task which is sleeping.  See the interrupt
 * handler and Sleep for more details.
 * 
 * The interrupt handler is linked into the PC clock.  The number of ticks
 * per second is defined by the description in the PC/AT Technical
 * Reference Manual (First Ed. March 1984).   See the IBM ROM BIOS
 * listing for TIMER_INT_1 (page 5-162) for details.  The clock frequency
 * of the 8253 timer chip (channel 0) is 1.19318 Mhz and the chip counts
 * to 65536 between interrupts.  We approximate this value inside
 * the Sleep routine.  The exact value can be obtained from Resolution.
 *
 * The last service that this module provides is mutual exclusion of
 * DOS.  DOS has an unadvertised "critical section flag".  It is unsupported,
 * but seems to work on versions 3.X.  The basic idea is that DOS is
 * reentrant, but only when the "critical section flag" is zero.  Since
 * DOS does not tell you when it is not in a critical section, we must
 * poll the flag.  Since we want the task which is inside DOS to finish,
 * we must release the processor inbetween polls.  Hence, the need for
 * this module to implement the DosMonitor.  Note that the previous
 * monitor is just Tasks.Disallow/Allow and is installed by Tasks.
 *)
IMPORT
    CardConvert,
    DOS,
    DosMonitor,
    I8086,
    Interrupts,
    Notices,
    Objects,
    ProgErrOutput,
    SYSTEM,
    SysTypes,
    TaskConsts,
    TaskInfo,
    Tasks;

CONST
    moduleName = "TaskTime";

    intVector  = 08H;
	(* 
	 * The choice of the interrupt vector is question.  We choose
	 * this interrupt vector because we must be the first piece
	 * of code to receive any hardware interrupt in the system
	 * (which we handle).  The problem is that we must disallow
	 * preemption for the *entire* interrupt (not just the code
	 * we execute).
	 *)

VAR
    (* LOGIBUG - Can't seem to do this as a constant 
    millisecondsPerTick : 65536.0 / 1193.18;	(* approx 54.9254932197 *)
    *)
    millisecondsPerTick : REAL;	(* Computed at initialization *)
CONST
    approxMillisecondsPerTick = 55;		(* integer value *)
	(*
	 * The frequency of the clock is 1.19318E6 hz.  The number of counts
	 * at this frequency before an interrupt occurs is 65536.  The
	 * amount we want is in milliseconds (thus the 1000 factor).
	 *	( 1.0 / freq ) * ( 65536 * 1000 ).
	 * To speed things up inside sleep, we use approxMillisecondsPerTick.
	 * In print (in order not to lose more precision), we do a 
	 * real number calculation.
	 *)

PROCEDURE Resolution(
    ) : REAL;
    BEGIN (* Resolution *)
	
	RETURN millisecondsPerTick;

    END Resolution;


TYPE
    (*  
     * Not that the info field of a task is only used by the task itself,
     * thus we do not need to provide mutual exclusion for this task.
     *)
    Info    = POINTER TO InfoRec;
    InfoRec = RECORD
	next       : Info;	   (* Needed for efficiency in the handler *)
	relTicks   : SysTypes.Card;(* Relative number of ticks to sleep    *)
	task	   : Tasks.Object; (* Used to ready sleeping tasks *)
	inQueue    : BOOLEAN;	   (* Are we in the sleepQueue *)
    END;

VAR
    infoMgr    : Objects.Manager; (* Technically,  this doesn't have to
				    an "object", but was easier for now... *)
    infoID     : TaskInfo.Object; (* Identification of our task information
				      block type. *)
    sleepQueue : Info;
	(*
	 * Queue of info records ordered in least to most time to sleep.
	 * The "relTicks" field is not the total time for the task to sleep.
	 * It is the amount of time the task must sleep when it is at
	 * the head of the queue.  Note this queue and the "next" and
	 * "relTicks" should only be modified in SYSTEM.DISABLEd sections.
	 *)

PROCEDURE Sleep( 
    timeout : Units 
    );
    (*
     * Get the task information.  Compute the amount of ticks to sleep.
     * Once computed we must insert in the sleepQueue.  We insert
     * before the InfoRec with a relTicks field which is strictly greater
     * than the toInsert's relTicks field.  For each InfoRec that is
     * not strictly greater than, we must skip over and substract the
     * value of relTicks from toInsert's relTicks field.  
     * Finally, we suspend the task until we are awoken.
     *)
    VAR
	toInsert : Info;
	prevInfo : Info;
    BEGIN (* Sleep *)

	(* Get the toInsert first just *)
	toInsert := TaskInfo.GetCurrent( infoID );

	WITH toInsert^ DO
	    (* We round to the nearest tick *)
	    relTicks := ( timeout + approxMillisecondsPerTick DIV 2 )
			  DIV approxMillisecondsPerTick;
	    IF relTicks = 0 THEN
		relTicks := 1;	(* Never sleep for 0 ticks *)
	    END;
	END; (* WITH *)

	(* We need to push the flags as specified by the def mod *)
	SYSTEM.CODE( I8086.Pushf );	 	
	SYSTEM.DISABLE;		(* Enter sleepQueue *)
	    
	    (* Insert in the queue *)
	    IF sleepQueue = NIL THEN
		(* Only one in the list *)
		sleepQueue := toInsert;
		toInsert^.next := NIL;

	    ELSIF toInsert^.relTicks < sleepQueue^.relTicks THEN
		(* 
		 * Insert at the head, but first we must adjust
		 * the head's value of relTicks.
		 *)
		WITH toInsert^ DO
		    DEC( sleepQueue^.relTicks, relTicks );
		    next       := sleepQueue;
		    sleepQueue := toInsert;
		END; (* WITH *)

	    ELSE (* Insert after the head *)

		prevInfo := sleepQueue;
		(*
		 * Go through the loop subtracting the time that the
		 * to sleep for all the tasks which will sleep before
		 * the task we are going to insert.
		 *)
		LOOP 
		    WITH prevInfo^ DO
			DEC( toInsert^.relTicks, relTicks );
			IF next = NIL THEN
			    EXIT;	 (* Insert at the tail *)
			END;
			IF toInsert^.relTicks < next^.relTicks THEN
			    (* 
			     * Insert before prevInfo^.next, thus
			     * we must subtract off the time "toInsert"
			     * is going to sleep.
			     *)
			    DEC( next^.relTicks, toInsert^.relTicks );
			    EXIT;
			END;
		    END; (* WITH *)
		    prevInfo := prevInfo^.next;
		END; (* LOOP *)

		(* Insert somewhere in the list *)
		toInsert^.next := prevInfo^.next;
		prevInfo^.next := toInsert;

	    END; (* IF *)

	    (* Nothing to do but wait to be woken up! *)
	    toInsert^.inQueue := TRUE;
	    REPEAT
		Tasks.Suspend;
	    UNTIL NOT toInsert^.inQueue;

	SYSTEM.CODE( I8086.Popf );	(* Exit sleepQueue *)

    END Sleep;


PROCEDURE WakeUp( 
    sleepingTask : Tasks.Object 
    );
    (*
     * To wake up an arbitrary task, we must get its information.  If
     * it isn't sleeping, then there is nothing to do.
     *)
    VAR
	toDelete : Info;
	prevInfo : Info;
    BEGIN (* WakeUp *)

	(* We need to push the flags as specified by the def mod *)
	SYSTEM.CODE( I8086.Pushf );	 	
	SYSTEM.DISABLE;		(* Enter sleepQueue *)

	    (* 
	     * Since we disable interrupts, we can get the information
	     * without Disallowing preemption.
	     *)
	    toDelete := TaskInfo.Get( infoID, sleepingTask );

	    WITH toDelete^ DO
		(* Is the task really sleeping? *)
		IF inQueue THEN

		    (* Is there someone who is sleeping after toDelete? *)
		    IF next # NIL THEN
			INC( next^.relTicks, relTicks ); 
		    END;

		    (* 
		     * Delete from the list.
		     * Is toDelete the head of the list? 
		     *)
		    IF sleepQueue = toDelete THEN
			sleepQueue := next;
		    ELSE
			(* Must find somewhere in the list *)
			prevInfo := sleepQueue;
			WHILE prevInfo^.next # toDelete DO
			    prevInfo := prevInfo^.next;
			END;
			prevInfo^.next := next;	(* Delete from list *)
		    END;

		    (* 
		     * We must tell the task it is ok to continue and
		     * we must wake up the task, because it is sleeping.
		     *)
		    inQueue := FALSE;
		    Tasks.Ready( sleepingTask );
		END;
	    END; (* WITH *)

	SYSTEM.CODE( I8086.Popf );	(* Exit sleepQueue *)

    END WakeUp;


@IF TRUE THEN
(*$S-*)	(* Makes things go faster... *)
(*$R-*)
(*$T-*)
(*$O-*)
@END 
PROCEDURE InterruptThread( 
    DONTCARE : SysTypes.ANYPTR 
    );
    (*
     * Interrupts are disabled the whole time.  We check the head of
     * the list for being empty or being ready to wakeup.  Readies
     * all tasks at the head of the queue which have relTicks = 0.
     *)
    BEGIN (* InterruptThread *)

	(* Is there anything to do? *)
	IF sleepQueue = NIL THEN
	    RETURN;
	END;

	(* 
	 * Decrement the pointer at the head of the queue 
	 * Check to see if we have to ready any tasks.
	 *)
	WITH sleepQueue^ DO
	    DEC( relTicks );
	    IF relTicks # 0 THEN
		RETURN;		(* Nothing ready to wakeup *)
	    END;
	END; (* WITH *)

	(*
	 * Ready tasks until the queue is empty or there are no more
	 * tasks which are ready to wakeup.
	 *)
	REPEAT
	    WITH sleepQueue^ DO
		Tasks.Ready( task );
		inQueue    := FALSE;	(* now deleted from queue *)
	    END; (* WITH *)
	    sleepQueue := sleepQueue^.next;
	UNTIL ( sleepQueue = NIL ) OR ( sleepQueue^.relTicks # 0 );

    END InterruptThread;
@IF TRUE THEN
(*$S=*)
(*$R=*)
(*$T=*)
(*$O=*)
@END


PROCEDURE Birth( 
    newTask : Tasks.Object 
    ) 	    : SysTypes.ANYPTR;
    (*
     * Allocate a new information block for the specified task and
     * initialize.
     *)
    VAR
	info : Info;
    BEGIN (* Birth *)

	Objects.Allocate( infoMgr, info );
	WITH info^ DO
	    next     := NIL;	(* Not so important to initialize *)
	    relTicks := 0;	(* Not so important to initialize *)
	    task     := newTask;
	    inQueue  := FALSE;
	END;

	RETURN info;	(* tell 'em about it *)

    END Birth;


PROCEDURE Death( 
    deadTask : Tasks.Object;
    infoAdr  : SysTypes.ANYPTR 
    );
    BEGIN (* Death *)
	
	(*
	 * The task can only die if it falls off of its control thread so
	 * we don't have any queues to muck with.
	 *)
	Objects.Deallocate( infoMgr, infoAdr );

    END Death;


PROCEDURE Print( 
    infoAdr : SysTypes.ANYPTR 
    );
    (*
     * We want to print the total amount of time the task has to
     * sleep.  This means we must go through the whole queue of sleeping
     * tasks summing up the number of ticks until we find the task which
     * is sleeping.  Note that we really don't know if a task is sleeping
     * or not unless it is in the queue.
     *)
    VAR
	info       : Info;
	cardString : ARRAY [ 0 .. SysTypes.bitsPerCard ] OF CHAR;
	totalTicks : SysTypes.Card;
	DONTCARE   : BOOLEAN;
    BEGIN (* Print *)


	ProgErrOutput.WriteString( "Sleep: " );
	totalTicks := 0;
	info := infoAdr;
	SYSTEM.DISABLE;		(* Enter sleepQueue *)
	    IF info^.inQueue THEN
		info := sleepQueue;
		WHILE info # infoAdr DO
		    INC( totalTicks, info^.relTicks );
		    info := info^.next;
		END;
		INC( totalTicks, info^.relTicks );
	    END;
	SYSTEM.ENABLE;		(* Exit sleepQueue *)

	(* Convert the totalTicks to a string. *)
	DONTCARE := CardConvert.ToString( 
		TRUNC( millisecondsPerTick * FLOAT( totalTicks ) + 0.5 ),
	        10, 0, cardString );
	ProgErrOutput.WriteString( cardString );

    END Print;


VAR
    oldDosEnter  : PROC;
    oldDosExit   : PROC;


PROCEDURE DosEnter;
    (*
     * Disable interrupts (because we don't know who is going to be
     * inside DOS).  Check the critical section flag. If it is non-zero,
     * then sleep a tick.
     *)
    BEGIN (* DosEnter *)

	SYSTEM.DISABLE;	(* BEGIN Dos critical section entry *)
	    WHILE DosMonitor.criticalSectionFlag^ # 0C DO
		Sleep( 0 );	(* By definition of Sleep, sleeps one tick *)
	    END;

	(* Interrupts are re-enabled inside DosExit *)

    END DosEnter;


PROCEDURE DosExit;
    (*
     * Just re-enable interrupts.
     *)
    BEGIN (* DosExit *)
	
	SYSTEM.ENABLE;	(* END Dos critical section entry *)

    END DosExit;


VAR
    handler      : Interrupts.Object;	(* Only used for creation and
					   destruction *)

PROCEDURE Terminate( 
    mode : SysTypes.ANYPTR
    );
    (*
     * Always re-install interrupt handlers.
     *)
    VAR
	DONTCARE : PROC;
    BEGIN (* Terminate *)
	
	(* Always deinstall the DosMonitor *)
	DosMonitor.Install( oldDosEnter, oldDosExit, DONTCARE, DONTCARE );

	(* always shut off the interrupt handler *)
	Interrupts.Destroy( handler );

	IF mode = Notices.normalTermination THEN
	    TaskInfo.Destroy( infoID );
	    Objects.DestroyManager( infoMgr );
	END;

    END Terminate;


BEGIN (* TaskTime *)

    (* LOGIBUG *)
    millisecondsPerTick := 65536.0;
    millisecondsPerTick := millisecondsPerTick / 1193.18;

    (*
     * Do local initialization, before installing the DosMonitor and
     * terminate.  Note that the interrupt handler must be initialized
     * after the TaskInfo is created.
     *)
    Objects.CreateManager( infoMgr, SYSTEM.TSIZE( InfoRec ), moduleName );
    sleepQueue := NIL;

    TaskInfo.Create( infoID, Birth, Death, Print );

    (*
     * Set up the interrupt handler.  Note that we always asked  for
     * chained interrupts to allow proper sharing.
     *)

    Interrupts.Create( handler, InterruptThread, Interrupts.DONTCARE,
		       intVector, Interrupts.callPrevious );

    DosMonitor.Install( DosEnter, DosExit, oldDosEnter, oldDosExit ); 

    Notices.Register( Notices.GetTerminationNotice(), Terminate );

END TaskTime.
