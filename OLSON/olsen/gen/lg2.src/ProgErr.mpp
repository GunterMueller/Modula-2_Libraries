(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE ProgErr;
(*
 * IBM PC/Logitech implementation.  Run-time system:
 *   Version: 		8086 processor, RAM-based,  MS-DOS 2.0 and later
 *   DBUG.ASM: 		Release: 1.20 - 14-Nov-85
 *   SERVICES.ASM: 	Release: 1.20 - 14-Nov-85
 *   RTS.ASM:		Release: 1.20 - 14-Nov-1985
 *    
 * The compiler release is 2.X.
 *
 * There are two ways to terminate:
 *     - from the run-time system (RunTimeHandler)
 *     - and via Terminate in this module being called.
 *
 * Normal termination is only true if the RunTimeHandler is called
 * and the "error code" is "normal" (0).   The Terminate procedure
 * does not call the termination procedures.  It terminates through
 * the RTS allowing the RTS to call the termination procedures.
 *
 * There are two models of operation for this module: NoStorage or
 * NOT NoStorage.  If you use the Logitech Storage module, you must
 * use the module System to do termination, because Storage imports
 * System.  The other model is required for Tasks, but is also
 * useful to the normal program.  In the Tasks model we use our own
 * storage allocation (DOS) which requires only a couple of bytes of
 * code as opposed to the 6K required by the Logitech Storage module.
 * 
 * TODO:
 *    - There is a slight problem with this implementation which will be
 *      fixed as soon as we install our own run-time system.  The problem
 *      is that once you turn off dumping, you can't turn it back on again.
 *      No one should notice it for the time being, however.  All that has
 *      to be done is provide a mode for "deinstalling" the Debug module
 *      like they do with the RTD (see the run-time system sources).
 *)
IMPORT 
    (* Import only the bare essentials *)
    I8086,
    ProgErrOutput,	   	
    SYSTEM,
    SysTypes;

@IF NOT NoStorage AND NOT Tasks THEN
    IMPORT 
	System;
@END (* NOT NoStorage *)

PROCEDURE NoDump( DONTCARE : SYSTEM.ADDRESS );
    (*
     * Called by the run-time system when we don't want a memory dump.
     * Gets the "currentProcessPtr".  This might be useful later,
     * but we don't care about it now.
     *)
    END NoDump;

VAR
    memorySaveMode    : MemorySaveModes;

PROCEDURE SetMemorySaveMode( newMemorySaveMode : MemorySaveModes );
    (*
     * TODO:
     *     Can this talk to the underlying operating systems?
     *)
    CONST
	installDebug  = 27H;
	(* Modes of the installDebug call *)
	removeRTD        = 0;	(* remove Run Time Debugger	 *)
	installRTD       = 1;	(* install Run Time Debugger 	 *)
	installDumpProc  = 2;	(* DX:DI = Addr of dump routine. *)
    VAR
	noDumpAdr : SYSTEM.ADDRESS;	
    BEGIN (* SetMemorySaveMode *)

	IF memorySaveMode # newMemorySaveMode THEN
	    CASE newMemorySaveMode OF
		saveMemoryOnAbnormalTermination:
		    (* BUG: Can't do this right now! *)
		|
		doNotSaveMemoryOnTermination:
		    (* Look at the run-time sources if you have questions *)
		    noDumpAdr := SYSTEM.ADDRESS( NoDump );
		    SYSTEM.SETREG( SYSTEM.DI, noDumpAdr.OFFSET);
		    SYSTEM.SETREG( SYSTEM.DX, noDumpAdr.SEGMENT);
		    SYSTEM.SETREG( SYSTEM.CX, installDumpProc );
		    SYSTEM.SETREG( SYSTEM.AX, installDebug );
		    SYSTEM.SWI( SYSTEM.RTSVECTOR );
		    
	    END; (* CASE *)

	    (* Save the mode so that we know what state we are in! *)
	    memorySaveMode := newMemorySaveMode;

	END; (* IF *)

    END SetMemorySaveMode;

VAR
    terminationHandler : TerminationHandler;

PROCEDURE InstallTerminationHandler(     newHandler : TerminationHandler;
		                     VAR oldHandler : TerminationHandler );
    BEGIN (* InstallTerminationHandler *)

	oldHandler := terminationHandler;
	terminationHandler := newHandler;

    END InstallTerminationHandler;

PROCEDURE DefaultTerminationHandler( terminationMode : TerminationModes );
    (* Nothing to do *)
    END DefaultTerminationHandler;

VAR
    terminateCount : SysTypes.Card;

PROCEDURE Terminate( message : ARRAY OF CHAR );
    (*
     * If the message is non-null, then print out the message followed
     * by a new-line.   We call HALT for the time being until there is
     * figure out a better method of terminating.  Ideally, we want
     * to terminate with no message if "message" is empty and we want
     * to print out the termination message after the termination procedures
     * are called, but this is highly unlikely.
     *
     * NOTE: 
     *    We must terminate to the RTS first, so we get mortimer (PMD) to 
     *    do its stuff.  To print the message out last will be a tricky
     *    business.
     *)
    BEGIN (* Terminate *)

	INC( terminateCount );	(* May recurse in ProgErrOutput *)
	IF ( message[ 0 ] # 0C ) AND ( terminateCount < 3 ) THEN
	    ProgErrOutput.WriteString( message );
	    ProgErrOutput.WriteLn;
	END;

	HALT;		(* Shouldn't be this way... *)

    END Terminate;

VAR
    terminated : BOOLEAN;  (* to prevent endless recursion *)

@IF NoStorage OR Tasks THEN
    CONST
	installTermProc  = 29H;	
	    (*
	     * See the RTS for details, but CX:BX is passed in with the
	     * new term proc to install and CX:BX contains the old value
	     * upon the return.
	     *)
    VAR
	oldRunTimeHandler : PROC; 	(* Set up during initialization *)
@END (* NoStorage *)
    CONST
	getErrorCode	= 2FH;
	    (* 
	     * Calls the run-time system to get the error code of the
	     * program which is returned in BX.
	     *)

PROCEDURE RunTimeHandler;
    (*
     * Called on run-time errors by Logitech RTS.  The implementation
     * defined in System.CallTerm is incorrect.  It assumes to global
     * a view of the world.  The correct mode of operation is to 
     * deinstall yourself and then do your termination.   The WHILE
     * loop in both the RTS and System are screwed up.
     *)
    VAR
	tmp : SysTypes.Card;
    BEGIN (* RunTimeHandler *)

	IF terminated THEN
	    RETURN;	(* Don't do anything if this is the second error *)
	END;
	terminated := TRUE;

	(* Get the error code so we know how to terminate *)
	SYSTEM.SETREG( SYSTEM.AX, getErrorCode );
	SYSTEM.SWI( SYSTEM.RTSVECTOR );
	SYSTEM.GETREG( SYSTEM.BX, tmp );

	(* 
	 * Both System and RTS calls us with flags disabled, but this
	 * isn't pretty nor clean.
	 *)
	SYSTEM.CODE( I8086.Pushf );
	SYSTEM.ENABLE;

	(* 0 means that we had normal termination *)
	IF tmp = 0 THEN
	    terminationHandler( normalTermination );
	ELSE
	    terminationHandler( abnormalTermination );
	END;

	SYSTEM.CODE( I8086.Popf );	(* Restore flags to interrupts off *)

	@IF NoStorage OR Tasks THEN
	    (* 
	     * Call the previous handler so that it can do its stuff.
	     *)
	    oldRunTimeHandler;
	@END  (* NoStorage *)


    END RunTimeHandler;


@IF LowLevelDebugging THEN
    CONST
	maxBase = 10;	(* In case this is a parameter some day *)
    VAR
	digits  : ARRAY [ 0 .. maxBase - 1 ] OF CHAR;

    PROCEDURE CardToString(     from  : SysTypes.Card;
			    VAR to    : ARRAY OF CHAR );
	(*
	 * A very simple cardinal conversion routine.  It is designed
	 * for diagnostic output for very low level routines.  It
	 * converts a cardinal into base 10 into a right justified string
	 * using "blank" padding.  If "to" isn't large enough, then
	 * the result is filled with '*' characters.
	 *
	 * INPUT:
	 *    from,  what is to be converted.
	 * 
	 * OUTPUT:
	 *    to,    resulting human readable string.
	 *)
	CONST
	    base = 10;
	VAR
	    i    : SysTypes.Card;
	    pad  : CHAR;
	    tmp  : SysTypes.Card;
	BEGIN (* CardToString *)

	    i   := HIGH( to );
	    LOOP
		to[ i ] := digits[ from MOD base ];
		from    := from DIV base;
		IF from = 0 THEN
		    pad := ' ';	(* Everything ok *)
		    EXIT;
		END;
		IF i = 0 THEN
		    (* Ran out of space *)
		    pad := '*';	(* Mark as failure *) 
		    i   := HIGH( to ) + 1;	(* first DEC *)
		    EXIT;
		END;
		DEC( i );
	    END; (* LOOP *)

	    (* Pad out the rest of the string *)
	    WHILE i > 0 DO
		DEC( i );
		to[ i ] := pad;
	    END;

	END CardToString;
@END (* LowLevelDebugging *)

@IF NoStorage OR Tasks THEN
    VAR
	tmpAdr : SYSTEM.ADDRESS;
@END (* NoStorage *)
BEGIN (* ProgErr *)

    @IF LowLevelDebugging THEN
	digits  := '0123456789';
    @END (* LowLevelDebugging *)

    (*
     * Initialize the local variables before calling other modules.
     *)
    terminated         := FALSE;
    terminateCount     := 0;	(* prevent infinite recursion *)
    terminationHandler := DefaultTerminationHandler;
    memorySaveMode     := saveMemoryOnAbnormalTermination;  (* rts default *)

    @IF NOT NoStorage AND NOT Tasks THEN
	System.TermProcedure( RunTimeHandler );
    @ELSE
	(*
	 * Install our RunTimeHandler as the current run-time handler.
	 * Inside of RunTimeHandler we replace the our handler with
	 * the one before us (oldRunTimeHandlerAdr).
	 *)
	tmpAdr := SYSTEM.ADDRESS( RunTimeHandler );
	SYSTEM.SETREG( SYSTEM.CX, tmpAdr.SEGMENT );
	SYSTEM.SETREG( SYSTEM.BX, tmpAdr.OFFSET);
	SYSTEM.SETREG( SYSTEM.AX, installTermProc );
	SYSTEM.SWI( SYSTEM.RTSVECTOR );
	SYSTEM.GETREG( SYSTEM.CX, tmpAdr.SEGMENT ); 
	SYSTEM.GETREG( SYSTEM.BX, tmpAdr.OFFSET ); 
	oldRunTimeHandler := PROC( tmpAdr );
    @END (* NOT NoStorage *)

END ProgErr.
