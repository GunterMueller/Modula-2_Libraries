(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE TaskSemaphores;
(* 
 * There are two datastructures associated with semaphores: Info and Object.  
 * Info is assigned to each task (via TaskInfo) and Object is the semaphore.  
 * There are several pointers that are intertwined in these data structures.
 * 
 * head/tail/owner/nextWaiting:
 * The main list of the semaphore is a list of waiting tasks.
 * Since semaphores are on a first-come first-serve basis, a tail 
 * pointer is maintained.  "tail" is invalid if head is NIL.
 *
 * blockedOn:
 * This field is back pointer to the semaphore from the task information. 
 * We also use it as the signaling mechanism between the signaler and the
 * waiter.  If the waiter sees that his blockedOn field is NIL, then 
 * he knows he got the semaphore.
 *
 * All of the semaphore fields can only be accessed or modified 
 * in non-preemptable sections.
 *)
IMPORT
    Objects,
    Notices,
    ProgErr,
    ProgErrOutput,
    Strings,
    SYSTEM,
    SysTypes,
    TaskConsts,
    TaskInfo,
    Tasks,
    TaskTime;

TYPE
    Object    = POINTER TO ObjectRec;
    Info      = POINTER TO InfoRec;

    ObjectRec = RECORD
	count	    : SysTypes.Int; (* (+) num signals or (-) num waiting *)
	head        : Info;         (* List of waiting tasks *)
	tail        : Info;         (* Last task waiting valid if head # NIL*)
	name        : TaskConsts.Name;	(* Name used for debugging  *)
    END;

    InfoRec   = RECORD
	blockedOn     : Object; 	(* Semaphore which task is waiting on *)
	inTimedWait   : BOOLEAN;	(* Only true if in TimedWait *)
	nextWaiting   : Info;		(* Next task in line for semaphore,
					   always maintained as NIL when not
					   in queue. *)
	task          : Tasks.Object;   (* Needed for Ready in Signal *)
    END;

CONST
    moduleName = "TaskSemapores";
VAR
    objectMgr : Objects.Manager;	(* Allocated semaphores *)
    infoMgr   : Objects.Manager;	(* Allocated task information *)
    infoID    : TaskInfo.Object;	(* identification of TaskInfo *)

@IF Assert THEN
    CONST
        semaphoreIsActive = 
	  "TaskSemaphores: Destroy called on semaphore in improper state.";
        countToHigh = 
	  "TaskSemaphores: maxSignalsPending was exceeded.";
@END (* Assert *)

 
PROCEDURE Create( 
    VAR semaphore    : Object;
	initialCount : Count;
        anyName      : ARRAY OF CHAR
    );
    (* Allocate and initialize to initialCount *)
    BEGIN (* Create *)
	
	Objects.Allocate( objectMgr, semaphore );
	WITH semaphore^ DO
	    count     := initialCount;	  (* Num pending signals *)
	    head      := NIL;
	    tail      := NIL;
	    Strings.Assign( anyName, name );
	END;

    END Create;


PROCEDURE Destroy(
    VAR semaphore : Object
    );
    (*
     * Have to check for tasks waiting.
     *)
    BEGIN (* Destroy *)
	
	IF NOT Objects.IsValid( objectMgr, semaphore ) THEN
	    RETURN;	(* The semaphore was not initialized *)
	END;

	@IF NOT Assert THEN

	    (* Don't check anything, just destroy. *)
	    Objects.Deallocate( objectMgr, semaphore );

	@ELSE (* NOT Assert *)
	    (*
	     * Must destroy in a non-preemptable section if checking
	     * the head field.  Otherwise, the object will not be
	     * invalidated and there is a race condition on usage.
	     *)
	    Tasks.DisallowPreemption;

		IF semaphore^.head # NIL THEN
		    ProgErr.Terminate( semaphoreIsActive );
		END;

		Objects.Deallocate( objectMgr, semaphore );

	    Tasks.AllowPreemption;

	@END (* Assert *)

    END Destroy;

     
PROCEDURE Signal(
    semaphore : Object
    );
    (*
     * Simple implementation at first, later it may be better to copy.
     *)
    BEGIN (* Signal *)

	IF NOT TestAndSignal( semaphore, maxSignalsPending ) THEN
	    ProgErr.Terminate( countToHigh );
	END;
	
    END Signal;


PROCEDURE TestAndSignal(
    semaphore : Object;
    maxCount  : Count
    )         : BOOLEAN;
    (* 
     * Verify that the count is not greater than maxCount.  If it isn't, 
     * increment the semaphore.  If the semaphore is not positive, then 
     * ready (wake up) the head.
     *)
    VAR
	result : BOOLEAN;    (* count <= maxCount *)
	info   : Info;	     (* waiting task's info *)
    BEGIN (* TestAndSignal *)

	@IF Assert THEN
	    Objects.Assert( objectMgr, semaphore );
	@END (* Assert *)
	
	WITH semaphore^ DO
	    Tasks.DisallowPreemption;
	    
		result := count <= INTEGER( maxCount );
		IF result THEN
		    INC( count );
		    IF count <= noSignalsPending THEN
			(* 
			 * Someone needs to be woken up! If "head" = NIL,
			 * then assertion fault (caught by run-time).
			 * Delete the guy from the queue and also set his
			 * blockedOn field to NIL, so he knows he got the
			 * semaphore.
			 *)
			WITH head^ DO
			    IF inTimedWait THEN
				TaskTime.WakeUp( task );
			    ELSE
				Tasks.Ready( task );
			    END;
			    blockedOn := NIL;	 (* indicate success *)
			    head := nextWaiting;
			END; (* WITH *)
		    END;
		END; (* IF *)

	    Tasks.AllowPreemption;
	END; (* WITH *)
	
	RETURN result;

    END TestAndSignal;


PROCEDURE Wait( 
    semaphore : Object (* If count is 0 or less, then caller blocks *)
    );
    VAR
	info     : Info;    (* My information *)
	previous : Info;    (* list games *)
	result   : BOOLEAN; (* Howdy do? *)
    BEGIN (* TimedWait *)
	
	@IF Assert THEN
	    Objects.Assert( objectMgr, semaphore );
	@END (* Assert *)
	
	WITH semaphore^ DO
	    Tasks.DisallowPreemption;

		(* Do the count first *)
		DEC( count );
		IF count < noSignalsPending THEN
		    (* Must wait on the semaphore *)
		    info := TaskInfo.GetCurrent( infoID );
		    WITH info^ DO
			(* 
			 * Insert at the end of the semaphore's queue.
			 * Note that "tail" is invalid if head is NIL, so
			 * we must use "head" for the check here.
			 *)
			nextWaiting := NIL;    (* always at the end *)
			IF head = NIL THEN
			    head := info;
			ELSE
			    tail^.nextWaiting := info;
			END;
			tail := info;

			(* Wait for the semaphore *)
			blockedOn := semaphore;
			REPEAT 
			    Tasks.Suspend;    (* Wait till we get it *)
			UNTIL blockedOn = NIL;

		    END; (* WITH *)
		END; 

	    Tasks.AllowPreemption;
	END; (* WITH *)

    END Wait;


PROCEDURE TimedWait( 
    semaphore : Object;
    timeout   : TaskTime.Units
    )	      : BOOLEAN;
    (*
     * Check to see if there are signals pending.  Decrement the count
     * and check to see if it is greater than or equal to noSignalsPending.
     * If it is, then just return with TRUE (we got a click).  Otherwise,
     * we must wait for the semaphore to become ready.  We add ourselves to
     * the queue and wait for a wakeup.  Upon wakeup, we must check to see
     * if we got the semaphore (via blockedOn field) or if we must return 
     * failure.  In failure, we must remove ourselves from the queue and
     * increment the count.
     *)
    VAR
	info     : Info;    (* My information *)
	previous : Info;    (* list games *)
	result   : BOOLEAN; (* Howdy do? *)
    BEGIN (* TimedWait *)
	
	@IF Assert THEN
	    Objects.Assert( objectMgr, semaphore );
	@END (* Assert *)
	
	WITH semaphore^ DO
	    Tasks.DisallowPreemption;

		(* Do the count first *)
		DEC( count );
		result := count >= noSignalsPending;	(* Did we get it? *)
		IF NOT result THEN
		    info := TaskInfo.GetCurrent( infoID );
		    WITH info^ DO
			(* 
			 * Insert at the end of the semaphore's queue.
			 * Note that "tail" is invalid if head is NIL, so
			 * we must use "head" for the check here.
			 *)
			nextWaiting := NIL;    (* always at the end *)
			IF head = NIL THEN
			    head := info;
			ELSE
			    tail^.nextWaiting := info;
			END;
			tail := info;

			(* Wait for the semaphore *)
			blockedOn := semaphore;
			inTimedWait := TRUE;

			TaskTime.Sleep( timeout );

			inTimedWait := FALSE;
			
			(* Did we get the semaphore? *)
			result := blockedOn = NIL;
			
			IF NOT result THEN
			    (*
			     * Failed to get the semaphore.  Delete
			     * from the queue and increment the count.
			     *)
			    INC( count );    (* Adjust list count *)
			    IF head = info THEN
				head := nextWaiting;
			    ELSE
				previous := head;
				WHILE previous^.nextWaiting # info DO
				    previous := previous^.nextWaiting;
				END;
				previous^.nextWaiting := nextWaiting; 
				IF tail = info THEN
				    tail := previous;  (* Update tail *)
				END;
			    END;
			END; (* IF failure *)
		    END; (* WITH *)
		END; 

	    Tasks.AllowPreemption;
	END; (* WITH *)

	RETURN result;

    END TimedWait;


PROCEDURE SetInvalid(
    VAR semaphore : Object
    );
    BEGIN (* SetInvalid *)
	semaphore := NIL;
    END SetInvalid;
    

PROCEDURE IsValid(
    semaphore : Object
    )         : BOOLEAN;
    BEGIN (* IsValid *)
	RETURN Objects.IsValid( objectMgr, semaphore );
    END IsValid;


PROCEDURE Birth( 
    newTask : Tasks.Object 
    )	    : SysTypes.ANYPTR;
    (*
     * Allocate a new information block for the specified task and
     * initialize.
     *)
    VAR
	info : Info;
    BEGIN (* Birth *)

	Objects.Allocate( infoMgr, info );
	WITH info^ DO
	    blockedOn    := NIL;
	    inTimedWait := FALSE;
	    nextWaiting  := NIL;
	    task         := newTask;
	END;

	RETURN info;	(* tell 'em about it *)

    END Birth;


PROCEDURE Death( 
    deadTask : Tasks.Object;
    infoAdr  : SysTypes.ANYPTR 
    );
    (*
     * Since a task can't exit while it is waiting on a semaphore, there
     * are no checks required.  Just deallocate the information.
     *)
    VAR
	info : Info;
    BEGIN (* Death *)
	
	Objects.Deallocate( infoMgr, infoAdr );

    END Death;


PROCEDURE Print(
    infoAdr : SysTypes.ANYPTR
    );
    (*
     * Called from a non-preemptable section.
     *
     * We need to print the semaphore information which consists of
     * the current blockedOn field.
     * 		Semaphore: <blockedOn>
     *
     * We don't print out "inTimedWait", because TaskTime prints
     * out clearer information about the time sleeping.
     *)
    VAR
	info : Info;
    BEGIN (* Print *)

	info := infoAdr;
	ProgErrOutput.WriteString( "Semaphore:" );
	    
	IF info^.blockedOn # NIL THEN
	    ProgErrOutput.WriteString( " <" );
	    ProgErrOutput.WriteString( info^.blockedOn^.name );
	    ProgErrOutput.WriteString( ">" );
	ELSE
	    ProgErrOutput.WriteString( " none." );
	END;

    END Print;
    

PROCEDURE Terminate(
    mode : SysTypes.ANYPTR
    );
    (*
     * Get rid of memory (if it is normal termination).
     *)
    BEGIN (* Terminate *)
	
	IF mode = Notices.normalTermination THEN
	    TaskInfo.Destroy( infoID );	(* Must be before destroy infoMgr *)
	    Objects.DestroyManager( infoMgr );
	    Objects.DestroyManager( objectMgr );
	END;

    END Terminate;


BEGIN (* TaskSemaphores *)

    Objects.CreateManager( infoMgr, SYSTEM.TSIZE( InfoRec ), 
			   "Semaphores.TaskInfo" );

    Objects.CreateManager( objectMgr, SYSTEM.TSIZE( ObjectRec ), moduleName );

    TaskInfo.Create( infoID, Birth, Death, Print );
    
    Notices.Register( Notices.GetTerminationNotice(), Terminate );

END TaskSemaphores.
