(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE TaskMonitors; 
(* 
 * There are two datastructures associated with monitors: Info and Object.  
 * Info is assigned to each task (via TaskInfo) and Object is the monitor.  
 * There are several pointers that are intertwined in these data structures.  
 * 
 * head/tail/owner/nextWaiting: 
 * The main list of the monitor is a list of waiting tasks.  The 
 * first task is the current "owner" of the monitor.   monitor^.owner points 
 * to the owner and monitor^.head points to the first waiting 
 * task.  Since monitors are on a first-come first-serve basis, a tail 
 * pointer is maintained.  Note that "owner" is the value that must be
 * checked to make sure the monitor is free.  "tail" is invalid if head is NIL.
 *
 * holdList/nextHeld:
 * This the list of monitors that are held by a particular task, that is,
 * all monitors which have their "head" field pointing to this task's info
 * block.  The list is head insert and usually will be head removal, because
 * monitors are usually strictly nested.  Because monitors can be nested
 * and the owner can Enter a monitor several times, there is a single
 * nestLevel associated with each monitor.  If the level is zero, then
 * the monitor is not owned.
 *
 * blockedOn:
 * This field is back pointer to the monitor from the task information.  This
 * is for debugging and probably could be removed, but is pretty useful.
 *
 * All of the monitor fields can only be accessed or modified in non-preemptable
 * sections.
 *)
IMPORT
    CardConvert,
    Notices,
    Objects,
    ProgErr,
    ProgErrOutput,
    Strings,
    SYSTEM,
    SysTypes,
    TaskConsts,
    TaskInfo,
    Tasks,
    TaskTime;

TYPE
    Object    = POINTER TO ObjectRec;
    Info      = POINTER TO InfoRec;

    ObjectRec = RECORD
	owner	    : Info;		(* Current owner of this monitor *)
	head        : Info;		(* List of tasks waiting *)
	tail        : Info;		(* Last task waiting (only
					   valid if head # NIL) *)
	nestLevel   : SysTypes.Card;	(* Num Enters without Exits *)
	nextHeld    : Object;		(* Other monitors owned by holder *)
	name        : TaskConsts.Name;	(* Name of the monitor *)
    END;

    InfoRec   = RECORD
	holdList      : Object;		(* Monitors owned by this task      *)
	blockedOn     : Object; 	(* Monitor which task is waiting on *)
	inTimedEnter  : BOOLEAN;	(* Only true if in TimedEnter *)
	nextWaiting   : Info;		(* Next task in line for monitor,
					   always maintained as NIL when not
					   in queue. *)
	task          : Tasks.Object;   (* Needed for Ready in Exit *)
    END;

CONST
    moduleName = "TaskMonitors";
VAR
    objectMgr : Objects.Manager;	(* Allocated monitors *)
    infoMgr   : Objects.Manager;	(* Allocated task information *)
    infoID    : TaskInfo.Object;	(* identification of TaskInfo *)

@IF Assert THEN
    CONST
	taskDeathWithMonitors 
	    = "TaskMonitors: task terminated while holding monitors.";
	monitorNotOwned       
	    = "TaskMonitors: Exit without matching Enter.";
	monitorIsActive	  
	    = "TaskMonitors: Destroy called on monitor in improper state.";
@END (* Assert *)

PROCEDURE Create(
    VAR monitor : Object;
	anyName : ARRAY OF CHAR
    );
    BEGIN (* Create *)
	
	Objects.Allocate( objectMgr, monitor );
	WITH monitor^ DO
	    owner     := NIL;
	    head      := NIL;
	    tail      := NIL;
	    nestLevel := 0;
	    nextHeld  := NIL;
	    Strings.Assign( anyName, name );
	END;

    END Create;


PROCEDURE Destroy(
    VAR monitor : Object
    );
    (*
     * Have to check for other tasks waiting and if there is an
     * owner.  Only the owner may destroy the monitor.
     *)
    BEGIN (* Destroy *)
	
	IF NOT Objects.IsValid( objectMgr, monitor ) THEN
	    RETURN;	(* The monitor was not initialized *)
	END;

	@IF NOT Assert THEN

	    (* Don't check anything, just destroy. *)
	    Objects.Deallocate( objectMgr, monitor );

	@ELSE (* NOT Assert *)
	    (*
	     * Must destroy in a non-preemptable section if checking
	     * the holder and owner fields.  Otherwise, the object
	     * will not be invalidated and there is a race condition on
	     * usage.
	     *)
	    Tasks.DisallowPreemption;

		WITH monitor^ DO
		    IF owner # NIL THEN
			(*
			 * if we aren't the owner or there is someone waiting,
			 * the we blow up.
			 *)
		        IF ( ( owner # TaskInfo.GetCurrent( infoID ) )
		             OR ( head # NIL ) ) THEN 
			    ProgErr.Terminate( monitorIsActive );
			END;
			
			(* 
			 * We are the owner must release the monitor, but
			 * we may be nested several times.  We set the
			 * nestLevel to zero and then Exit.  This will
			 * delete the monitor from the task's hold list.
			 * This is a fully atomic operation since we are
			 * in a disallowed section.
			 *)
			nestLevel := 1; 
			Exit( monitor );

		    END; (* IF head *)
		END; (* WITH *)

		Objects.Deallocate( objectMgr, monitor );

	    Tasks.AllowPreemption;

	@END (* Assert *)

    END Destroy;


PROCEDURE Enter(
    monitor : Object
    );
    (*
     * Check to see if the monitor is owned by the current task. 
     * If it is, then just increment the count and return.
     * If the monitor is held by another task, then must insert
     * the info record at the tail of the queue.  Upon wakeup, check
     * to see if the monitor is not owned.  If it isn't, then suspend
     * again.  If it is, then add it to the list of the owned monitors
     * and return.
     *)
    VAR
	info : Info;
    BEGIN (* Enter *)
	
	@IF Assert THEN
	    Objects.Assert( objectMgr, monitor );
	@END (* Assert *)
	
	info := TaskInfo.GetCurrent( infoID );
	WITH monitor^ DO
	    Tasks.DisallowPreemption;

		(* If we don't own the monitor, then... *)
		IF owner # info THEN
		    WITH info^ DO
			(* 
			 * Insert at the end of the monitor's queue.
			 * Note that "tail" is invalid if head is NIL, so
			 * we must use "head" for the check here.
			 *)
			IF owner = NIL THEN
			    (* Not owned, we just can take it. *)
			    owner := info;
			ELSE
			    (* Owned, so must wait for the guy to wake us up *)
			    nextWaiting := NIL;
			    IF head = NIL THEN
				head := info;
				tail := info;
			    ELSE
				tail^.nextWaiting := info;
				tail := info;
			    END;

			    (* Wait for the monitor *)
			    blockedOn := monitor;
			    REPEAT 
				Tasks.Suspend;
			    UNTIL owner = info;
			    blockedOn := NIL;
			END;
			(* Insert the monitor in the hold list *)
			nextHeld := holdList;
			holdList := monitor;
		    END; (* WITH *)
		END; 
		INC( nestLevel );
	    Tasks.AllowPreemption;
	END; (* WITH *)

    END Enter;


PROCEDURE TimedEnter(
    monitor : Object;
    timeout : TaskTime.Units
    )       : BOOLEAN;
    (*
     * Check to see if the monitor is owned by the current task. 
     * If it is, then just increment the count and return.
     * If the monitor is held by another task, then must insert
     * the info record at the tail of the queue.  Upon wakeup, check
     * to see if the monitor is not owned.  If it isn't, then just
     * exit with failure. If it is, then add it to the list of the 
     * owned monitors and return.  
     *)
    VAR
	info     : Info;
	previous : Info;
	result   : BOOLEAN;
    BEGIN (* TimedEnter *)
	
	@IF Assert THEN
	    Objects.Assert( objectMgr, monitor );
	@END (* Assert *)
	
	info := TaskInfo.GetCurrent( infoID );
	WITH monitor^ DO
	    Tasks.DisallowPreemption;

		(* If we don't own the monitor, then... *)
		result := owner = info;
		IF result THEN
		    (* Already own the monitor, just increment are return *)
		    INC( nestLevel );

		ELSE
		    (*
		     * Must try to get the monitor.
		     *)
		    WITH info^ DO
			(* 
			 * Insert at the end of the monitor's queue.
			 * Note that "tail" is invalid if head is NIL, so
			 * we must use "head" for the check here.
			 *)
			result := owner = NIL;
			IF result THEN
			    (* Not owned, we just can take it. *)
			    owner := info;
			ELSE
			    (* 
			     * Owned, so must wait for the guy to wake us up.
			     * If this fails, then we just delete ourselves
			     * from the queue and exit with failure.
			     *)
			    nextWaiting := NIL;
			    IF head = NIL THEN
				head := info;
				tail := info;
			    ELSE
				tail^.nextWaiting := info;
				tail := info;
			    END;

			    (* Wait for the monitor *)
			    blockedOn := monitor;
			    inTimedEnter := TRUE;

			    TaskTime.Sleep( timeout );

			    inTimedEnter := FALSE;
			    blockedOn := NIL;

			    (* Did we get the monitor? *)
			    result := owner = info;
			    IF NOT result THEN
				(*
				 * failed to get the monitor.  Delete
				 * from the queue.  
				 *)
				IF head = info THEN
				    head := nextWaiting;
				ELSE
				    previous := head;
				    WHILE previous^.nextWaiting # info DO
					previous := previous^.nextWaiting;
				    END;
				    previous^.nextWaiting := nextWaiting; 
				    IF tail = info THEN
					tail := previous;  (* Update tail *)
				    END;
				END;
			    END; (* IF failure *)
			END;

			(* If we got the monitor, then must fix it up. *)
			IF result THEN
			    (* Insert the monitor in the hold list *)
			    nextHeld := holdList;
			    holdList := monitor;
			    INC( nestLevel );
			END;
		    END; (* WITH *)
		END; 

	    Tasks.AllowPreemption;
	END; (* WITH *)

	RETURN result;
    END TimedEnter;


PROCEDURE Exit(
    monitor : Object
    );
    (* 
     * Get the current task's info.  Do an assertion check on ownership.
     * Decrement the nesting level and if it hits zero, then we exited this
     * monitor completely.  Delete from the held monitors list.  Delete
     * the from the head of the monitor (no longer the owner).  If the
     * head is not NIL, then Ready the head task.
     *)
    VAR
	mp   : Object;
	info : Info;
    BEGIN (* Exit *)

	@IF Assert THEN
	    Objects.Assert( objectMgr, monitor );
	@END (* Assert *)
	
	info := TaskInfo.GetCurrent( infoID );
	WITH monitor^ DO
	    Tasks.DisallowPreemption;
		@IF Assert THEN
		    (* If we don't own the monitor *)
		    IF owner # info THEN
			ProgErr.Terminate( monitorNotOwned );
		    END;
		@END (* Assert *)

		DEC( nestLevel );
		(* Are we through with the monitor? *)
		IF nestLevel = 0 THEN

		    (* Remove the monitor from held list *)
		    WITH info^ DO
			IF holdList = monitor THEN
			    (* Delete from the head of the list *)
			    holdList := holdList^.nextHeld;
			ELSE
			    (* 
			     * Search the list of monitors of the monitor
			     * in question.  If the monitor isn't there
			     * we will get a NIL pointer reference.
			     *)
			    mp := holdList;
			    WHILE mp^.nextHeld # monitor DO
				mp := mp^.nextHeld;
			    END;
			    mp^.nextHeld := nextHeld; (* Delete from list *)
			END;
		    END; (* WITH *)

		    (* Now we have to delete ourself from the monitor's head *)
		    owner := head;
		    IF owner # NIL THEN
			(* Delete this guy from the queue *)
			head := head^.nextWaiting;
			IF owner^.inTimedEnter THEN
			    TaskTime.WakeUp( owner^.task );
			ELSE
			    Tasks.Ready( owner^.task );
			END;
		    END;
		END; (* IF *)

	    Tasks.AllowPreemption;
	END; (* WITH *)

    END Exit;
	

PROCEDURE Birth(
    newTask : Tasks.Object
    )       : SysTypes.ANYPTR;
    (*
     * Allocate a new information block for the specified task and
     * initialize.
     *)
    VAR
	info : Info;
    BEGIN (* Birth *)

	Objects.Allocate( infoMgr, info );
	WITH info^ DO
	    holdList     := NIL;
	    blockedOn    := NIL;
	    inTimedEnter := FALSE;
	    nextWaiting  := NIL;
	    task         := newTask;
	END;

	RETURN info;	(* tell 'em about it *)

    END Birth;


PROCEDURE Death(
    deadTask : Tasks.Object;
    infoAdr  : SysTypes.ANYPTR
    );
    (*
     * The task cannot exit if it is waiting on a monitor, but it
     * can exit with monitors that it owns.  We have to make sure that
     * the task doesn't exit with monitors held.
     *)
    VAR
	info : Info;
    BEGIN (* Death *)
	
	@IF Assert THEN
	    info := infoAdr;
	    IF info^.holdList # NIL THEN
		ProgErr.Terminate( taskDeathWithMonitors );
	    END;
	@END (* Assert *)

	Objects.Deallocate( infoMgr, infoAdr );

    END Death;


PROCEDURE Print(
    infoAdr : SysTypes.ANYPTR
    );
    (*
     * Called from a non-preemptable section.
     *
     * We need to print the monitor information which consists of
     * the current blockedOn field and all other "owned" monitors.
     * The output line looks like:
     * 		Monitors: <blockedOn> holdList[nestLevel] ...
     *
     * We don't print out "inTimedEnter", because TaskTime prints
     * out clearer information about the time sleeping.
     *)
    VAR
	info        : Info;
	cardString  : ARRAY [ 0 .. SysTypes.bitsPerCard ] OF CHAR;
	monitor     : Object;
	DONTCARE    : BOOLEAN;
	hasMonitors : BOOLEAN;
	isWaiting   : BOOLEAN;
    BEGIN (* Print *)

	info         := infoAdr;
	ProgErrOutput.WriteString( "Monitors:" );
	    
	isWaiting := info^.blockedOn # NIL;
	IF isWaiting THEN
	    ProgErrOutput.WriteString( " <" );
	    ProgErrOutput.WriteString( info^.blockedOn^.name );
	    ProgErrOutput.WriteString( ">" );
	END;

	monitor := info^.holdList;
	hasMonitors := FALSE;
	WHILE monitor # NIL DO
	    hasMonitors := TRUE;
	    WITH monitor^ DO
		ProgErrOutput.WriteString( " " );
		ProgErrOutput.WriteString( name );
		DONTCARE := CardConvert.ToString( nestLevel, 10, 0, 
						  cardString );
		ProgErrOutput.WriteString( "[" );
		ProgErrOutput.WriteString( cardString );
		ProgErrOutput.WriteString( "]" );

		monitor := nextHeld;
		    (* with is invalid *)

	    END; (* WITH *)
	END; (* WHILE *)

	IF NOT ( isWaiting OR hasMonitors ) THEN
	    ProgErrOutput.WriteString( " none." );
	END;

    END Print;

PROCEDURE Terminate( 
    mode : SysTypes.ANYPTR
    );
    BEGIN (* Terminate *)
	
	IF mode = Notices.normalTermination THEN
	    TaskInfo.Destroy( infoID );
	    Objects.DestroyManager( infoMgr );
	    Objects.DestroyManager( objectMgr );
	END;

    END Terminate;

BEGIN (* TaskMonitors *)

    Objects.CreateManager( infoMgr, SYSTEM.TSIZE( InfoRec ), 
			   "Monitors.TaskInfo" );

    Objects.CreateManager( objectMgr, SYSTEM.TSIZE( ObjectRec ), moduleName );

    TaskInfo.Create( infoID, Birth, Death, Print );

    Notices.Register( Notices.GetTerminationNotice(), Terminate );

END TaskMonitors.
