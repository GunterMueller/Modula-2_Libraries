(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE Intrinsics;
(*
 * Provides "missing" parts of Modula.
 *
 * These are things that are commonly used, but are not portably
 * defined by many implementations and probably will not be in the
 * official standard.
 *)
IMPORT
    SysTypes;
EXPORT QUALIFIED
    CompareResults,    MinCard,       MaxCard,        MinInt,
    MaxInt,            MinReal,       MaxReal;

TYPE
    CompareResults = (
        less,    (* < *)
        equal,   (* = *)
        greater  (* > *)
    );

    (*
     * The following functions provide the minimum or maximum of two
     * values for a selected set of types. Both functions compare two 
     * values (left and right) and return a single value as follows:
     *
     *     Min OUTPUT:
     *          left,  if left <= right.
     *          right, if left >= right.
     *
     *     Max OUTPUT:
     *          left,  if left >= right.
     *          right, if left <= right.
     *)
PROCEDURE MinCard(
    left  : SysTypes.Card;
    right : SysTypes.Card
    )     : SysTypes.Card;

PROCEDURE MaxCard(
    left  : SysTypes.Card;
    right : SysTypes.Card
    )     : SysTypes.Card;

PROCEDURE MinInt(
    left  : SysTypes.Int;
    right : SysTypes.Int
    )     : SysTypes.Int;
 
PROCEDURE MaxInt(
    left  : SysTypes.Int;
    right : SysTypes.Int
    )     : SysTypes.Int;

    (* 
     * The following is a major problem in the definition
     * of the language, because no relationship about type
     * compatibility has been established between normal
     * and LONG types. This is a hack solution to allow
     * the flexibility.
     *)
PROCEDURE MinReal(
    left  : SysTypes.Real;
    right : SysTypes.Real
    )     : SysTypes.Real;

PROCEDURE MaxReal(
    left  : SysTypes.Real;
    right : SysTypes.Real
    )     : SysTypes.Real;

END Intrinsics.
