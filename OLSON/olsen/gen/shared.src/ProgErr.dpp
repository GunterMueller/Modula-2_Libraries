(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE ProgErr;
(*
 * Provides a centralized facility for managing fatal errors.
 *
 * It attempts to trap run-time errors and user aborts so that modules
 * can clean up system resources before exiting. The termination handler
 * is called in the event that Terminate is called or if the implementation
 * supports catchable run-time errors. This module works in conjunction
 * with the Notices module for simple notification of termination.
 *
 * All messages printed by this module are written via ProgErrOutput.
 *)
EXPORT QUALIFIED 
    Terminate,          MemorySaveModes,       SetMemorySaveMode,
    TerminationModes,   TerminationHandler,    InstallTerminationHandler;      

PROCEDURE Terminate(
    message : ARRAY OF CHAR  (* Describes reason for abnormal termination *)
    );
    (*
     * If the message is non-null, write it to ProgErrOutput with
     * a trailing WriteLn. If there is no message, nothing will
     * be output.
     *
     * WARNING:
     *     This procedure DOES NOT RETURN.
     *)

    (*
     * The following is a somewhat implementation specific feature
     * which is designed to facilitate debugging. The declaration
     * should go away if the facilities cannot be provided.
     *)
TYPE
    MemorySaveModes = (
        saveMemoryOnAbnormalTermination,
        doNotSaveMemoryOnTermination
    );

PROCEDURE SetMemorySaveMode(
    newMemorySaveMode : MemorySaveModes  (* What should happen at term. *)
    );
    (*
     * If the machine has memory dump facility control, the caller
     * can control the effects of Terminate. The default mode is
     * defined by the particular implementation of this module.
     *
     * The only time memory will be saved is during abnormal termination.
     *)

    (*
     * The following section is provided as a hook to Notices and some
     * low-level parts of the library. For a general form of termination
     * notification, please see the module Notices.
     *)
TYPE
    TerminationModes = (
        normalTermination,   (* Program module returned *)
        abnormalTermination  (* Run-time error, HALT, or Terminate *)
    );

    TerminationHandler = PROCEDURE(
        TerminationModes  (* The reason for termination *)
    );
    (* 
     * Handles termination or cleanup. The clean-up procedure should
     * be simple in the event that the system is terminating abnormally
     * and more thorough during normal termination.
     *)

PROCEDURE InstallTerminationHandler(
        newHandler : TerminationHandler;  (* Procedure called when term *)
    VAR oldHandler : TerminationHandler   (* Previous procedure *)
    );
    (* 
     * Allows an external module to register a procedure to be called
     * when termination occurs.
     *
     * There can be only one handler installed via this module.
     * The previous handler is returned for call chaining.
     * It is the responsibility of "newHandler" to call the
     * "oldHandler" upon completion of its termination code.   
     *
     * NOTE:
     *     This is NOT a general termination mechanism. See the module
     *     Notices for a generalized termination notification scheme.
     *)

END ProgErr.

