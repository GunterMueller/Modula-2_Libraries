(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE QStrings;
(*
 * Supports an object-oriented (space conserving) version of strings.  
 *
 * Someday this module will be bigger, but right now, it serves the
 * purpose of saving space when storing lots of strings which have
 * a large HIGH( ).
 *)
IMPORT
    SysTypes;
EXPORT QUALIFIED
    Object,        Create,     Destroy,
    SetInvalid,    FromM2,     ToM2,
    Length;

TYPE
    Object;

PROCEDURE Create(
    VAR qstring      : Object;        (* In any state, will be valid *)
        initialValue : ARRAY OF CHAR  (* Any modula-2 string *)
    );
    (*
     * Creates a qstring and fills it with (sets it to) initialValue.
     *)

PROCEDURE Destroy(
    VAR qstring : Object  (* In any state, will be invalid *)
    );
    (*
     * Disposes of the qstring.
     *)
    
PROCEDURE SetInvalid(
    VAR qstring : Object  (* In any state, will be invalid *)
    );
    (* 
     * Used to initialize strings without calling Create.
     *)
    
PROCEDURE FromM2(
    newValue : ARRAY OF CHAR;  (* To be assigned to "qstring" *)
    qstring  : Object          (* Must be valid *)
    );
    (*
     * Changes the value of qstring to newValue.
     *)

PROCEDURE ToM2(
        qstring  : Object;        (* Must be valid *)
    VAR value    : ARRAY OF CHAR  (* Copied value of qstring (truncated) *)
    );

PROCEDURE Length(
    qstring : Object     	(* Must be valid *)
    )       : SysTypes.Card;    (* Current length of string *)

END QStrings.

