(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE ProgArgs;
(*
 * Implementation is for SunOS and MsDosOS.
 *
 * There are several parts of this module.  The portable part is the 
 * registration of the various flag types and handles.  This uses NameLists
 * and all of the "Register" routines are portable as they can get.
 * The first part of this module is dedicated to parsing arguments.  The
 * model assumed is that arguments are a list.  In DOS, this list is a
 * NameLists initialized by the module body.   For Sun, the arguments
 * are in the argc/argv convention.  The other assumption is that all
 * flags are indicated by a single character (flagCharacter).  If this
 * isn't true, then a more complicated scheme may result.
 *
 * ParseFlag is completely different for Logitech and Sun.  Sun takes
 * the standard Unix conventions and Dos takes another world.  The difference
 * has been reduced to the one parsing routine.  
 *
 *
 * The setting of the program name is simple for Sun (argv[0]).  For
 * Dos it gets rather complicated, because of the funky run-time system
 * alternatives (.exe format or dynamically linked to m2.exe).   This
 * module requires a run-time system change to be most effective for
 * both formats.   The simple change is specifying '*' as the dummy
 * program name in the LOD2EXE case as opposed to an 'a' which is not
 * discernable from a real program name.  If you have RTS sources, then
 * search for a line in "RTS.ASM" that looks like "mov al,'a'".  It should
 * have a words "phoney program name" near it.  Sorry, but people without
 * rts sources are out of luck and the program name will be set to "a". 
 * There is no alternative.
 *)
IMPORT
    CardConvert,
    NameLists,
    Objects,
    ProgErr,
    ProgErrOutput,
    Strings,
    SYSTEM,
    SysTypes;

@IF NOT NoNotices THEN
    IMPORT
	Notices;
@END (* NOT NoNotices *)

@IF SunOS THEN
    IMPORT
	Bytes,
        System,
        UnixCtypes;
@END (* SunOS *)

@IF MsDosOS THEN
    IMPORT
	DOS,
        Intrinsics;
    @IF NOT LogitechM2V2 THEN
	IMPORT
	    RTSMain;
    @END
@END (* MsDosOS *)


TYPE
    FlagTypes = ( boolFlag, cardFlag, stringFlag );

    FlagInfoRec = RECORD	(* user specified flag information *)
	CASE type : FlagTypes OF
	    boolFlag:
		boolHandler   : BoolHandler;
	    |
	    cardFlag:
		cardHandler   : CardHandler;
	    |
	    stringFlag:
		stringHandler : StringHandler;
	END; (* CASE type *)
	object : SysTypes.ANYPTR;	(* importerObject *)
    END; (* FlagInfoRec *)
    FlagInfo    = POINTER TO FlagInfoRec;

VAR
    flags       : NameLists.Object;	(* FlagInfo is the object *)
    flagInfoMgr : Objects.Manager;	(* For safety *)

    badFlagHandler   : StringHandler;	(* Called when bad flags encountered *)
    unflaggedHandler : StringHandler;	(* Called for unflagged arguments *)

    badFlagHandlerObject   : SysTypes.ANYPTR;	(* Passed to badFlagHandler *)
    unflaggedHandlerObject : SysTypes.ANYPTR;	(* Passed to unflaggedHandler *)

    @IF Assert THEN
	badFlagHandlerRegistered   : BOOLEAN;
	unflaggedHandlerRegistered : BOOLEAN;
    @END (* Assert *)



PROCEDURE CallFlagHandler(
              info      : FlagInfo;
    (*IN*)VAR flag      : String;  (* VAR is a HACK *)
    (*IN*)VAR flagValue : String
    )                   : BOOLEAN;
    (*
     * Figure out from the info the type of the argument.  Convert
     * second argument if it is needed.  Convert the argument to a
     * cardinal if it is needed.  All the while do error checking.
     *)
    VAR
	card : SysTypes.Card;
    BEGIN (* CallFlagHandler *)

	WITH info^ DO
	    CASE type OF
		boolFlag:
		    (* Boolean flags can't have values *)
		    IF flagValue[ 0 ] = 0C THEN
			RETURN boolHandler( flag, object );
		    END;
		|
		stringFlag:
		    RETURN stringHandler( flag, object, flagValue );
		|
		cardFlag:
		    (* Have to convert first *)
		    IF CardConvert.FromString( flagValue, 10, card ) THEN
			RETURN cardHandler( flag, object, card );
		    END;
		
	    END; (* CASE *)
	END; (* WITH *)

	RETURN badFlagHandler( flag, badFlagHandlerObject, 
			       flagValue );

    END CallFlagHandler;


@IF MsDosOS THEN
    CONST
	flagCharacter = '/';	(* The good ol' dos way *)
    VAR
	argsList : NameLists.Object;	(* List created at initialization *)

    PROCEDURE ParseFlag(
        (*IN*)VAR flag : String
        )              : BOOLEAN;
	(* 
	 * We allow the following forms of flags:
	 *      /flag		flags: flag
	 *      /flag=val	flags: flag		value: val
	 *)
	CONST
	    valueIndicator = '=';
	VAR
	    info      : FlagInfo;
	    charFlag  : String;
	    i         : SysTypes.Card;
	    flagValue : String;
	BEGIN (* ParseFlag *)
	    
	    (* Delete the flagCharacter *)
	    Strings.Delete( flag, Strings.BOS, Strings.BOS );

	    (* 
	     * If there is nothing left, then return failure. 
	     * Note that this procedure assumes this check has been made.
	     *)
	    IF flag[ 0 ] = 0C THEN
		RETURN badFlagHandler( flagCharacter, badFlagHandlerObject, 
					 '' );
	    END;

	    (* Is there a value associated with the flag? *)
	    IF NOT Strings.Position( flag, Strings.BOS, Strings.EOS, 
				     valueIndicator, i ) THEN
		flagValue[ 0 ] := 0C;	(* No value *)
	    ELSE
		(* 
		 * Have a flagValue, but it is a syntax error 
	 	 * if it is the first position.
		 *)
		IF i = Strings.BOS THEN
		    RETURN badFlagHandler( flagCharacter, 
					   badFlagHandlerObject, '' );
		END;

		(* 
		 * Get the "value" part out of the flag and delete value
		 * (and indicator) from the flag.
		 *)
		Strings.Substring( flag, i + 1, Strings.EOS, flagValue );
		Strings.Delete( flag, i, Strings.EOS );
	    END;

	    (* Try to find the flag *)
	    IF NOT NameLists.Find( flags, flag, info ) THEN
		RETURN badFlagHandler( flag, badFlagHandlerObject, '' );
	    END;

	    (* Process the request *)
	    RETURN CallFlagHandler( info, flag, flagValue );

	END ParseFlag;

@END (* MsDosOS *)


@IF SunOS THEN
    CONST
	flagCharacter = '-';	(* The good ol' unix way *)

    PROCEDURE ParseFlag(
        (*IN*)VAR flag   : String;
              VAR argNum : SysTypes.Card
        )                : BOOLEAN;
	(* 
	 * We allow the following forms of flags:
	 *      -flag		flags: flag
	 *      -flag val	flags: flag		value: val
	 * 	-D val		flags: D		value: val
	 *	-Dval		flags: D		value: val
	 *      -abcd		flags: a,b,c,d
	 *      -abcdDval	flags: a,b,c,d,D	value: val
	 *
	 * The following flag formations are not allowed:
	 *      -ABC valA valB valC
	 *      -flagvalue
	 *      -Abc valA
	 *      -abcflag
	 *)
	VAR
	    info      : FlagInfo;
	    charFlag  : String;
	    i         : SysTypes.Card;
	    flagValue : String;
	    DONTCARE  : SysTypes.Card;
	BEGIN (* ParseFlag *)
	    
	    (* Delete the flagCharacter *)
	    Strings.Delete( flag, Strings.BOS, Strings.BOS );

	    (* 
	     * If there is nothing left, then return failure. 
	     * Note that this procedure assumes this check has been made.
	     *)
	    IF flag[ 0 ] = 0C THEN
		RETURN badFlagHandler( flagCharacter, 
				       badFlagHandlerObject, '' );
	    END;

	    (*
	     * First lookup the "whole" flag in flags.
	     * Handles: 
	     *      -flag	flags: flag
	     *      -flag val	flags: flag		value: val
	     *)
	    IF NameLists.Find( flags, flag, info ) THEN

		(* Is this a "valued" flag? *)
		IF info^.type = boolFlag THEN
		    flagValue := ''; 	(* no value for boolean flags *)
		ELSE
		    (* Get the value associated with the flag *)
		    IF argNum >= argcount THEN
			RETURN badFlagHandler( flag, badFlagHandlerObject, '' );
		    END;
		    (* Get the next flag value from the args list.*)
		    DONTCARE := Bytes.CopyAsString( 
			argptr^[ argNum ], HIGH( flagValue ) + 1,
			SYSTEM.ADR( flagValue ), HIGH( flagValue ) + 1 );
		    INC( argNum );

		    (* 
		     * Figure out if the next argument is a flag or not.
		     * If it is, then don't pass the next flag as its arg.
		     *)
		    IF flagValue[ 0 ] = flagCharacter THEN
			DEC( argNum );	(* We didn't want this flag *)
			RETURN badFlagHandler( flag, badFlagHandlerObject,
						'' );
		    END;
		END;

		(* Process the request *)
		RETURN CallFlagHandler( info, flag, flagValue );
	    END;

	    (* 
	     * "whole" flag lookup failed, search through the flag
	     * a character at a time.  Upon the first lookup failure, 
	     * call the badFlagHandler with the flag if it is the very
	     * first character or if it is not the first character,
	     * return just the character looked up.  Always returns
	     * on the first failure (this prevents cascading errors).
	     *
	     * Handles:
	     * 	-D val		flags: D		value: val
	     *	-Dval		flags: D		value: val
	     *  -abcd		flags: a,b,c,d
	     *  -abcdDval	flags: a,b,c,d,D	value: val
	     * 
	     *)
	    charFlag[ 1 ] := 0C; (* always a single character *)
	    FOR i := 0 TO Strings.Length( flag ) - 1 DO
		charFlag[ 0 ] := flag[ i ];
		IF NOT NameLists.Find( flags, charFlag, info ) THEN
		    IF i = 0 THEN
			RETURN badFlagHandler( flag, badFlagHandlerObject, '' );
		    END;
		    RETURN badFlagHandler( charFlag, badFlagHandlerObject, '' );
		END;

		(* Is this a "valued" flag? *)
		IF info^.type # boolFlag THEN
		    (* 
		     * The rest of the string is the value, so this is
		     * always the end of the line.
		     * isn't much to do except return.
		     *)
		    Strings.Substring( flag, i + 1, Strings.EOS, flagValue );
		    RETURN CallFlagHandler( info, charFlag, flagValue );
		END;

		(* Call the boolean handler (flagValue = '') *)
		flagValue := '';
		IF NOT CallFlagHandler( info, charFlag, flagValue ) THEN
		    RETURN FALSE;
		END;
	    END;

	    RETURN TRUE;

	END ParseFlag;

@END (* SunOS *)


VAR
    printErrors : BOOLEAN;	
	(* 
	 * If ParseMode is ignoreErrors, then this is false.  Note that
	 * this assumes that Parse is not called concurrently.
	 *)

PROCEDURE Parse(
    mode : ParseModes
    )    : BOOLEAN;
    (*
     * The main loop.  Copies the string and then determines if the
     * argument is flagged or not.
     *)
    VAR
	@IF SunOS THEN
	    argNum   : SysTypes.Card;
	    DONTCARE : SysTypes.Card;
	@END (* SunOS *)
	arg    : String;
	result : BOOLEAN;
    BEGIN (* Parse *)

	result := TRUE; 
	printErrors := mode # ignoreErrors;	(* Change global state *)

	@IF SunOS THEN
	    argNum := 1;
	    WHILE argNum < argcount DO
		DONTCARE := Bytes.CopyAsString( 
		    argptr^[ argNum ], HIGH( arg ) + 1,
		    SYSTEM.ADR( arg ), HIGH( arg ) + 1 );
		INC( argNum );
	@END (* SunOS *)

	@IF MsDosOS THEN
	    NameLists.MakeFirstNext( argsList );
	    WHILE NameLists.Next( argsList, arg, NameLists.DONTCARE ) DO
	@END (* MsDosOS *)

	    IF arg[ 0 ] = flagCharacter THEN

		(* Try to parse flagged argument *)
		@IF SunOS THEN
		    IF NOT ParseFlag( arg, argNum ) THEN
		@END (* SunOS *)
		@IF MsDosOS THEN
		    IF NOT ParseFlag( arg ) THEN
		@END (* MsDosOS *)
		    IF mode = stopOnFirstError THEN
			RETURN FALSE;
		    END;
		    result := FALSE;
		END;

	    ELSE (* unflagged argument *)

		IF NOT unflaggedHandler( '', unflaggedHandlerObject, arg ) THEN
		    IF mode = stopOnFirstError THEN
			RETURN FALSE;
		    END;
		    result := FALSE;
		END;

	    END; (* IF string *)
	END; (* WHILE *)

	(* Always return true in ignoreErrors case *)
	RETURN ( mode = ignoreErrors ) OR result;

    END Parse;

PROCEDURE OkToPrintErrors(
    ) : BOOLEAN;
    BEGIN (* OkToPrintErrors *)

	RETURN printErrors;

    END OkToPrintErrors;

@IF Assert THEN
    PROCEDURE DuplicateRegistrationError(
        name : ARRAY OF CHAR
        );
	BEGIN (* DuplicateRegistrationError *)

	    ProgErrOutput.WriteString( "ProgArgs: " );
	    ProgErrOutput.WriteString( name );
	    ProgErr.Terminate( " already registered." );

	END DuplicateRegistrationError;
@END (* Assert *)


PROCEDURE RegisterFlagHandler(
    name : ARRAY OF CHAR;
    info : FlagInfo
    );
    VAR
	string : String;
    BEGIN (* RegisterFlagHandler *)
	
	@IF Assert THEN
	    IF name[ 0 ] = 0C THEN
		ProgErr.Terminate( 
		    "ProgArgs: null string registered as a flag name." );
	    END;
	@END (* Assert *)

	(* Have to truncate first *)
	Strings.Assign( name, string );

	@IF Assert THEN
	    IF NameLists.Find( flags, string, NameLists.DONTCARE ) THEN
		DuplicateRegistrationError( string );
	    END;
	@END (* Assert *)

	NameLists.Insert( flags, string, info );

    END RegisterFlagHandler;


PROCEDURE RegisterBoolHandler(
    flagName       : ARRAY OF CHAR;
    handler        : BoolHandler;
    importerObject : SysTypes.ANYPTR
    );
    VAR
	info : FlagInfo;
    BEGIN (* RegisterBoolHandler *)
	
	Objects.Allocate( flagInfoMgr, info );
	WITH info^ DO
	    type        := boolFlag;
	    boolHandler := handler;
	    object      := importerObject;
	END;

	RegisterFlagHandler( flagName, info );

    END RegisterBoolHandler;


PROCEDURE RegisterCardHandler(
    flagName       : ARRAY OF CHAR;
    handler        : CardHandler;
    importerObject : SysTypes.ANYPTR
    );
    VAR
	info : FlagInfo;
    BEGIN (* RegisterCardHandler *)
	
	Objects.Allocate( flagInfoMgr, info );
	WITH info^ DO
	    type        := cardFlag;
	    cardHandler := handler;
	    object      := importerObject;
	END;

	RegisterFlagHandler( flagName, info );

    END RegisterCardHandler;


PROCEDURE RegisterStringHandler(
    flagName       : ARRAY OF CHAR;
    handler        : StringHandler;
    importerObject : SysTypes.ANYPTR
    );
    VAR
	info : FlagInfo;
    BEGIN (* RegisterStringHandler *)
	
	Objects.Allocate( flagInfoMgr, info );
	WITH info^ DO
	    type          := stringFlag;
	    stringHandler := handler;
	    object        := importerObject;
	END;

	RegisterFlagHandler( flagName, info );

    END RegisterStringHandler;


PROCEDURE RegisterUnflaggedHandler(
    handler        : StringHandler;
    importerObject : SysTypes.ANYPTR
    );
    BEGIN (* RegisterUnflaggedHandler *)

	@IF Assert THEN
	    IF unflaggedHandlerRegistered THEN
		DuplicateRegistrationError( "UnflaggedHandler" );
	    END;
	    unflaggedHandlerRegistered := TRUE;
	@END (* Assert *)

	unflaggedHandler       := handler; 
	unflaggedHandlerObject := importerObject;

    END RegisterUnflaggedHandler;


PROCEDURE RegisterBadFlagHandler(
    handler        : StringHandler;
    importerObject : SysTypes.ANYPTR
    );
    BEGIN (* RegisterBadFlagHandler *)

	@IF Assert THEN
	    IF badFlagHandlerRegistered THEN
		DuplicateRegistrationError( "BadFlagHandler" );
	    END;
	    badFlagHandlerRegistered := TRUE;
	@END (* Assert *)

	badFlagHandler       := handler; 
	badFlagHandlerObject := importerObject;

    END RegisterBadFlagHandler;



(* 
 * Default handlers 
 *)
PROCEDURE DefaultBoolHandler(
    flagName : String;
    boolPtr  : SysTypes.ANYPTR
    )        : BOOLEAN;
    VAR
	realBoolPtr : POINTER TO BOOLEAN;
    BEGIN (* DefaultBoolHandler *)

	realBoolPtr := boolPtr;
	realBoolPtr^ := TRUE;
	RETURN TRUE;

    END DefaultBoolHandler;


PROCEDURE DefaultCardHandler(
    flagName  : String;
    cardPtr   : SysTypes.ANYPTR;
    flagValue : SysTypes.Card
    )         : BOOLEAN;
    VAR
	realCardPtr : POINTER TO SysTypes.Card;
    BEGIN (* DefaultCardHandler *)

	realCardPtr := cardPtr;
	realCardPtr^ := flagValue;
	RETURN TRUE;

    END DefaultCardHandler;


PROCEDURE DefaultStringHandler(
    flagName  : String;
    stringPtr : SysTypes.ANYPTR;
    flagValue : String
    )         : BOOLEAN;
    VAR
	realStringPtr : POINTER TO String;
    BEGIN (* DefaultStringHandler *)

	realStringPtr := stringPtr;
	realStringPtr^ := flagValue;
	RETURN TRUE;

    END DefaultStringHandler;


PROCEDURE DefaultStringListHandler(
    flagName  : String;
    nameList  : SysTypes.ANYPTR;
    flagValue : String
    )         : BOOLEAN;
    (*
     * This routine doesn't support null argument values.  If the
     * value is empty, then tell the user.  If the flagName is empty,
     * then this is the unflaggedHandler.
     *)
    BEGIN (* DefaultStringListHandler *)

	IF flagValue[ 0 ] = 0C THEN
	    IF NOT printErrors THEN
		RETURN FALSE;
	    END;
	    ProgErrOutput.WriteString( programName );
	    ProgErrOutput.WriteString( ": " );
	    IF flagName[ 0 ] = 0C THEN
		ProgErrOutput.WriteString( 
		    "arguments may not be empty strings." );
	    ELSE
		ProgErrOutput.WriteString( flagName );
		ProgErrOutput.WriteString( ": flag string value is empty." );
	    END;
	    ProgErrOutput.WriteLn;
	    RETURN FALSE;
	END;

	NameLists.Insert( NameLists.Object( nameList ), flagValue, 
			  NameLists.DONTCARE );
	RETURN TRUE;

    END DefaultStringListHandler;


PROCEDURE StringErrorHandler(
    flagName  : String;
    DONTCARE  : SysTypes.ANYPTR;
    flagValue : String
    )         : BOOLEAN;
    (* 
     * Print a pretty message.  If flagName is empty, then this
     * is the unflaggHandler (which means the argument isn't expected).
     * Otherwise lookup the string.  If it isn't found, then invalid flag.
     * If it is found, evaluate the type and adjust the error message
     * accordingly.
     *)
    VAR
	info : FlagInfo;
    BEGIN (* StringErrorHandler *)

	IF NOT printErrors THEN
	    RETURN FALSE;
	END;

	ProgErrOutput.WriteString( programName );
	ProgErrOutput.WriteString( ": " );
	IF flagName[ 0 ] = 0C THEN
	    ProgErrOutput.WriteString( "unexpected argument '" );
	    ProgErrOutput.WriteString( flagValue );
	    ProgErrOutput.WriteString( "'." );
	ELSE
	    ProgErrOutput.WriteString( "flag '" );
	    ProgErrOutput.WriteString( flagName );
	    IF NOT NameLists.Find( flags, flagName, info ) THEN
		ProgErrOutput.WriteString( "' unexpected." );
	    ELSE
		CASE info^.type OF
		    boolFlag:
			ProgErrOutput.WriteString( "' not expecting value '" );
			ProgErrOutput.WriteString( flagValue );
			ProgErrOutput.WriteString( "'." );
		    |
		    cardFlag:
			IF flagValue[ 0 ] = 0C THEN
			    ProgErrOutput.WriteString( 
				"' must be followed by a cardinal value." );
			ELSE
			    ProgErrOutput.WriteString( 
				"': failed to convert '" );
			    ProgErrOutput.WriteString( flagValue );
			    ProgErrOutput.WriteString( 
				"' into a cardinal value." );
			END;
		    |
		    stringFlag:
			ProgErrOutput.WriteString( 
			    "' must be followed by a string value." );
		END; (* CASE *)
	    END;
	END;
	ProgErrOutput.WriteLn;

	RETURN FALSE;

    END StringErrorHandler;
    
(*  
 * Program Name support 
 *)
VAR
    programName : String;

PROCEDURE GetProgramName(
    VAR name : String
    )        : BOOLEAN;
    BEGIN (* GetProgramName *)

	name := programName;
	RETURN TRUE;

    END GetProgramName;


PROCEDURE SetProgramName(
    name : ARRAY OF CHAR
    );
    BEGIN (* SetProgramName *)

	(* Truncates automagically *)
	Strings.Assign( name, programName );

    END SetProgramName;


@IF NOT NoNotices THEN

    PROCEDURE Terminate(
        terminationMode : SysTypes.ANYPTR
        ); 
	(* 
	 * Clean up only in the event of normal termination.  Note
	 * that we declare DONTCARE as [ 0 .. 0 ] instead of a Flag, 
	 * because String may be large and is allocated even in the
	 * event of abnormal termination (which may be because of stack
	 * overflow!).
	 *)
	VAR
	    info     : FlagInfo;
	    DONTCARE : ARRAY [ 0 .. 0 ] OF CHAR;
	BEGIN (* Terminate *)

	    IF terminationMode = Notices.normalTermination THEN
		@IF MsDosOS THEN
		    NameLists.Destroy( argsList );	(* No importerObjects *)
		@END (* MsDosOS *)
		NameLists.MakeFirstNext( flags );
		WHILE NameLists.Next( flags, DONTCARE, info ) DO
		    Objects.Deallocate( flagInfoMgr, info );
		END;
		NameLists.Destroy( flags );
		Objects.DestroyManager( flagInfoMgr );
	    END;

	END Terminate;

@END (* NOT NoNotices *)


@IF MsDosOS THEN

    PROCEDURE GetProgramFromEnviron(
        progSegPtr : DOS.ProgramSegmentPrefixPtr
        );
	(* 
	 * The structure of the environment (progSegPtr^.environmentSeg) is
	 * a list of null-terminated strings terminated by a final null.
	 * After that the program arguments can be found and after that
	 * the program load name is found.  This last item is what we are
	 * after.
	 *)
	VAR
	    adr        : SYSTEM.ADDRESS;
	    tableIndex : SysTypes.Card;
	    tablePtr   : POINTER TO ARRAY [ 0 .. SysTypes.maxArrayIndexCHAR ]
				OF CHAR;
	    nameIndex  : SysTypes.Card;
	BEGIN (* GetProgramFromEnviron *)

	    (* 
	     * Get the environment tablePtr set up.
	     *)
	    adr.SEGMENT := progSegPtr^.environmentSeg;
	    adr.OFFSET  := 0;
	    tablePtr    := adr;

	    tableIndex  := 0;
	    (* Go to the end of the environment table *)
	    REPEAT
		(* Go to end of the next environment variable *)
		WHILE tablePtr^[ tableIndex ] # 0C DO
		    INC( tableIndex );
		END;
		INC( tableIndex );	(* Skip the variable terminator *)
	    UNTIL tablePtr^[ tableIndex ] = 0C; (* table terminator *)

	    (*
	     * Skip the final null and then add the word count + 1 to
	     * the tableIndex to get the end of the command line (which
	     * has a final null which is not clearly documented as such.
	     *)
	    INC( tableIndex );	(* Skip environment terminator *)
	    INC( tableIndex, ORD( tablePtr^[ tableIndex ] ) + 1 );

	    (* We are at the beginning of the program name *)
	    FOR nameIndex := 0 TO HIGH( programName ) DO
		programName[ nameIndex ] := tablePtr^[ tableIndex ];
		IF programName[ nameIndex ] = 0C THEN
		    RETURN;	(* End of program name *)
		END;
		INC( tableIndex );
	    END;

	    (* Extra long name, but I guess it is ok... *)
	    
	END GetProgramFromEnviron;

	
    PROCEDURE Initialize;
	(* 
	 * Have to build the argsList from the command line and
	 * we have to intialize the program name.
	 *)
	VAR
	    arg         : String;	(* Current found argument *)
	    firstArg    : BOOLEAN;

	@IF LogitechM2V2 THEN
	    CONST
		getProgramSegmentPrefixAddress = 26H;
		    (*
		     * Returns address of RTS program segment prefix 
		     * pointer copy.  It is returned in CX:BX.
		     *)
	    PROCEDURE DoArgument;
		(*
		 * Figures out what to do with the argument that has been
		 * found.  Note that we have to handle the "firstArg"
		 * properly.
		 *)
		CONST
		    dummyName = '*';
		BEGIN (* DoArgument *)

		    IF firstArg THEN
			 (* This is the program name or dummy *)
			 IF Strings.Compare( arg, dummyName )
			      = Intrinsics.equal THEN
			     GetProgramFromEnviron( progSegPtr );
			 ELSE
			    programName := arg;
			 END;
			 firstArg := FALSE;
		    ELSE
			NameLists.Insert( argsList, arg, 
					  NameLists.DONTCARE );
		    END;

		END DoArgument;
        @END (* LogitechM2V2 *)

	CONST
	    quoteCharacter = '"';

	VAR
	    @IF LogitechM2V2 THEN
		segment     : SysTypes.Card;    (* temporary *)
		offset      : SysTypes.Card;    (* temporary *)
		adr         : SYSTEM.ADDRESS;	(* temporary *)
	    @END (* LogitechM2V2 *)
	    progSegPtr  : DOS.ProgramSegmentPrefixPtr;
	    i	        : SysTypes.Card;	(* index into parameters *)
	    argIndex	: SysTypes.Card;	(* Index into current arg *)
	    ch		: CHAR;			(* temporary *)
	    inQuote	: BOOLEAN;		(* are we in a quoted region? *)

	
	BEGIN (* Initialize *)

	    (*
	    @IF LogitechM2V2 THEN
	     * Get the program segment prefix from memory.  It is returned
	     * in CX:BX.  We get the value into "segment" and "offset",
	     * because you can't get directly into adr.SEGMENT (don't ask 
	     * me why).  After this we must assign the adr (offset=0) 
	     * to progSegPtr.  
	    @ELSE (* LogitechM2V2 *)
	     * Get the program name from the environment space.
	    @END (* LogitechM2V2 *)
	     *)
	    @IF LogitechM2V2 THEN
		SYSTEM.SETREG( SYSTEM.AX, getProgramSegmentPrefixAddress );
		SYSTEM.SWI( SYSTEM.RTSVECTOR );
		SYSTEM.GETREG( SYSTEM.CX, segment );
		SYSTEM.GETREG( SYSTEM.BX, offset );
		adr.SEGMENT := segment;
		adr.OFFSET  := offset;
		progSegPtr  := adr;
	    @ELSE (* LogitechM2V2 *)
		progSegPtr := RTSMain.PSPAddress;
		GetProgramFromEnviron( progSegPtr );
	    @END (* LogitechM2V2 *)

	    (* 
	     * Parse the arguments one at a time and call DoArgument
	     * when a non-zero delimited argument is found.
	     *)
	    NameLists.Create( argsList, NameLists.queue, 
			      NameLists.caseSensitive );
	    WITH progSegPtr^ DO
		@IF LogitechM2V2 THEN
		    firstArg := TRUE;
		@END (* LogitechM2V2 *)
		inQuote  := FALSE;
		arg	 := '';
		argIndex := 0;
	        i := 0;
		WHILE i < ORD( paramLength ) DO
		    ch := parameters[ i ];
		    IF ch = quoteCharacter THEN
			inQuote := NOT inQuote;

		    ELSIF inQuote OR (( ch # ' ' ) AND ( ch # flagCharacter ))
		      THEN
			arg[ argIndex ] := ch;	 (* Copy in the character *)
			INC( argIndex );

		    ELSE (* Is an argument delimiter *)

			(* Is this the end of an argument? *)
			IF argIndex # 0 THEN
			    arg[ argIndex ] := 0C;	(* end of argument *)
			    @IF LogitechM2V2 THEN
				DoArgument;
			    @ELSE (* LogitechM2V2 *)
				NameLists.Insert( argsList, arg, 
					      NameLists.DONTCARE );
			    @END (* LogitechM2V2 *)
			    argIndex := 0;	(* start new argument *)
			END;

			(* Flag characters are always passed to Parse *)
			IF ch = flagCharacter THEN
			    arg[ 0 ] := flagCharacter;
			    argIndex := 1;
			END;
		    END;

		    INC( i );

		END; (* WHILE *)

		(* Was the last argument the end of the line? *)
		IF argIndex # 0 THEN
		    arg[ argIndex ] := 0C;
		    @IF LogitechM2V2 THEN
			DoArgument;
		    @ELSE (* LogitechM2V2 *)
			NameLists.Insert( argsList, arg, NameLists.DONTCARE );
		    @END (* LogitechM2V2 *)
		END;

	    END; (* WITH *)
	    
	END Initialize;
@END (* MsDosOS *)


@IF SunM2 THEN

    VAR
	argcount : SysTypes.Card;
	argptr   : UnixCtypes.pp_char;

    PROCEDURE Initialize;
	(* 
	 * On the Sun, we only have to initialize the program name and
	 * argument count.
	 *)
	VAR
	    DONTCARE : SysTypes.Card;
	BEGIN (* Initialize *)
	    argcount := System.ArgumentCount();
	    argptr   := System.ArgumentTable();
	    (* Save the program name *)
	    DONTCARE := Bytes.CopyAsString( 
		argptr^[ 0 ], HIGH( programName ) + 1,
		SYSTEM.ADR( programName ), HIGH( programName ) + 1 );
	END Initialize;

@END (* SunM2 *)


BEGIN (* ProgArgs *)
    
    @IF NOT NoNotices THEN
	Notices.Register( Notices.GetTerminationNotice(), Terminate );
    @END (* NOT NoNotices *)

    Objects.CreateManager( flagInfoMgr, SYSTEM.TSIZE( FlagInfoRec ),
			   "ProgArgs.FlagInfo" );
    NameLists.Create( flags, NameLists.forwardSorted, 
		      NameLists.caseSensitive );

    (* 
     * Set up the default handlers.  Note that the handler is the
     * same for both types.  It determines the type of the problem
     * based on the flagName passed in.
     *)
    badFlagHandler   := StringErrorHandler;
    unflaggedHandler := StringErrorHandler;

    badFlagHandlerObject   := NIL;
    unflaggedHandlerObject := NIL;

    @IF Assert THEN
	badFlagHandlerRegistered   := FALSE;
	unflaggedHandlerRegistered := FALSE;
    @END (* Assert *)

    Initialize;		(* Implementation dependent intialization *)

END ProgArgs.
