(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE Lists;
(*
 * Provides a simple method for managing lists of "keys".
 *
 * One can specify either sorted (reverse or forward), queued (FIFO),
 * or stacked (LIFO) orderings. Keys need not be unique, but they must
 * be non-zero in length and always of the same size for a given list
 * (otherwise, caller is terminated). This is a generic module;
 * you must provide a specific type for the keys in the list.
 * The types are specified at run-time.
 *
 * "importerObject":
 *     Each key may have an associated "importerObject" (if the
 *     importer so desires). The object is unmodified by Lists.
 *     Each time the key is retrieved from the list, its object
 *     is returned as well.
 *
 *     Usually, the "importerObject" is dynamic memory allocated
 *     by the Objects module, but this is not required. One may
 *     manipulate lists without the use of the "importerObject"
 *     feature. In this case, one should use the DONTCARE variable
 *     in routines which take an "importerObject" as a parameter.
 *
 * Looking for keys:
 *     There are two ways of looking for the keys in a list: in
 *     order traversal and by searching. Searching is accomplished
 *     via the Find procedure which is passed a key for which to look
 *     in a list. The procedure Next (and MakeFirstNext) is used to
 *     iteratively access each key in the list in the order of the
 *     list. The order of the list is specified at creation time
 *     and may not be changed. 
 *
 * Current key:
 *     Each time a Find or Next succeeds or after an Insert,
 *     the value returned (inserted) becomes the current key.
 *
 *     Several operations are valid only on the current key:
 *         DeleteCurrent       : eliminate the current from the list
 *         GetCurrent          : return the key and object of the current
 *         ChangeCurrentObject : replace object of current with new value
 *         ChangeCurrentKey    : replace key of current with new value
 *
 *     The current key is not always valid. If the current key is
 *     invalid, the four procedures above terminate the caller.
 *     The current key is invalid if DeleteCurrent or MakeFirstNext
 *     is called, or when Next and Find return FALSE.
 *)
IMPORT
    Intrinsics,
    Objects,
    SysTypes;

EXPORT QUALIFIED
    Object,           typeReal,            typeCard,          typeInt,
    typeChar,         typeAdr,             Orderings,         Create,
    Destroy,          SetInvalid,          DONTCARE,          Insert,
    DeleteCurrent,    DeleteAll,	   Find,              Next,
    MakeFirstNext,    GetCurrent,          ChangeCurrentObject, 
    ChangeCurrentKey, GetCount, 	   GetOrdering,       AssertProc,
    CompareProc,      Register,            SpecialCreate,
    NoAssert,         CardCompare,         IntCompare,        RealCompare,
    CharCompare,      AdrCompare,          PRIVATEInitialize;

TYPE
    Object;

CONST
    (* 
     * Some built-in list types.
     *)
    typeCard = "Card";		(* SysTypes.Card *)
    typeInt  = "Int";		(* SysTypes.Int *)
    typeAdr  = "ADDRESS";	(* NIL is a valid address *)
    typeChar = "CHAR";
    typeReal = "Real";		(* SysTypes.Real *)

TYPE
    Orderings = ( 
        forwardSorted,  (* The lesser keys are returned first *)
        reverseSorted,  (* The greater keys are returned first *)
        queue,          (* First key Inserted is first returned by Next *)
        stack           (* First key Inserted is last returned *)
    );
    (* 
     * Order in which Next returns elements  
     * (see comments at top).
     *)

PROCEDURE Create(
    VAR list          : Object;         (* In any state, will be valid *)
        typeName      : ARRAY OF CHAR;  (* What kind of elements in list *)
        howToTraverse : Orderings       (* Order in which Next returns *)
    );
    (*
     * Create a list with the specified type and ordering.
     *
     * A type is defined by another module which implements the
     * particular type. The module will usually export a constant
     * called "listTypeName" which it has previously registered
     * with this module. Several predefined lists are defined by
     * this module (see typeXXX declarations).
     *)

PROCEDURE Destroy(
    VAR list : Object  (* In any state, will be invalid *)
    );
    (*
     * Dispose of a list object.
     *
     * Notice that, while the Lists module can dispose of the internal
     * data structures relating to the list, it cannot dispose of any
     * dynamically allocated values or "importerObjects" which have
     * been associated with elements. Thus, Destroying lists which have
     * dynamic memory associated with the elements must be done in two
     * phases: the destroyer must first free all memory associated
     * with the list by iterating through the list via MakeFirstNext
     * and Next, and then the destroyer is free to call this procedure.
     *)

PROCEDURE SetInvalid(
    VAR list : Object  (* In any state, will be invalid *)
    );
    (*
     * Initializes the list variable to an invalid object.
     *)

VAR
    DONTCARE : SysTypes.ANYPTR;
    (*
     * Parameter to procedures when importerObject is not required.
     * Make no other use of this variable.
     *)

PROCEDURE Insert(
    list           : Object;                (* Must be valid *)
    key            : ARRAY OF SysTypes.ANY; (* Must be correct for the list *)
    importerObject : SysTypes.ANYPTR        (* Object returned by Find, etc *)
    );
    (*
     * Add a new entry to the list (key and associated "importerObject").
     * The object will be returned when the associated key is retrieved
     * from the list. 
     *
     * The current key of the list is set to the key just inserted.
     *
     * The position of an inserted key/object depends on the parameters
     * passed to Open when the List was created (see comments at top
     * and in Orderings declaration).
     *)

PROCEDURE DeleteCurrent(
    list : Object  (* must be valid with current, current will be invalid *)
    );
    (*
     * Delete the current element from the list.
     *
     * To delete all the objects in a list, you must continually call
     * MakeFirstNext followed by calls to Next. This way of proceeding
     * is usually unnecessary, given that Destroy does exactly this.
     *)

PROCEDURE DeleteAll(
    list : Object    (* must be a valid object *)
    );
    (*
     * Delete all elements in the list.  This may be dangerous if the
     * elements have associated data in their importerObjects which
     * must be deallocated.
     *)

PROCEDURE Find(
        list           : Object;                (* Must be valid *)
        key            : ARRAY OF SysTypes.ANY; (* Key to be sought for *)
    VAR importerObject : SysTypes.ANYPTR        (* Associated with key *)
    )                  : BOOLEAN;               (* Found => TRUE *)
    (*
     * Search the list for a specific key. If the key is found, the object
     * associated with the key is returned in "importerObject" and the
     * found element becomes the current element. Otherwise failure is
     * indicated and current is invalid.
     *
     * When a list contains duplicate keys, the following conditions apply
     * (dependent upon search order):
     *    queue         - successive calls to Next will return MORE recently
     *                    inserted duplicates.
     *    stack         - successive calls to Next will return LESS recently
     *                    inserted duplicates.
     *    forwardSorted - calls to Next will return other duplicates, but 
     *                    the order is unspecified.
     *    reverseSorted - is identical to forwardSorted.
     *)

PROCEDURE Next(
        list           : Object;                (* Must be valid with current *)
    VAR key            : ARRAY OF SysTypes.ANY; (* the next key in list *)
    VAR importerObject : SysTypes.ANYPTR        (* Associated with key *)
    )                  : BOOLEAN;               (* Current valid => TRUE *)
    (*
     * Traverse the list in the order specified to Create.
     *
     * There are four cases:
     *     - if current is defined, return the next element after current,
     *     - if MakeFirstNext was just called, return the first element,
     *     - if the previous next was the last, return FALSE,
     *     - otherwise, the call is invalid and the caller will be terminated.
     *)

PROCEDURE MakeFirstNext(
    list : Object  (* Must be valid, current will be invalid *)
    );
    (*
     * Sets up the list so that the following call to Next will
     * return the first element in the list.
     *)

PROCEDURE GetCurrent(
        list           : Object;                (* Must be valid with current *)
    VAR key            : ARRAY OF SysTypes.ANY; (* Key of current element *)
    VAR importerObject : SysTypes.ANYPTR        (* Object of current element *)
    );
    (*
     * Return the key and object of the current element of the list.
     * If current is not defined, caller is terminated.
     *)

PROCEDURE ChangeCurrentObject(
    list              : Object;         (* Must be valid with current *)
    newImporterObject : SysTypes.ANYPTR (* To be associated with current *)
    );
    (*
     * Replace the object for the current element with "newImporterObject".
     *)

PROCEDURE ChangeCurrentKey(
    list   : Object;               (* Must be valid with current *)
    newKey : ARRAY OF SysTypes.ANY (* To be used in place of current key *)
    );
    (*
     * Change the key of the current element to be "newKey".
     * If current is not defined, caller is terminated.
     *
     * If the list is ordered, the entry is re-inserted in the list
     * at an appropriate new location.
     *)
    
PROCEDURE GetCount( 
    list : Object          (* must be valid *)
    )    : SysTypes.Card;  (* number of elements in the list *)
    (*
     * Returns the count of elements.
     *)
    
PROCEDURE GetOrdering(
    list : Object      (* Must be valid *)
    )    : Orderings;  (* Search order of the list specified to Create *)

    (*
     * The following declarations are provided for list-type implementers.
     *
     * An alternative to Create is provided for those modules which 
     * hide the interface to this module. For example, NameLists
     * uses this, since its elements must be allocated separately.
     *)
TYPE
    AssertProc = PROCEDURE(
        SysTypes.ANYPTR  (* Pointer to object to be assertion checked *)
    );
    (*
    * Performs a validity check on keys inserted in the list.
    *
    * If the item is invalid, the caller is terminated.
    * The size is guaranteed to be correct by the Lists.
    *)

    CompareProc = PROCEDURE(
        SysTypes.ANYPTR,            (* Left side of comparison *)
        SysTypes.ANYPTR             (* Right side of comparison *)
    ) : Intrinsics.CompareResults;  (* Result (less, equal or greater) *)
     (*
      * Compares two keys. The values are pointers to keys.
      *)

PROCEDURE Register(
    typeName    : ARRAY OF CHAR;  (* Any, but usually module identifier *)
    assertProc  : AssertProc;     (* Called when new keys are inserted *)
    compareProc : CompareProc;    (* For orderings *)
    keySize     : SysTypes.Card   (* SYSTEM.TSIZE( keyType ) *)
    );
    (*
     * Create a new type of list.
     *
     * The assert and compare procedures will be called as required
     * by the list management code.
     *
     * The size of the objects is fixed. If "typeName" already exists,
     * the caller is terminated.
     *)

PROCEDURE SpecialCreate(
    VAR list          : Object;       (* Newly created list object *)
        assertProc    : AssertProc;   (* Called when new keys are inserted *)
        compareProc   : CompareProc;  (* For orderings *)
        keySize       : SysTypes.Card;(* SYSTEM.TSIZE( keyType ) *)
        howToTraverse : Orderings     (* How the list will be traversed *)
    );
    (*
     * Create a new list which has the characteristics described
     * by the assert, compare, and size values.
     *
     * This procedure is provided for those modules which hide Lists
     * from their importers. This is necessary if there is more semantic
     * action required than simply copying bytes to insert new elements.
     *)

PROCEDURE NoAssert(
    keyPtr : SysTypes.ANYPTR
    );
    (*
     * If assertion checking is not required, pass this procedure
     * into Register or SpecialCreate. This actually a no-op.
     *)

PROCEDURE CardCompare(
    left  : SysTypes.ANYPTR;
    right : SysTypes.ANYPTR
    )     : Intrinsics.CompareResults;

PROCEDURE IntCompare(
    left  : SysTypes.ANYPTR;
    right : SysTypes.ANYPTR
    )     : Intrinsics.CompareResults;

PROCEDURE RealCompare(
    left  : SysTypes.ANYPTR;
    right : SysTypes.ANYPTR
    )     : Intrinsics.CompareResults;

PROCEDURE CharCompare(
    left  : SysTypes.ANYPTR;
    right : SysTypes.ANYPTR
    )     : Intrinsics.CompareResults;

PROCEDURE AdrCompare(
    left  : SysTypes.ANYPTR;
    right : SysTypes.ANYPTR
    )     : Intrinsics.CompareResults;
    (*
     * These procedures compare values of the generic types.
     * They can be used by list type implementers to compare values.  
     *
     * SUN IMPLEMENTATION SPECIFIC:
     *     Because REAL on the Sun compiler is not SysTypes.REAL64,
     *     we have defined RealCompare (for the time being) to compare
     *     SysTypes.REAL64 in the Sun implementation.
     *)

PROCEDURE PRIVATEInitialize;
    (*
     * DO NOT CALL THIS PROCEDURE.
     *)

END Lists.


