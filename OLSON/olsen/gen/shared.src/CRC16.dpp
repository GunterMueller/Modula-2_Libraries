(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE CRC16;
(*
 * Computes a 16-bit Cyclic Redundancy Code for an infinitely
 * large sequence of chunks of memory. 
 *
 * CCITT NOTE:
 *     Although the CRC is correct, in order for it to be
 *     transmitted, the value must be bit-flipped (if you
 *     are sending to a real CCITT machine). However, for
 *     simple in memory verification, Result can be used.
 *)
IMPORT
    SysTypes;

EXPORT QUALIFIED
    Result,
    initialResult,
    Compute;

TYPE
    Result = SysTypes.CARDINAL16;
    (*
     * The following should be used as an opaque,
     * but needs to be in view so it can be copied.
     *)
CONST
    initialResult = 0FFFFH;
    (*
     * For the first time Compute is called.
     *)
    
PROCEDURE Compute(
    previous : Result;          (* Previous value returned by Compute *)
    buffer   : SysTypes.SAUPTR; (* Block to have its CRC computed *)
    length   : SysTypes.Card    (* Length of buffer *)
    )        : Result;          (* CRC value *)
    (*
     * Compute a CRC on "buffer" which may be just one part
     * of a sequence of buffers.
     *
     * The CRC can be computed on one buffer by passing "initialResult"
     * to previous and using the result. Or the CRC may be used in a
     * sequence which requires passing in the previous value of the
     * computation.
     *)
                           
END CRC16.
