(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE Chars;
(*
 * Provides character manipulation primitives and classification tests..
 *
 * The following categorizations of characters are understood:
 *     - white space
 *     - alphabetic
 *     - numeric (in specified base and general)
 *     - upper/lower case
 *
 * Conversions are provided between:
 *     - upper and lower case
 *     - CARDINAL and CHAR
 *)
IMPORT
    SysTypes;
EXPORT QUALIFIED
    IsWhiteSpace,    IsAlpha,     IsAlphaNumeric,   IsLower,
    IsUpper,         ToLower,     StringToLower,    ToUpper,
    StringToUpper,   minBase,     maxBase,          Bases,
    IsDigit,         ToDigit,     DigitValues,      FromDigit;

PROCEDURE IsWhiteSpace(
    toTest : CHAR      (* To be tested *)
    )      : BOOLEAN;  (* TRUE => Is a white space -- ' ' is always *)

PROCEDURE IsAlpha(
    toTest : CHAR      (* To be tested *)
    )      : BOOLEAN;  (* TRUE => Is in { 'a' .. 'z', 'A' .. 'Z' } *)

PROCEDURE IsAlphaNumeric(
    toTest : CHAR      (* To be tested *)
    )      : BOOLEAN;  (* IsAlpha( toTest ) OR IsDigit( toTest, 10 ) *)

PROCEDURE IsLower(
    toTest : CHAR      (* To be tested *)
    )      : BOOLEAN;  (* TRUE => Is in { 'a' .. 'z' } *)

PROCEDURE IsUpper(
    toTest : CHAR      (* To be tested *)
    )      : BOOLEAN;  (* TRUE => Is in { 'A' .. 'Z' } *)

PROCEDURE ToLower(
    toConvert : CHAR   (* To be converted *)
    )         : CHAR;  (* Will be lower case if alpha *)

PROCEDURE StringToLower(
    VAR toConvert : ARRAY OF CHAR  (* Non-alphas are left alone *)
    );
   
PROCEDURE ToUpper(
   toConvert : CHAR   (* To be converted *)
   )         : CHAR;  (* Will be upper case if alpha *)

PROCEDURE StringToUpper(
    VAR toConvert : ARRAY OF CHAR  (* Non-alphas are left alone *)
    );

    (* 
     * Numeric operations:
     *     A numeric symbol space is defined by a base specified with
     *     the following operations. The values of the various symbols
     *     for each base are:
     *
     *         '0' = 0  all bases
     *         '1' = 1  all bases
     *         '2' = 2  base  3 or higher
     *         ...
     *
     *         '8' = 8  base  9 or higher
     *         '9' = 9  base 10 or higher
     *         'A' = 10 base 11 or higher
     *         'B' = 11 base 12 or higher
     *         ...
     *
     *         'Z' = 35 base 36 only.
     *
     *     Note that upper and lower case symbols are allowed for
     *     conversions from symbols to cardinals, but FromDigit
     *     always returns an upper case character.
     *)
CONST
    minBase = 2;
    maxBase = 36;

TYPE 
    Bases       = [ minBase .. maxBase ];
    DigitValues = [ 0 .. maxBase - 1 ];

PROCEDURE IsDigit(
    toTest : CHAR;     (* To be tested *)
    base   : Bases     (* Specifies legal symbols for "toTest" *)
    )      : BOOLEAN;  (* Is a symbol in base => TRUE *)

PROCEDURE ToDigit(
   toConvert : CHAR            (* To be converted (lower or upper) *)
   )         : SysTypes.Card;  (* Number of digit, or maxBase if not legal *)

PROCEDURE FromDigit(
    toConvert : DigitValues  (* To be converted *)
    )         : CHAR;        (* Symbol of digit *)

END Chars.

