(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE TasksPRIVATE; 
(*
 * Creating main is the only really tricky part, that is, we must replace
 * an address somewhere down in the stack (see CreateMain).  Tasks are
 * allocated in the same space as the stack.  The ObjectRec is at the
 * bottom of the stack (although it probably should be the top).
 * We do stack checking in SwitchRunning for safety (under Assert control).
 *)
IMPORT
    ProgErr,
    ProgErrOutput,
    SafeStorage,	
    SYSTEM,
    SysTypes,
    Strings,
    TaskConsts,
    Tasks,
    TasksAsm,
    UnixCexit,
    UnixCsys_file,
    UnixMonitor;
    

CONST
    taskNotFound       = "Tasks: allocated task list is munged.";
    taskAssertError    = "Tasks: invalid object.";
    
(*
 * Memory management.
 *)
TYPE
    (* 
     * The following declaration is used to create a task.  We need to
     * setup the proper values on the stack to make it look like TaskEnvelope
     * is being called when, in fact, it is being Switched to.  The
     * stack is just like a regular interrupt stack with the bottom 
     * containing the parameters and return address.  In SunM2
     * parameters are pushed right to left, so the highest address 
     * contains the last parameter.  Note that we never get to the
     * returnAdr, thus it is set to NIL.
     * 
     * The stack will look like:
     *	    importerObject			<<< Bottom
     *	    entryPoint
     *	    parent			
     *	    returnAdr	-- For fake call to TaskEnvelope
     *	    IntStackTopRec
     * Note that the initial sigmask has interrupts enabled.
     *)
    CreateStackTopRec = RECORD
	intStack   : IntStackTopRec;
	returnAdr  : SYSTEM.ADDRESS;
	parent     : Object;
	entryPoint : Tasks.Proc;
	impObj     : SysTypes.ANYPTR;
    END; (* CreateStackTopRec *)

    CreateStackTop = POINTER TO CreateStackTopRec;

CONST
    taskMagic       = 0BEACH;	  (* Some nice number *)
    invalidMagic    = 0;	  (* Number which isn't magic *)

VAR
    initialLevel    : SysTypes.Card;

PROCEDURE Allocate(
        stack          : TaskConsts.StackSizes; (* Size to be allocated *)
        thread         : Tasks.Proc;            (* thread passed to Create *)
        importerObject : SysTypes.ANYPTR;       (* passed to Create *)
    VAR task           : Object                 (* OUT: partially initialized *)
    );
    (*
     * Allocate the whole thing and then adjust pointers for the stack.
     *)
    VAR
	createStack : CreateStackTop;
	size        : SysTypes.Card;
    BEGIN (* Allocate *)
    
	IF ODD( stack ) THEN
	    INC( stack );
	END;
	size := stack + SYSTEM.TSIZE( ObjectRec );

	SafeStorage.ALLOCATE( task, size );
	
	WITH task^ DO
	    magic := taskMagic;
	    savedLevel := initialLevel;

	    stackBase := SYSTEM.ADDRESS( task ) + SYSTEM.TSIZE( ObjectRec );
	    stackSize := stack;
	    intStack.adr := stackBase + stackSize 
			       - SYSTEM.TSIZE( CreateStackTopRec );
	    lowestSP := intStack.adr;

	    (* Insert in linked list of tasks *)
	    nextAlloc := allocRoot;
	    allocRoot := task;
	    allocSize := size;

	    createStack := intStack.adr;

	    WITH createStack^ DO
		WITH intStack DO
		    signalMask := {};
		    errno      := 0;
		    (* Others don't matter *)
		    registerA6 := 0;
		    registerCCR := 0;
		    registerPC := taskEnvelopeAdr;
		END;
		returnAdr := NIL;
		parent := running;
		entryPoint := thread;
		impObj := importerObject;
	    END; (* WITH *)

	    (* state, priority, nextReady, otherNext, info, name not 
	       initialized here *)

	END; (* WITH *)
	
    END Allocate;


PROCEDURE Deallocate(
    VAR task : Object	 (* IN: valid task; OUT: invalid task *)
    );
    (*
     * Deallocates the current task (and its stack).  First removes
     * it from the list of tasks.
     *)
    VAR
	curr   : Object;
	prev   : Object;
    BEGIN (* Deallocate *)
    
	IF allocRoot = task THEN
	    allocRoot := allocRoot^.nextAlloc;
	ELSE
	    prev := allocRoot;
	    curr := allocRoot^.nextAlloc;
	    LOOP
		IF curr = NIL THEN
		    (* Didn't find, but it may be the mainTask *)
		    IF ( task # mainTask ) OR ( mainTask = NIL ) THEN
			ProgErr.Terminate( taskNotFound );
		    END;
		    (* Otherwise, we are deallocating main task *)
		    task := NIL;
		    mainTask^.magic := invalidMagic;
		    mainTask := NIL;
		    RETURN;    (* All done with "deallocation" *)
		END;
		
		IF curr = task THEN
		    EXIT;
		END;
		prev := curr;
		curr := curr^.nextAlloc;
	    END; (* LOOP *)
	    
	    (* Delete from the list *)
	    prev^.nextAlloc := curr^.nextAlloc;
        END;
	
	(* Now get rid of it *)
	task^.magic := invalidMagic;
	SafeStorage.DEALLOCATE( task, task^.allocSize );

    END Deallocate;


PROCEDURE Traverse(
    callWithTasks  : Iterator;	     (* will be called for each task in list*)
    importerObject : SysTypes.ANYPTR (* passed to callWithTasks unmodified *)
    );
    (*
     * Special cases mainTask, but otherwise straightforward.
     * Procedure must be mutex protected, so don't need to worry about
     * tasks dying or being created (unless the upcall is stupid, but
     * this is a private procedure).
     *)
    VAR
	curr : Object;
    BEGIN (* Traverse *)
    
	(* Do the first one *)
	IF mainTask # NIL THEN
	    callWithTasks( importerObject, mainTask );
	END;

	curr := allocRoot;
	WHILE curr # NIL DO
	    WITH curr^ DO
		callWithTasks( importerObject, curr );
		curr := nextAlloc;
	    END; (* WITH *)
	END; (* WHILE *)
    
    END Traverse;
    

PROCEDURE IsValid( 
    task : Object      (* may be in any state *)
    )    : BOOLEAN;    (* TRUE => "task" is a valid Object at time of call. *)
    (*
     * Don't want to access "task^", because this may cause errors (pointers
     * to random memory aren't pretty things).  Therefore, we start with
     * allocRoot and search for the value we are interested.  Since the
     * mainTask is a special case (probably uncommon????), we check it
     * last.
     *)
    VAR
	curr : Object;
    BEGIN (* IsValid *)
    
	curr := allocRoot;
	LOOP
	    IF curr = NIL THEN
		RETURN ( task = mainTask ) AND ( mainTask # NIL );
	    END;
	    IF curr = task THEN
		RETURN TRUE;
	    END;
	    curr := curr^.nextAlloc;
	END;

    END IsValid;


PROCEDURE Assert(
    task : Object      (* must be valid or caller will be terminated. *)
    );
    (*
     * Go for the gold and be quick about it!  Don't care about mem errors.
     *)
    BEGIN (* Assert *)
    
	IF task^.magic # taskMagic THEN
	    ProgErr.Terminate( taskAssertError );
	END;
	
    END Assert;

(*
 * Mutual exclusion managment.
 *)
VAR
    mutexOwner : Object;
	(*
	 * This is the task which owns the mutex of the objectMgr.
	 * If it is NIL, then there is no owner.
	 *)
    mutexQueue : Object;
	(*
	 * This is the head of the queue of waiting tasks to enter
	 * a mutually excluded section of the objectMgr.  Note that
	 * this queue is not kept in a first come first serve basis.
	 * It is highly unlikely that this queue will get to be long
	 * nor will it be a critical resource, therefore we make it
	 * on a last come first served basis.  It saves code and is
	 * faster.
	 *)
    mutexNestingLevel : SysTypes.Card;
	(*
	 * This variable indicates the nesting level of the owner
	 * of the mutex.
	 *)

PROCEDURE Enter;
    (*
     * We must do the entire queue manipulation in a non-preemptable
     * section.  We always insert at the head of the queue.  Note
     * that the task can be awoken for any number of reasons, thus
     * the need for a loop around the suspend and the inQueue variable.
     *)
    VAR
	inQueue : BOOLEAN;
    BEGIN (* Enter *)

	inQueue := FALSE;	(* Only insert ourself once *)

	Tasks.DisallowPreemption;
	    
	    LOOP 
		(* Is the mutex completely free (likely) *)
		IF mutexOwner = NIL THEN
		    mutexNestingLevel := 1;
		    mutexOwner := running;
		    EXIT;
		END;
		(* Are we already the owner? *)
		IF mutexOwner = running THEN
		    INC( mutexNestingLevel );
		    EXIT;
		END;

		(* Have to wait, but are we already in the queue? *)
		IF NOT inQueue THEN
		    inQueue := TRUE;
		    (* Insert at the head *)
		    running^.otherNext := mutexQueue;
		    mutexQueue := running;
		END;

		(* Wait for an Exit by the owner *)
		Tasks.Suspend;
	    END; (* LOOP *)

	Tasks.AllowPreemption;

    END Enter;


PROCEDURE Exit;
    (*
     * We must do the entire queue manipulation in a non-preemptable
     * section.  We always delete at the head of the queue.  Note
     * that we don't ready the queue head unless the mutexNestingLevel 
     * is 0 (no more outstanding Enters).  Note that if we Ready the
     * head of mutexQueue we cannot free up the mutex, we must assign
     * it at the time we do the freeing.
     *)
    BEGIN (* Exit *)

	Tasks.DisallowPreemption;

	    @IF Assert THEN
		(* Make sure we are the owner *)
		IF mutexOwner # running THEN
		    ProgErr.Terminate( 
			"TasksPRIVATE: Exit called without Enter!" ); 
		END;
	    @END (* Assert *)

	    DEC( mutexNestingLevel );
	    (* If we don't have any more Enters outstanding *)
	    IF mutexNestingLevel = 0 THEN
		(* If there isn't anyone waiting, then just free up mutex *)
		IF mutexQueue = NIL THEN
		    (* Free up the mutex *)
		    mutexOwner := NIL;
		ELSE
		    (* Assign the new owner and tell it to go *)
		    mutexOwner := mutexQueue;
		    Tasks.Ready( Tasks.Object( mutexOwner ) );

		    (* Delete the head *)
		    mutexQueue := mutexQueue^.otherNext;
		END;
	    END;

	Tasks.AllowPreemption;

    END Exit;

VAR
    crashPtr : POINTER TO CHAR;
PROCEDURE SwitchRunning(
    runningSP : SYSTEM.ADDRESS     (* Stack to be saved in running *)
    )	      : SYSTEM.ADDRESS;    (* Will be restored upon call *)
    (*
     * Do a stack check and then switch the modula-2 variables.
     * Note that the stack may already be smashed by the time we
     * get in here in which case we probably shouldn't call anyone
     * just force a segmentation violation.
     *
     * TODO:
     *    Dynamically set this procedure for no stack checking and
     *    possibly to save floating point registers.
     *)
    CONST
	stackSlop = 50;
    BEGIN (* SwitchRunning *)

	WITH running^ DO
	    @IF Assert THEN
		IF ( magic # taskMagic ) OR
		   ( stackBase + stackSlop > runningSP ) THEN
		    crashPtr^ := 0C;	(* Cause segmentation fault *)
		END;
		IF runningSP < lowestSP THEN
		    lowestSP := runningSP;	(* New min! *)
		END;
	    @END (* Assert *)
	    intStack.adr := runningSP;
	    savedLevel := preemptionLevel;
	END;

	running := readyQueue;

	preemptionLevel := running^.savedLevel;

	RETURN readyQueue^.intStack.adr;

    END SwitchRunning;


PROCEDURE DefaultPanicHandler(
    msg : ARRAY OF CHAR
    );
    BEGIN (* DefaultPanicHandler *)
	
	(* Ok in the Sun world *)
	ProgErr.Terminate( msg );

    END DefaultPanicHandler;


PROCEDURE RebootSystem;
    BEGIN (* RebootSystem *)

	UnixCexit._exit( 1 );	(* Get out fast *)

    END RebootSystem;


PROCEDURE ExitSystem;
    (*
     * Just go!
     *)
    BEGIN (* ExitSystem *)

	UnixCexit.exit( 0 );

    END ExitSystem;


VAR
    mainTaskRec : ObjectRec;	  (* We don't allocate this one *)

PROCEDURE CreateMain(
    taskEpilogueAdr : SYSTEM.ADDRESS
    );
    (* 
     * Initialization of the first task is a little complicated, because
     * we must build a task around the currently running control thread.
     * The tricky pare
     *)
    TYPE
	CallStackPtr = POINTER TO CallStackFrame;
	CallStackFrame = RECORD
	    link     : CallStackPtr;
	    returnPC : SYSTEM.ADDRESS;
	END;
    VAR
	i          : SysTypes.Card;
	call	   : CallStackPtr;
	mainAdr    : SYSTEM.ADDRESS;
	m2_initAdr : SYSTEM.ADDRESS;
    BEGIN (* CreateMain *)

	mainTask := SYSTEM.ADR( mainTaskRec );
	
	WITH mainTaskRec DO
	    (* intStack initialized below *)
	    lowestSP := SYSTEM.ADR( taskEpilogueAdr );	(* just a guess *)
	    stackBase := NIL;	(* This stack grows infinitely *)
	    (* stackSize set below *)
	    nextAlloc := NIL;
	    allocSize := 0;

	    magic     := taskMagic;
	    state     := readyOrRunning;
	    priority  := TaskConsts.defaultPriority;
	    nextReady := NIL;
	    otherNext := NIL;
	    
	    FOR i := 0 TO HIGH( info ) DO
		info[ i ] := NIL;
	    END;
	    name      := "Main";
	END;
	
	(*
	 * We want to dig to the bottom of the stack which will
	 * look like (upside down now!).  We go until we hit
	 * a return address between m2_init and main.  This assumes
	 * that the Sun compiler places main and m2_init in the
	 * same region (which it does).
	 *    
	 *     m2_init+N        	<< Return address inside m2_init.
	 *     someLinkPtr
	 *     ...
	 *     tasksEpilogueAdr		<< argument
	 *     someReturnPC
	 *     currentLink		<< stack points here now.
	 *)
	(* Make sure our assumptions are correct *)
	mainAdr := SYSTEM.ADDRESS( TasksAsm.main );
	m2_initAdr := SYSTEM.ADDRESS( TasksAsm.m2_init );

	IF mainAdr < m2_initAdr THEN
	    ProgErr.Terminate( "TasksPRIVATE: m2_init and main have moved." );
	END;

	call := SYSTEM.ADDRESS( SYSTEM.ADR( taskEpilogueAdr ) - 8 );

	(* Search for the m2_init return address *)
	WHILE NOT ( ( call^.returnPC > m2_initAdr ) AND
		    ( call^.returnPC < mainAdr ) ) DO
	    call := call^.link;
	END; (* WHILE *)

	(* The we must go one further into "main" *)
	call := call^.link;

	(* We set the size of the stack to be the "highestSP" *)
	mainTaskRec.stackSize := SysTypes.Card( call );
	
	(* 
	 * Don't have to callOnBirth, because TaskInfo initializes after us.
	 * However, this task is now a first class citizen, so we must
	 * have an Epilogue (viz. Barnaby Jones).  The stack is now pointing
	 * at the last call frame which should be m2_init.
	 *)
	call^.returnPC := taskEpilogueAdr;
	
    END CreateMain;

@IF Debug THEN
    VAR
	dbxtask : Object;		   (* For switching *)
	dbxsave : RECORD	(* Save area for running when debugging *)
	    savedLevel : SysTypes.Card;
	    sp         : SysTypes.SAUPTR;
	    regs       : TasksAsm.SavedStackRec;
	END;
@END


PROCEDURE Initialize(
    taskEpilogue : PROC
    );
    (*
     * This procedure is called by Tasks, because we have a circular
     * import.  It initializes local variables and converts the
     * current call chain into a "task" via CreateMain.  
     * 
     * NOTE: this procedure should be called from the init body of Tasks,
     *	     because we want all procedures in the call chain to be far calls.
     *)
    VAR
	DONTCARE : PROC;
    BEGIN (* Initialize *)

	(* Must be set before any tasks are created! *)
	TasksAsm.taskSwitcher := SwitchRunning;
    
	crashPtr := NIL;	(* Make sure we blow! *)

	mutexOwner := NIL;
	mutexQueue := NIL;
	mutexNestingLevel := 0;
	
	CreateMain( SYSTEM.ADDRESS( taskEpilogue ) );

	allocRoot  := NIL;    (* Nothing allocated yet *)
	running    := mainTask;
	readyQueue := mainTask;

	(* What is the scheduling method? *)
	IF NOT TaskConsts.AllowPreemption() THEN
	    initialLevel := firstLevelDisallow;
	ELSE
	    initialLevel := allowPreemption;    
	    (* Only need install if preemptable system *)
	    UnixMonitor.Install( Tasks.DisallowPreemption, 
				 Tasks.AllowPreemption, DONTCARE, DONTCARE );
	END;
	preemptionLevel := initialLevel;

	systemPanicked := FALSE;
	
	(* Other variables initialized by Tasks *)

    END Initialize;

(* Initialization done by Initialize which is called by Tasks *)
END TasksPRIVATE.
