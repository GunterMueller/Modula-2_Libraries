(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE TaskTime;
(*
 * Uses interrupts and tasks to implement timed Suspends.  A task
 * sets its Info field to the absolute time it wants to wake up and
 * then inserts itself in the timer queue.  The sleepQueue is a linked
 * list of InfoRecs which is in order of least time to sleep to greatest 
 * time to sleep.  The "absSleep" field is the absolute time (UCT) when
 * the task should be woken up by the interrupt handler.
 * 
 * The interrupt handler is linked into the interval timer.  The timer 
 * queue is kept to be more efficient in terms of a time sharing machine,
 * that is, we don't sleep a regular amount.  When a task inserts itself
 * in the queue, it must set the interval timer to the new value if it
 * is at the head.
 *)
IMPORT
    IntConvert,
    Interrupts,
    Intrinsics,
    Notices,
    Objects,
    ProgErr,
    ProgErrOutput,
    SYSTEM,
    SysTypes,
    TaskInfo,
    Tasks,
    UnixError;
    
IMPORT
    UnixCsignal,
    UnixCsys_time;


CONST
    moduleName = "TaskTime";

    intVector  = UnixCsignal.SIGALRM;
    sigMask    = Interrupts.blockAll;
	(*
	 * We must block all signals, because we can be called from
	 * an interrupt handler other than the SIGALRM (see def mod).
	 *)

    millisecondsPerTick = 10.0;	   (* This is for a Sun *)

PROCEDURE Resolution(
    ) : REAL;
    BEGIN (* Resolution *)
	
	RETURN millisecondsPerTick;

    END Resolution;


TYPE
    (*  
     * Not that the info field of a task is only used by the task itself,
     * thus we do not need to provide mutual exclusion for this task.
     *)
    Info    = POINTER TO InfoRec;
    InfoRec = RECORD
	next       : Info;	   (* Needed for efficiency in the handler *)
	absSleep   : UnixCsys_time.struct_timeval;   (* When to wake up *)
	task	   : Tasks.Object; (* Used to ready sleeping tasks *)
	inQueue    : BOOLEAN;	   (* Are we in the sleepQueue *)
    END;

VAR
    infoMgr    : Objects.Manager; (* Technically,  this doesn't have to
				     an "object", but was easier for now... *)
    infoID     : TaskInfo.Object; (* Identification of our task information
				     block type. *)
    sleepQueue : Info;
	(*
	 * Queue of info records ordered in least to most time to sleep.
	 * If a task inserts itself as the head of the queue or a task 
	 * deletes itself from the head of the queue, the new interval timer
	 * value must be set.
	 *)

VAR
    itimer : UnixCsys_time.struct_itimerval;	(* "it_interval" always 0 *)
    now    : UnixCsys_time.struct_timeval;

PROCEDURE SetTimer;
    (*
     * Looks at the head of the timer queue and sets the interval 
     * to be the value of the timer.   
     *
     * ASSUMES: "now" has been set.
     *)
    BEGIN (* SetTimer *)

	IF sleepQueue = NIL THEN
	    itimer.it_value.tv_sec := 0;
	    itimer.it_value.tv_usec := 0;	(* Turn off the timer *)

	    (* Are we after "now"? *)
	ELSIF Compare( now, sleepQueue^.absSleep ) = Intrinsics.less THEN
	    WITH sleepQueue^.absSleep DO
		itimer.it_value.tv_sec := tv_sec - now.tv_sec;
		itimer.it_value.tv_usec := tv_usec - now.tv_usec;
		IF itimer.it_value.tv_usec < 0 THEN
		    INC( itimer.it_value.tv_usec, 1000000 );
		    DEC( itimer.it_value.tv_sec );
		END;
	    END;
	ELSE
	    (* Sleep for a tick *)
	    itimer.it_value.tv_sec := 0;
	    itimer.it_value.tv_usec := 1;
	END;

	IF UnixCsys_time.setitimer( UnixCsys_time.ITIMER_REAL, 
				    SYSTEM.ADR( itimer ), NIL ) = -1 THEN
	    SysTimeError;
	END;

    END SetTimer;


PROCEDURE Compare(
    left  : UnixCsys_time.struct_timeval;
    right : UnixCsys_time.struct_timeval
    )     : Intrinsics.CompareResults;
    (*
     * This procedure is optimized for the normal case, that is, 
     * the two values are probably not equal.
     *)
    BEGIN (* Compare *)
    
	IF left.tv_sec > right.tv_sec THEN
	    RETURN Intrinsics.greater;
	ELSIF left.tv_sec < right.tv_sec THEN
	    RETURN Intrinsics.less;
	ELSIF left.tv_usec > right.tv_usec THEN
	    RETURN Intrinsics.greater;
	ELSIF left.tv_usec < right.tv_usec THEN
	    RETURN Intrinsics.less;
	END;
	
	RETURN Intrinsics.equal;
	
    END Compare;

    
PROCEDURE Sleep( 
    timeout : Units 
    );
    (*
     * Get the task information.  Gets the current time and adds timeout
     * to it.  If the task
     *)
    VAR
	toInsert : Info;
	prevInfo : Info;
	oldMask  : BITSET;
    BEGIN (* Sleep *)

	(* Get the toInsert first just *)
	toInsert := TaskInfo.GetCurrent( infoID );


	(* Start critical section here, because we get "now" *)
	oldMask := UnixCsignal.sigblock( sigMask );

	    WITH toInsert^ DO
		IF timeout = 0 THEN
		    timeout := 1;
		END;

		IF UnixCsys_time.gettimeofday( SYSTEM.ADR( now ), NIL ) = -1
		  THEN
		    SysTimeError;
		END;

		absSleep.tv_sec := SysTypes.Int( SysTypes.Card( now.tv_sec )
					    + timeout DIV 1000 );
		absSleep.tv_usec := SysTypes.Int( SysTypes.Card( now.tv_usec ) 
				    + ( timeout MOD 1000 ) * 1000 );
		IF absSleep.tv_usec >= 1000000 THEN
		    DEC( absSleep.tv_usec, 1000000 );
		    INC( absSleep.tv_sec );
		END;

	    END; (* WITH *)

	
	    (* Insert in the queue *)
	    IF sleepQueue = NIL THEN
		(* Only one in the list *)
		sleepQueue := toInsert;
		toInsert^.next := NIL;

		SetTimer;

	    ELSIF Compare( toInsert^.absSleep, sleepQueue^.absSleep ) 
		  = Intrinsics.less THEN
		(* Insert at the head *)
		WITH toInsert^ DO
		    next       := sleepQueue;
		    sleepQueue := toInsert;
		END; (* WITH *)
		
		SetTimer;

	    ELSE (* Insert after the head *)

		prevInfo := sleepQueue;
		(*
		 * Go through the loop subtracting the time that the
		 * to sleep for all the tasks which will sleep before
		 * the task we are going to insert.
		 *)
		LOOP 
		    WITH prevInfo^ DO
			IF next = NIL THEN
			    EXIT;	 (* Insert at the tail *)
			END;
			IF Compare( toInsert^.absSleep, next^.absSleep )
			   = Intrinsics.less THEN
			    (* Insert before prevInfo^.next. *)
			    EXIT;
			END;
			prevInfo := prevInfo^.next;
		    END; (* WITH *)
		END; (* LOOP *)

		(* Insert somewhere in the list *)
		toInsert^.next := prevInfo^.next;
		prevInfo^.next := toInsert;

	    END; (* IF *)

	    (* Nothing to do but wait to be woken up! *)
	    toInsert^.inQueue := TRUE;
	    REPEAT
		Tasks.Suspend;
	    UNTIL NOT toInsert^.inQueue;

	oldMask := UnixCsignal.sigsetmask( oldMask );

    END Sleep;


PROCEDURE WakeUp( 
    sleepingTask : Tasks.Object 
    );
    (*
     * To wake up an arbitrary task, we must get its information.  If
     * it isn't sleeping, then there is nothing to do.
     *)
    VAR
	toDelete : Info;
	prevInfo : Info;
	oldMask  : BITSET;
    BEGIN (* WakeUp *)

	oldMask := UnixCsignal.sigblock( sigMask );

	    (* 
	     * Since we disable interrupts, we can get the information
	     * without Disallowing preemption.
	     *)
	    toDelete := TaskInfo.Get( infoID, sleepingTask );

	    WITH toDelete^ DO
		(* Is the task really sleeping? *)
		IF inQueue THEN
		    (* 
		     * Delete from the list.
		     * Is toDelete the head of the list? 
		     *)
		    IF sleepQueue = toDelete THEN
			sleepQueue := next;
			IF UnixCsys_time.gettimeofday( SYSTEM.ADR( now ), 
						       NIL ) = -1 THEN
			    SysTimeError;
			END;
			SetTimer;    (* We have a new head *)
		    ELSE
			(* Must find somewhere in the list *)
			prevInfo := sleepQueue;
			WHILE prevInfo^.next # toDelete DO
			    prevInfo := prevInfo^.next;
			END;
			prevInfo^.next := next;	(* Delete from list *)
		    END;

		    (* 
		     * We must tell the task it is ok to continue and
		     * we must wake up the task, because it is sleeping.
		     *)
		    inQueue := FALSE;
		    Tasks.Ready( sleepingTask );
		END;
	    END; (* WITH *)
	    
	oldMask := UnixCsignal.sigsetmask( oldMask );

    END WakeUp;


PROCEDURE InterruptThread( 
    DONTCARE : SysTypes.ANYPTR 
    );
    (*
     * Interrupts are disabled the whole time.  We check the head of
     * the list for being empty or being ready to wakeup.  Readies
     * all tasks at the head of the queue which are before now.
     *)
    BEGIN (* InterruptThread *)

	(*
	 * Ready tasks until the queue is empty or there are no more
	 * tasks which are ready to wakeup.
	 *)
	IF UnixCsys_time.gettimeofday( SYSTEM.ADR( now ), NIL ) = -1 THEN
	    SysTimeError;
	END;

	LOOP
	    IF sleepQueue = NIL THEN
		RETURN;	   (* No need to set the timer *)
	    END;

	    WITH sleepQueue^ DO
	    
		IF Compare( now, absSleep ) = Intrinsics.less THEN
		    EXIT;
		END;

		Tasks.Ready( task );
		inQueue    := FALSE;	(* now deleted from queue *)
		sleepQueue := next;
	    END; (* WITH *)
	END;
	
	SetTimer;

    END InterruptThread;


PROCEDURE Birth( 
    newTask : Tasks.Object 
    )	    : SysTypes.ANYPTR;
    (*
     * Allocate a new information block for the specified task and
     * initialize.
     *)
    VAR
	info : Info;
    BEGIN (* Birth *)

	Objects.Allocate( infoMgr, info );
	WITH info^ DO
	    next     := NIL;	      (* Not so important to initialize *)
	    absSleep := zeroAbsolute; (* Not so important to initialize *)
	    task     := newTask;
	    inQueue  := FALSE;
	END;

	RETURN info;	(* tell 'em about it *)

    END Birth;


PROCEDURE Death( 
    deadTask : Tasks.Object;
    infoAdr  : SysTypes.ANYPTR 
    );
    BEGIN (* Death *)
	
	(*
	 * The task can only die if it falls off of its control thread so
	 * we don't have any queues to muck with.
	 *)
	Objects.Deallocate( infoMgr, infoAdr );

    END Death;


PROCEDURE Print( 
    infoAdr : SysTypes.ANYPTR 
    );
    (*
     * We want to print the total amount of time the task has to
     * sleep.  This means we must go through the whole queue of sleeping
     * tasks summing up the number of ticks until we find the task which
     * is sleeping.  Note that we really don't know if a task is sleeping
     * or not unless it is in the queue.
     *)
    VAR
	info      : Info;
	intString : ARRAY [ 0 .. SysTypes.bitsPerInt ] OF CHAR;
	timeout   : SysTypes.Int;	   (* Can be negative *)
	DONTCARE  : BOOLEAN;
	oldMask	  : BITSET;
    BEGIN (* Print *)

	ProgErrOutput.WriteString( "Sleep: " );
	info := infoAdr;
	oldMask := UnixCsignal.sigblock( sigMask );
	    IF UnixCsys_time.gettimeofday( SYSTEM.ADR( now ), NIL ) = -1 THEN
		SysTimeError;
	    END;
	    IF info^.inQueue THEN
		WITH info^.absSleep DO
		    timeout := ( tv_sec - now.tv_sec ) * 1000
				    + ( tv_usec - now.tv_usec ) DIV 1000; 
		END;
	    ELSE
		timeout := 0;
	    END;
	oldMask := UnixCsignal.sigsetmask( oldMask );

	(* Convert the timeout to a string. *)
	DONTCARE := IntConvert.ToString( timeout, 0, intString );
	ProgErrOutput.WriteString( intString );

    END Print;

PROCEDURE SysTimeError;
    BEGIN (* SysTimeError *)
	UnixError.PrintMessage( UnixError.Get(), moduleName );
	ProgErr.Terminate( "TaskTime: error calling Unix time functions." );
    END SysTimeError;

VAR
    handler      : Interrupts.Object;	(* Only used for creation and
					   destruction *)
PROCEDURE Terminate( 
    mode : SysTypes.ANYPTR
    );
    BEGIN (* Terminate *)
	
	(* always shut off the interrupt handler *)
	Interrupts.Destroy( handler );

	IF mode = Notices.normalTermination THEN
	    TaskInfo.Destroy( infoID );
	    Objects.DestroyManager( infoMgr );
	END;

    END Terminate;


VAR
    zeroAbsolute : UnixCsys_time.struct_timeval;
BEGIN (* TaskTime *)

    zeroAbsolute.tv_sec := 0;    
    zeroAbsolute.tv_usec := 0;
    itimer.it_interval := zeroAbsolute;

    (* 
     * Note that the interrupt handler must be initialized
     * after the TaskInfo is created.
     *)
    Objects.CreateManager( infoMgr, SYSTEM.TSIZE( InfoRec ), moduleName );
    sleepQueue := NIL;

    TaskInfo.Create( infoID, Birth, Death, Print );

    Interrupts.Create( handler, InterruptThread, Interrupts.DONTCARE,
		       intVector, Interrupts.doNotChain );

    Notices.Register( Notices.GetTerminationNotice(), Terminate );

END TaskTime.
