(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tInt1;
(*
 * Tests a single interrupt.
 *)
IMPORT
    Tasks,	TaskConsts, 	ProgErrOutput, 	ProgArgs,
    SYSTEM,	ProgErr,	Interrupts;	

@IF SunM2 THEN
    IMPORT
	UnixCsignal;
    VAR
	DONTCARE : INTEGER;
@END (* SunM2 *)


PROCEDURE Thread( cardAdr : SYSTEM.ADDRESS );
    VAR
	cardPtr : POINTER TO CARDINAL;
    BEGIN (* Thread *)
	cardPtr := cardAdr;
	DEC( cardPtr^ );
	@IF SunM2 THEN
	    ProgErrOutput.WriteString( " hello " );
	@END (* SunM2 *)
    END Thread;
    
CONST
    @IF LogitechM2 THEN
	intVector1 = 250;
    @END (* LogitechM2 *)
    @IF SunM2 THEN
	intVector1 = UnixCsignal.SIGUSR1;
    @END (* SunM2 *)
VAR
    numInterrupts : CARDINAL;
    handler : Interrupts.Object;
    check : CARDINAL;

BEGIN (* tInt1 *)

    numInterrupts := 1;
    ProgArgs.RegisterCardHandler( 'n', ProgArgs.DefaultCardHandler,
				  SYSTEM.ADR( numInterrupts ) );
    IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError ) THEN
	ProgErr.Terminate( "Usage: tInt1 /n=#ints" );
    END;

    ProgErrOutput.WriteString( "Creating handler" );
    ProgErrOutput.WriteLn;
    Interrupts.Create( handler, Thread, SYSTEM.ADR( numInterrupts ),
		       intVector1, Interrupts.doNotChain );
    WHILE numInterrupts # 0 DO
	check := numInterrupts;
	ProgErrOutput.WriteString( "Call " );
	@IF LogitechM2 THEN
	    SYSTEM.SWI( intVector1 );
	@END
	@IF SunM2 THEN
	    DONTCARE := UnixCsignal.kill( 0, intVector1 );
	@END
	ProgErrOutput.WriteString( "Return" );
	ProgErrOutput.WriteLn;
	IF numInterrupts = check THEN
	    ProgErr.Terminate( "wooops" );
	END;
    END;

    Interrupts.Destroy( handler );

    ProgErrOutput.WriteString( "Handler destroyed" );
    ProgErrOutput.WriteLn;

END tInt1.
