(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE IntTasks;
(*
 * Tests interrupted tasks.  It attempts to test all of the paths
 * through the interrupt handler envelope.
 *)
IMPORT
    Tasks,	TaskConsts, 	ProgErrOutput, 	ProgArgs,
    SYSTEM,	ProgErr,	Interrupts;

@IF SunM2 THEN
    IMPORT
	UnixCsignal;
@END

VAR
    pleaseDie   : BOOLEAN;
    wakeups     : CARDINAL;	
    setPriority : BOOLEAN; (* Use SetPriority instead of ready/suspend *)

CONST
    highPriority = TaskConsts.defaultPriority + 1;
    lowPriority  = TaskConsts.defaultPriority - 1;

PROCEDURE Ping( DONTCARE : SYSTEM.ADDRESS );
    VAR
	me : Tasks.Object;
    BEGIN (* Ping *)
	
	me := Tasks.GetCurrent();

	WHILE NOT pleaseDie DO
	    IF setPriority THEN
		Tasks.SetPriority( me, lowPriority );
	    ELSE
		Tasks.Suspend;
	    END;
	    INC( wakeups );
	END;

    END Ping;

VAR
    ping    : Tasks.Object;

CONST
@IF LogitechM2 THEN
	intVector = 250;
@END (* LogitechM2 *)
@IF SunM2 THEN
	intVector = UnixCsignal.SIGUSR1;
@END (* SunM2 *)
    
TYPE
    ObjectRec = RECORD
	handler : Interrupts.Object;
    END;

CONST	
    (* Instructions to Thread *)
    readyTask     = 0;	
    doNothing     = 1;		
    acknowledge   = 2;


VAR
    theInstruction : CARDINAL;
PROCEDURE Thread( DONTCARE : SYSTEM.ADDRESS );
    BEGIN (* Thread *)

	CASE theInstruction OF
	    readyTask:
		IF setPriority THEN
		    Tasks.SetPriority( ping, highPriority );
		ELSE
		    Tasks.Ready( ping );
		END;
	    |
	    doNothing:
		(* Ho Hum... *)
	END; (* CASE *)

	theInstruction := acknowledge;

    END Thread;
    

PROCEDURE CauseInterrupt( instruction : CARDINAL );
    VAR
	tmp : CARDINAL;
    BEGIN (* CauseInterrupt *)

	theInstruction := instruction;
	@IF LogitechM2 THEN
	    SYSTEM.SWI( intVector );
	@END
	@IF SunM2 THEN
	    tmp := UnixCsignal.kill( 0, intVector );
	@END
	IF theInstruction # acknowledge THEN
	    ProgErr.Terminate( "Interrupt not acknowledged." );
	END;

    END CauseInterrupt;

PROCEDURE AssertWakeups( value : CARDINAL );
    BEGIN (* AssertWakeups *)

	IF value # wakeups THEN
	    ProgErr.Terminate( "Task awoken too many times." );
	END;

    END AssertWakeups;


VAR
    handler  : Interrupts.Object;
    tmp      : CARDINAL;

BEGIN (* IntTasks *)

    pleaseDie := FALSE;
    wakeups   := 0;
    setPriority := FALSE;
    ProgArgs.RegisterBoolHandler( 's', ProgArgs.DefaultBoolHandler,
				  SYSTEM.ADR( setPriority ) );
    IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError ) THEN
	ProgErr.Terminate( "Usage: IntTasks /s" );
    END;
    IF setPriority THEN
	ProgErrOutput.WriteString( "Using SetPriority in place of Ready." );
	ProgErrOutput.WriteLn;
    END;

    Tasks.Create( ping, "Ping", Ping, Tasks.DONTCARE, highPriority,
		  TaskConsts.GetDefaultStackSize() );

    Interrupts.Create( handler, Thread, Interrupts.DONTCARE,
		       intVector, Interrupts.doNotChain );
    
    ProgErrOutput.WriteString( 
	"Causing interrupt that does nothing in disallowed section."  );
    ProgErrOutput.WriteLn;
    Tasks.DisallowPreemption;
	
	CauseInterrupt( doNothing );

	AssertWakeups( 0 );

    Tasks.AllowPreemption;

    AssertWakeups( 0 );

    ProgErrOutput.WriteString( 
	"Causing interrupt that readies task in disallowed section."  );
    ProgErrOutput.WriteLn;
    Tasks.DisallowPreemption;
	
	CauseInterrupt( readyTask );
	AssertWakeups( 0 );

    Tasks.AllowPreemption;
    AssertWakeups( 1 );

    ProgErrOutput.WriteString( 
	"Causing interrupt that readies task in allowed section."  );
    ProgErrOutput.WriteLn;
    CauseInterrupt( readyTask );
    AssertWakeups( 2 );

    ProgErrOutput.WriteString( 
	"Causing interrupt that causes termination."  );
    ProgErrOutput.WriteLn;

    pleaseDie := TRUE;
    CauseInterrupt( readyTask );
    AssertWakeups( 3 );

    ProgErrOutput.WriteString( "Destroying the interrupt handler." );
    ProgErrOutput.WriteLn;
    Interrupts.Destroy( handler );

END IntTasks.
