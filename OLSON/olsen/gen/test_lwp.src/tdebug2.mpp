(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tdebug2;
(*
 * 
 *)
IMPORT
    Tasks,	TaskConsts, 	ProgErrOutput, 	ProgArgs,
    TaskDebug,  SYSTEM,  	ProgErr,	Notices,
    TaskNotices,CardConvert,    Interrupts;	
@IF SunM2 THEN
    IMPORT
	UnixCsignal;
@END


CONST
    @IF LogitechM2 THEN
	intVector = 1BH;
    @END
    @IF SunM2 THEN
	intVector = UnixCsignal.SIGINT;
    @END
    waitPrio  = TaskConsts.defaultPriority-1;


VAR
    printTaskInformation  : BOOLEAN;
    main                  : Tasks.Object;
    mode                  : CARDINAL;

   

 PROCEDURE WriteCard(outputnumber    : CARDINAL);

 (*
  * Writes Cardinal numbers via ProgErrOutput to the
  * standard output
  *
  *)


  VAR
     result  : ARRAY[1..8] OF CHAR;

  BEGIN
      
      IF NOT CardConvert.ToString(outputnumber,10,6,result) THEN
	 ProgErr.Terminate("couldn't convert cardinal to string")
      END;
      ProgErrOutput.WriteString(result); 
      ProgErrOutput.WriteLn

  END WriteCard; 
	 


 PROCEDURE IdentifiedStringOutput(message : ARRAY OF CHAR);
 (* 
  * This routine provides a simplified ProgErrOutputWriteString:
  *
  *    1) Writes the message and the name of the caller together 
  *       to the standard output.
  *  
  *    2) Terminates writing automatically with line feed 
  *)


 VAR 
   caller       : TaskConsts.Name;

 BEGIN

     Tasks.GetName(Tasks.GetCurrent(),caller); 
     ProgErrOutput.WriteString(caller);    (* does it work ? *) 
     ProgErrOutput.WriteString(", ");
     ProgErrOutput.WriteString(message);
     ProgErrOutput.WriteLn

 END IdentifiedStringOutput;




PROCEDURE WaitForIR( DONTCARE : SYSTEM.ADDRESS );
    
VAR
    x : INTEGER;
BEGIN  
    
       IF printTaskInformation THEN
	  TaskDebug.PrintAll
       END;

       SetIRMode(mode);	
       ProgErrOutput.WriteString( "Call interrupt routine, " );
       @IF LogitechM2 THEN
	   SYSTEM.SWI( intVector );
	@END
	@IF SunM2 THEN
	    x := UnixCsignal.kill( 0, UnixCsignal.SIGINT );
	@END
       ProgErrOutput.WriteString( "Return from interrupt routine" );
       ProgErrOutput.WriteLn;

END WaitForIR;


PROCEDURE CreateTask;

VAR
    DONTCARE : Tasks.Object;


BEGIN 
    
    main:=Tasks.GetCurrent(); 
    Tasks.Create( DONTCARE,"Wait",WaitForIR,Tasks.DONTCARE, waitPrio,
    TaskConsts.GetDefaultStackSize());
    
    Tasks.SetPriority(Tasks.GetCurrent(),TaskConsts.defaultPriority-5);

END CreateTask;


PROCEDURE SetIRMode(modus  : CARDINAL);

BEGIN
   
    IdentifiedStringOutput(" Interrupt mode :");
    WriteCard(modus);

    CASE modus  OF
     
       1: 
	TaskDebug.SetUserInterruptMode(TaskDebug.doNothingOnUserInterrupt);
        ProgErrOutput.WriteString("did nothing");
        ProgErrOutput.WriteLn;

	|

       2:
	TaskDebug.SetUserInterruptMode(TaskDebug.printOnUserInterrupt);
        ProgErrOutput.WriteString("printed only");
        ProgErrOutput.WriteLn;

	|

       3:
        ProgErrOutput.WriteString("terminate now");
	ProgErrOutput.WriteLn;
	TaskDebug.SetUserInterruptMode(TaskDebug.terminateOnUserInterrupt);
    
    END (* CASE *)

END SetIRMode;




BEGIN (* ------------- MAIN ------------  *)


    printTaskInformation:=FALSE;
    ProgArgs.RegisterBoolHandler( "p", ProgArgs.DefaultBoolHandler,
                                       SYSTEM.ADR( printTaskInformation ) );
    mode:=1; 
    ProgArgs.RegisterCardHandler('m', ProgArgs.DefaultCardHandler,
                                      SYSTEM.ADR(mode));

    IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError ) THEN
	ProgErr.Terminate( "wrong Usage: tdebug2  /m=../p" );
    END;

    CreateTask;

    Notices.Call(TaskNotices.GetExitRequest(),Notices.DONTCARE)
END tdebug2.
