(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tdebug1;
(*  
 *  
 * 
 *)




 IMPORT  
	Tasks,       TaskMonitors,     TaskConsts,     TaskDebug, 
	TaskInfo,    ProgErrOutput,    ProgArgs,       ProgErr, 
        TaskTime,    TaskNotices,      Notices,        CardConvert,
	Objects,     TaskMessages,     SYSTEM,	       Intrinsics,
	Strings;



 CONST
	termPrio		    = TaskConsts.defaultPriority - 1;



 VAR 
        printTaskInformation        : BOOLEAN;
	mode                        : CARDINAL;



 PROCEDURE WriteCard(outputnumber    : CARDINAL);

 (*
  * Writes Cardinal numbers via ProgErrOutput to the
  * standard output
  *
  *)


  VAR
     result  : ARRAY[1..8] OF CHAR;

  BEGIN
      
      IF NOT CardConvert.ToString(outputnumber,10,6,result) THEN
	 ProgErr.Terminate("couldn't convert cardinal to string")
      END;
      ProgErrOutput.WriteString(result); 
      ProgErrOutput.WriteLn

  END WriteCard; 
	 


 PROCEDURE IdentifiedStringOutput(message : ARRAY OF CHAR);
 (* 
  * This routine provides a simplified ProgErrOutputWriteString:
  *
  *    1) Writes the message and the name of the caller together 
  *       to the standard output.
  *  
  *    2) Terminates writing automatically with line feed 
  *)


 VAR 
   caller       : TaskConsts.Name;

 BEGIN

     Tasks.GetName(Tasks.GetCurrent(),caller); 
     ProgErrOutput.WriteString(caller);     
     ProgErrOutput.WriteString(", ");
     ProgErrOutput.WriteString(message);
     ProgErrOutput.WriteLn

 END IdentifiedStringOutput;



 
PROCEDURE CreateTasks;
 
 VAR
   term :  Tasks.Object;

 
 BEGIN

	IF printTaskInformation THEN
          IdentifiedStringOutput("Creating terminator task")
        END;

	Tasks.Create( term,"Term",Terminator,Tasks.DONTCARE, termPrio,
                       TaskConsts.GetDefaultStackSize());
      
    
 END CreateTasks;
 

PROCEDURE Terminator( DONTCARE : SYSTEM.ADDRESS );
  
    
   BEGIN 

        SetModusAndTerminate(mode)

END Terminator;



PROCEDURE SetModusAndTerminate( modus : CARDINAL );

   

    BEGIN
        
	IdentifiedStringOutput(" Termination modus: ");
        WriteCard(modus);	     
        
	IF printTaskInformation THEN
           TaskDebug.PrintAll
        END;
        
	IF modus = 1 THEN
	    TaskDebug.SetTerminationMode(TaskDebug.doNotPrintOnTermination);
            IdentifiedStringOutput("no print out after termination");
            Tasks.ExitSystem;

	ELSIF modus=2 THEN
	    
	    TaskDebug.SetTerminationMode(TaskDebug.printOnTermination);
            IdentifiedStringOutput("print all out on termination");
            Tasks.ExitSystem
	
	ELSE (*  "modus = 3" *)
            
	    TaskDebug.SetTerminationMode(TaskDebug.printOnAbnormalTermination);
            IdentifiedStringOutput(""); 
	    ProgErr.Terminate("this is an abnormal termination")

	END (* IF *)

END SetModusAndTerminate;



BEGIN    (* ---------------- MAIN --------------*)
    
    printTaskInformation:=FALSE;
    ProgArgs.RegisterBoolHandler( "p", ProgArgs.DefaultBoolHandler,
                                       SYSTEM.ADR( printTaskInformation ) );
    mode:=1; 
    ProgArgs.RegisterCardHandler('m', ProgArgs.DefaultCardHandler,
                                      SYSTEM.ADR(mode));

    IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError ) THEN
           ProgErr.Terminate( "wronge usage..." )
    END; 
    
    CreateTasks;
    IF printTaskInformation THEN 
       IdentifiedStringOutput("Main is dieing ")
    END

END tdebug1.
