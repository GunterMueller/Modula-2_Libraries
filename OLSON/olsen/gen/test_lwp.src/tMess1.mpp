(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tMess1;
IMPORT
    Tasks,	TaskConsts, 	ProgErrOutput, 	ProgArgs,
    SYSTEM,	ProgErr,	TaskMessages,	TaskDebug,
    TaskNotices,		Notices;

VAR
    numPings       : CARDINAL;
    useBigMessages : BOOLEAN;

TYPE
    Message        = ARRAY [ 0 .. 63 ] OF CARDINAL;

PROCEDURE Ping( DONTCARE : SYSTEM.ADDRESS );
    VAR
	sender  : Tasks.Object;
	message : Message;
    BEGIN (* Ping *)

	ProgErrOutput.WriteString( "Ping Running" );
	ProgErrOutput.WriteLn;
	WHILE numPings # 0 DO
	    @IF NOT SpeedMode THEN
		ProgErrOutput.WriteString( "Ping" );
	    @END (* NOT SpeedMode *)
	    IF useBigMessages THEN
		TaskMessages.Receive( sender, message );
	    ELSE
		TaskMessages.Receive( sender, message[ 0 ] );
	    END;
	    IF message[ 0 ] # numPings THEN
		HALT;
	    END;
	    IF numPings = 1 THEN
		TaskDebug.PrintAll;
	    END;
	    DEC( numPings );
	    message[ 0 ] := numPings;
	    IF useBigMessages THEN
		TaskMessages.Reply( sender, message );
	    ELSE
		TaskMessages.Reply( sender, message[ 0 ] );
	    END;
	END;

    END Ping;


PROCEDURE Pong( DONTCARE : SYSTEM.ADDRESS );
    VAR
	ping    : Tasks.Object;
	me      : Tasks.Object;
	request : Message;
	reply   : Message;
    BEGIN (* Pong *)
	
	ProgErrOutput.WriteString( "Pong Running" );
	ProgErrOutput.WriteLn;
	me := Tasks.GetCurrent();
	Tasks.Create( ping, " Ping", Ping, Tasks.DONTCARE, 
		      Tasks.GetPriority( me ) + 1, 
		      TaskConsts.GetDefaultStackSize() );
	WHILE numPings # 0 DO
	    @IF NOT SpeedMode THEN
		ProgErrOutput.WriteString( "Pong" );
		ProgErrOutput.WriteLn;
	    @END (* NOT SpeedMode *)
	    request[ 0 ] := numPings;
	    IF useBigMessages THEN
		TaskMessages.Send( ping, request, reply );
	    ELSE
		TaskMessages.Send( ping, request[ 0 ], reply[ 0 ] );
	    END;
	    IF numPings # reply[ 0 ] THEN
		HALT;
	    END;
	END;

    END Pong;

VAR
    pong : Tasks.Object;
BEGIN (* tMess1 *)

    useBigMessages := FALSE;
    ProgArgs.RegisterBoolHandler( 'big', ProgArgs.DefaultBoolHandler,
				  SYSTEM.ADR( useBigMessages ) );
    numPings := 1;
    ProgArgs.RegisterCardHandler( 'n', ProgArgs.DefaultCardHandler,
				  SYSTEM.ADR( numPings ) );
    IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError ) THEN
	ProgErr.Terminate( "Usage: tMess1 /n=#msgs /big" );
    END;

    @IF SpeedMode THEN
	ProgErrOutput.WriteString( "Running in SpeedMode" );
	ProgErrOutput.WriteLn;
    @END (* SpeedMode *)

    Tasks.Create( pong, "Pong", Pong, Tasks.DONTCARE, 
		  Tasks.GetPriority( Tasks.GetCurrent() ) + 1, 
		  TaskConsts.GetDefaultStackSize() );
    
    ProgErrOutput.WriteString( "Exiting" );
    ProgErrOutput.WriteLn;

    (* For TaskDebug *)
    Notices.Call( TaskNotices.GetExitRequest(), Notices.DONTCARE );

END tMess1.
