(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tMon4;
(*
 * This module is the same as tMon9 with one exeption in PROCEDURE Producer. 
 * Task producer modifies its one priority: Is that possible ?
 *
 * (Rob: where is the module TaskControl ?)
 *)


 IMPORT  
	Tasks,      TaskMonitors,     TaskConsts,     TaskDebug, 
	TaskInfo,   ProgErrOutput,    ProgArgs,       ProgErr, 
        Notices,    TaskNotices,      SYSTEM; 


 VAR 
	prod                 :    Tasks.Object;
        monitor              :    TaskMonitors.Object;
        iterations           :    CARDINAL;
        printTaskInformation :    BOOLEAN;



PROCEDURE ProtectCriticalData(indata          :CARDINAL; 
                               VAR outdata    :CARDINAL);     
     (* Catch or modify data inside the monitor and give it 
      * back to the requesting task. Here we install our
      * test monitor for preventing data of uncontroled 
      * changes.
      * 
      * INPUT:
      *	    indata, given by Producer; used for overwriting
      *	    the critical buffer
      * 
      * OUTPUT:
      *     outdata, data read by any consumerx
      *)

 VAR 
      buffer   :CARDINAL;


 BEGIN
     
     TaskMonitors.Enter(monitor);
     buffer:=indata;                (* CRITICAL SECTION *)
     outdata:=buffer;
     IF printTaskInformation THEN
	TaskDebug.PrintAll
     END; 
     TaskMonitors.Exit(monitor)

 END ProtectCriticalData; 



  PROCEDURE Producer( DONTCARE : SYSTEM.ADDRESS );
       (* TASK
	* ----
	* This guy simulates the delivery of new data modifying  
	* shared data inside ProtectCriticalData. 
        *)
 

   VAR 
	backdata, newdata  : CARDINAL;
        i                  : CARDINAL;
        me                 : Tasks.Object;

   BEGIN
       me:=Tasks.GetCurrent(); 
       FOR i:=1 TO iterations DO 
          
	  backdata:=0;       (* Initialize variable *)
          newdata:=100;      (* why not ? *)
          ProtectCriticalData(newdata,backdata);
          Tasks.SetPriority(me,Tasks.GetPriority(me) + 4);  (* MODIFCATION *)
          ProgErrOutput.WriteString("Task Producer has modified its prio.");
          ProgErrOutput.WriteLn;

	END; (* FOR *)
        IF printTaskInformation THEN
	   TaskDebug.PrintAll 
        END

   END Producer;




 PROCEDURE IntegrateArgs(VAR iteration            : CARDINAL;
                         VAR printTaskInformation : BOOLEAN);
     
     (* Integrates all arguments set at the time you call this module.
      * This Procedure makes it possible that you use the testprogram
      * just like a UNIX command : 
      *          	    tMon1 [/i=# iterations] [/p]
      *
      *)

 BEGIN
     
     iteration:=1;       (* default iterations *)
     ProgArgs.RegisterCardHandler('i', ProgArgs.DefaultCardHandler,
				       SYSTEM.ADR(iteration));
     printTaskInformation:=FALSE;
     ProgArgs.RegisterBoolHandler( "p", ProgArgs.DefaultBoolHandler,
				    SYSTEM.ADR( printTaskInformation ) );

     IF NOT ProgArgs.Parse( ProgArgs.stopOnFirstError) THEN
	 ProgErr.Terminate( "wrong Usage!");
     END
 
 END IntegrateArgs;



 PROCEDURE FirstExperiment;

     (* Simple monitor test
      *
      * Create Task Producer, give her a high priority, ready Task 
      *
      *) 

 BEGIN
 
      (* Task "Producer" creation phase *) 
      Tasks.Create(prod,"Prod",Producer,Tasks.DONTCARE, 
	  TaskConsts.defaultPriority+1, TaskConsts.GetDefaultStackSize());

 END FirstExperiment;
 
 
 PROCEDURE InstallMonitor;

     (* Initializes the monitor and switches to the experiment 
      *
      *)

 BEGIN

    TaskMonitors.Create(monitor,"tMonitor");   
    FirstExperiment;
    TaskMonitors.Destroy(monitor); 
   
 END InstallMonitor;



        (*  --------  MAIN OF t4  -------- *)
BEGIN
    IntegrateArgs(iterations,printTaskInformation);    (* control user input *)
    InstallMonitor;     
    Notices.Call(TaskNotices.GetExitRequest(),Notices.DONTCARE)
END tMon4.
