(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE TestCardConv; 

IMPORT 
    CardConvert,    Objects,       SYSTEM,     Chars,    
    TestIO,         TestSystem,    StringLib,
    GenTestIO;

TYPE
    PointerToData = POINTER TO DataRec;
    DataRec = RECORD
		  Source,
		  Target,
		  Result: StringLib.string;
		  SourceBase,
		  ResultBase: Chars.Bases;
		  Num, 
		  Width: CARDINAL; 
              END;

(* ---------------------------------------------------------------------- *)
(* Test construction:                                                     *)
(* ---------------------------------------------------------------------- *)
PROCEDURE ToString( Num, Width: CARDINAL; Base: Chars.Bases; 
		    VAR String: StringLib.string ): BOOLEAN;

    BEGIN
	WITH String DO CASE Size OF
	    StringLib.short:
		RETURN CardConvert.ToString( Num, Base, Width,
					     ShortString )
            |
	    StringLib.normal:
		RETURN CardConvert.ToString( Num, Base, Width,
					     NormalString )
            |
	    StringLib.long:
		RETURN CardConvert.ToString( Num, Base, Width,
					     LongString )
            
	END;    (* case Size... *)    
        END;    (* with Result... *)

    END ToString;
(* ---------------------------------------------------------------------- *)
PROCEDURE FromString( Str: StringLib.string; Base: Chars.Bases; 
		      VAR Num: CARDINAL ): BOOLEAN;

    BEGIN
	WITH Str DO CASE Size OF
	    StringLib.short:
		RETURN CardConvert.FromString( ShortString, Base, Num )
            |
	    StringLib.normal:
		RETURN CardConvert.FromString( NormalString, Base, Num )
            |
	    StringLib.long:
		RETURN CardConvert.FromString( LongString, Base, Num )
            
	END;    (* case Size... *)    
        END;    (* with Str... *)

    END FromString;
(* ---------------------------------------------------------------------- *)
PROCEDURE Test1( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: PointerToData;

    BEGIN 
	Ptr:= Data;
        WITH Ptr^ DO 
	    IF NOT FromString( Source, SourceBase, Num ) THEN
		Msg:= CardConvertSyntax;
		RETURN FALSE;
            END;
	    IF NOT ToString( Num, Width, ResultBase, Result ) THEN
		Msg:= TooShort;
		RETURN FALSE;
            END;
        END;    (* with Ptr^ *)
	RETURN TRUE;

    END Test1; 
(* ---------------------------------------------------------------------- *)
PROCEDURE WriteResults( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
                      : BOOLEAN;

    VAR
	Ptr: PointerToData;

    BEGIN
	TestIO.WriteLn( GenTestIO.GetErrOutput() );
	Ptr:= Data;
	WITH Ptr^ DO
	    StringLib.WriteResult( "Result: ", Result );
        END;
	RETURN TRUE;

    END WriteResults;
(* ---------------------------------------------------------------------- *)
CONST
    ExpectedResult = 8; 
    AdjustedResult = 9;
    CardConvertSyntax = 10;
    TooShort = 11;
    FalseResult = 12;
(* ---------------------------------------------------------------------- *)
PROCEDURE CompareResults( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
                        : BOOLEAN;
    VAR
	Ptr: PointerToData;

    BEGIN
	Ptr:= Data;
	WITH Ptr^ DO
	    CASE StringLib.CompareStrings( Target, Result ) OF
		StringLib.equal: 
		    Msg:= ExpectedResult;
                |
		StringLib.adjusted: 
		    Msg:= AdjustedResult;
                |
		StringLib.nomatch: 
		    Msg:= FalseResult;
		    RETURN FALSE;
            END;    (* case Compare... *)
        END;
	RETURN TRUE;

    END CompareResults;
(* ---------------------------------------------------------------------- *)
(* Test data collector:                                                   *)
(* ---------------------------------------------------------------------- *)
PROCEDURE GetInfo( Data: TestSystem.dataType; 
		   VAR Msg: TestIO.ErrMsg ): BOOLEAN;

    VAR
	DataPtr: PointerToData;

    (* ------------------------------------------------------------------ *)
    PROCEDURE GetBase( VAR Base: Chars.Bases; Name: ARRAY OF CHAR;
		       VAR Msg: TestIO.ErrMsg ): BOOLEAN;

	VAR
	    BaseStr: ARRAY[ 0.. 20 ] OF CHAR;

	BEGIN
	    LOOP
		IF NOT TestIO.GetString( BaseStr, Name, Msg ) THEN
		    RETURN FALSE;
		END;
		IF CAP( BaseStr[ 0 ] ) = "H" THEN  
		    Base:= 16;
		    EXIT;
		ELSIF CAP( BaseStr[ 0 ] ) = "D" THEN   
		    Base:= 10;
		    EXIT;
		ELSE
		    IF GenTestIO.IsInteractive( GenTestIO.GetInput() ) THEN
			TestIO.Write( GenTestIO.GetErrOutput(), 
			  "  hex or decimal only !!!" );
			TestIO.WriteLn( GenTestIO.GetErrOutput() );
                    ELSE
			Msg:= TestSystem.WrongData;
			RETURN FALSE;
		    END;
		END;
            END;    (* loop *)
	    RETURN TRUE;

	END GetBase;
    (* ------------------------------------------------------------------ *)
    PROCEDURE GetWidth( VAR Width: CARDINAL; Name: ARRAY OF CHAR;
			VAR Msg: TestIO.ErrMsg ): BOOLEAN;

	VAR
	    WidthStr: ARRAY[ 0..20 ] OF CHAR; 

	BEGIN
	    LOOP
		IF NOT TestIO.GetString( WidthStr, Name, Msg ) THEN
		    RETURN FALSE;
		END;
		IF ( WidthStr[ 0 ] = "2" ) AND ( WidthStr[ 1 ] = 0C ) THEN  
		    Width:= 2;
		    EXIT;
		ELSIF ( WidthStr[ 0 ] = "1" ) AND 
		  ( WidthStr[ 1 ] = "0" ) THEN   
		    Width:= 10;
		    EXIT;
		ELSIF ( WidthStr[ 0 ] = "2" ) AND 
		  ( WidthStr[ 1 ] = "0" ) THEN   
		    Width:= 20;
		    EXIT;
		ELSE
		    IF GenTestIO.IsInteractive( GenTestIO.GetInput() ) THEN
			TestIO.Write( GenTestIO.GetErrOutput(), 
			  "  2, 10 or 20 only !!! " );
			TestIO.WriteLn( GenTestIO.GetErrOutput() );
                    ELSE
			Msg:= TestSystem.WrongData;
			RETURN FALSE;
		    END;
		END;
            END;    (* loop *)
	    RETURN TRUE;

	END GetWidth;
    (* ------------------------------------------------------------------ *)
(* ---------------------------------------------------------------------- *)
    BEGIN
	DataPtr:= Data; 
        WITH DataPtr^ DO
	    IF NOT StringLib.GetString( Source, 
					"Source ( cardinal )", " ",
					StringLib.normalDefault, Msg )
            THEN
		Msg:= TestSystem.WrongData; 
		RETURN FALSE 
            END;
	    IF NOT GetBase( SourceBase, 
	      "Base of the source ( decimal, hex )", Msg ) 
            THEN 
		Msg:= TestSystem.WrongData; 
		RETURN FALSE;
            END;
	    IF NOT StringLib.GetString( Target, 
		                        "Expected result ( cardinal )", " ", 
		                        StringLib.normalDefault, Msg ) 
            THEN
		Msg:= TestSystem.WrongData; 
		RETURN FALSE
            END;
	    IF NOT GetBase( ResultBase, 
	      "Base of the the result ( decimal, hex )", Msg ) 
            THEN
		Msg:= TestSystem.WrongData; 
		RETURN FALSE
            END;
	    IF NOT StringLib.GetSize( Result.Size,
	      "Size of the result ( short (3), normal (41), long (81) )",
		     Msg )
            THEN
		Msg:= TestSystem.WrongData; 
		RETURN FALSE
            END;
	    IF NOT GetWidth( Width, 
	      "Width of the result ( 2, 10, 20 )", Msg ) 
            THEN
		Msg:= TestSystem.WrongData; 
		RETURN FALSE;
            END;
        END;
	RETURN TRUE;

    END GetInfo;
(* ---------------------------------------------------------------------- *)
(* Initialisation of the test bed:                                        *)
(* ---------------------------------------------------------------------- *)
PROCEDURE InitMsgTab;

    BEGIN
        TestIO.AssignMessage( ExpectedResult, 
	  "result identical to source" );
        TestIO.AssignMessage( AdjustedResult, "result adjusted" );	
        TestIO.AssignMessage( CardConvertSyntax, 
			      "CardConvert syntax error" );
        TestIO.AssignMessage( TooShort, 
	  "resultstring too short or width too small" );	
        TestIO.AssignMessage( FalseResult, 
	  "result don't match the expected result" );	

    END InitMsgTab; 
(* ---------------------------------------------------------------------- *) 

VAR
    DataMgr: Objects.Manager;

(* ---------------------------------------------------------------------- *) 
PROCEDURE AddComm( Command: ARRAY OF CHAR; 
		   CmdProc: TestSystem.standardProc );

    VAR KnownData: PointerToData; 
    
    BEGIN 
	Objects.Allocate( DataMgr, KnownData ); 
	TestSystem.AddCommand( Command, CmdProc, KnownData ); 
    END AddComm; 
(* ---------------------------------------------------------------------- *) 
PROCEDURE Init; 

BEGIN 
    InitMsgTab; 
    Objects.CreateManager( DataMgr, SYSTEM.TSIZE( DataRec ), "weekend" );
    AddComm( "Quit", TestSystem.Quit );
    AddComm( "ciao", TestSystem.Quit );
    AddComm( "go", Test1 );
    AddComm( "#test1", Test1 );
    AddComm( "test1", Test1 );

END Init;
(* ---------------------------------------------------------------------- *)

BEGIN
    Init;
    TestSystem.RunTest( GetInfo, WriteResults, CompareResults, 
			"CardConvert" ) 

END TestCardConv.    
