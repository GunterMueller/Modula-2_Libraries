(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE TestNameLists; 

IMPORT 
    NameLists,    Objects,    SYSTEM,    CardConvert,
    TestIO,       GenTestIO,  TestSystem,    StringLib;

CONST
    FalseResult = 8;

TYPE
    nameString = ARRAY[ 0..80 ] OF CHAR;
    object = SYSTEM.ADDRESS;
    listRec = RECORD
		  List: NameLists.Object;
		  NumberElements: CARDINAL;
		  TraverseOrder: NameLists.Orderings;
		  FindOrder: NameLists.FindCases;
              END;
    lists = ARRAY[ 0..4 ] OF listRec;
    ops = ( onlyList, nameUsed, orderingsUsed, findCasesUsed, 
	    objectUsed, successUsed, cardinalUsed );
    flagSet = SET OF ops;
    parmsRec = RECORD
		   Flags: flagSet;
		   ListNr: CARDINAL;
		   Name: nameString;
		   HowToTraverse: NameLists.Orderings;
		   HowToFind: NameLists.FindCases;
		   AssociatedObject: object;
               END;
    resRec = RECORD
		 Flags: flagSet;
		 Success: BOOLEAN;
		 Card: CARDINAL;
		 Name: nameString;
		 AssociatedObject: object;
		 HowToTraverse: NameLists.Orderings;
		 HowToFind: NameLists.FindCases;
             END;
    pointerToData = POINTER TO dataRec;
    dataRec = RECORD
		  Parms: parmsRec;
		  Results,
		  ExpectedResults: resRec;
              END;

VAR
    DataMgr: Objects.Manager;
    Lists: lists;

(* ---------------------------------------------------------------------- *)
(* Test construction:                                                     *)
(* ---------------------------------------------------------------------- *)
PROCEDURE Create( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: pointerToData;

    BEGIN 
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO
	    IF Flags # flagSet{ orderingsUsed, findCasesUsed } THEN
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            ELSE WITH Lists[ ListNr ] DO 
		TraverseOrder:= HowToTraverse;
		FindOrder:= HowToFind;
                NameLists.Create( List, TraverseOrder, FindOrder );
	    END;    (* with Lists... *) 
	    END;    (* if Flags *)
	END;    (* with Parms... *)
	END;    (* with Ptr^,,, *)
	RETURN TRUE;

    END Create; 
(* ---------------------------------------------------------------------- *)
PROCEDURE Destroy( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: pointerToData;

    BEGIN 
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO
	    IF Flags # flagSet{ onlyList } THEN
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            ELSE WITH Lists[ ListNr ] DO 
                NameLists.Destroy( List );
	    END;    (* with Lists... *) 
	    END;    (* if Flags *)
	END;    (* with Parms... *)
	END;    (* with Ptr^... *)
	RETURN TRUE;

    END Destroy; 
(* ---------------------------------------------------------------------- *)
PROCEDURE Insert( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: pointerToData;

    BEGIN 
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO
	    IF Flags # flagSet{ nameUsed } THEN
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            ELSE WITH Lists[ ListNr ] DO 
                NameLists.Insert( List, Name, NameLists.DONTCARE );
		INC( NumberElements );
	    END;    (* with Lists... *) 
	    END;    (* if Flags *)
	END;    (* with Parms... *)
	END;    (* with Ptr^... *)
	RETURN TRUE;

    END Insert; 
(* ---------------------------------------------------------------------- *)
PROCEDURE Find( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: pointerToData;

    BEGIN 
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO
	    IF Flags # flagSet{ nameUsed } THEN
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            ELSE WITH Lists[ ListNr ] DO  
                Results.Success:=
		  NameLists.Find( List, Name, NameLists.DONTCARE );
	    END;    (* with Lists... *) 
	    END;    (* if Flags *)
	END;    (* with Parms... *)
	END;    (* with Ptr^... *)
	RETURN TRUE;

    END Find; 
(* ---------------------------------------------------------------------- *)
PROCEDURE Delete( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: pointerToData;

    BEGIN 
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO
	    IF Flags # flagSet{ nameUsed } THEN
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            ELSE WITH Lists[ ListNr ] DO  
		  IF NOT NameLists.Find( List, Name, NameLists.DONTCARE )
		  THEN
		      RETURN FALSE
                  ELSE
		      NameLists.DeleteCurrent( List );
		      DEC( NumberElements );
                  END;
	    END;    (* with Lists... *) 
	    END;    (* if Flags *)
	END;    (* with Parms... *)
	END;    (* with Ptr^... *)
	RETURN TRUE;

    END Delete; 
(* ---------------------------------------------------------------------- *)
PROCEDURE Browse( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
	       : BOOLEAN; 

    VAR
	Ptr: pointerToData;

    BEGIN 
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO
	    IF Flags # flagSet{ onlyList } THEN
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            ELSE WITH Lists[ ListNr ] DO  
		TestIO.Write( GenTestIO.GetErrOutput(), "List contents: " );
		TestIO.WriteLn( GenTestIO.GetErrOutput() );
		NameLists.MakeFirstNext( List );
		WHILE NameLists.Next( List, Name, NameLists.DONTCARE )
		DO
		    TestIO.Write( GenTestIO.GetErrOutput(), Name );
		    TestIO.WriteLn( GenTestIO.GetErrOutput() )
                END;
	    END;    (* with Lists... *) 
	    END;    (* if Flags *)
	END;    (* with Parms... *)
	END;    (* with Ptr^... *)
	RETURN TRUE;

    END Browse; 
(* ---------------------------------------------------------------------- *)
PROCEDURE WriteResults( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
                      : BOOLEAN;

    VAR
	Ptr: pointerToData;

    (* ------------------------------------------------------------------ *)
    PROCEDURE CountElements( List: NameLists.Object ): CARDINAL;

	VAR
	    Counter: CARDINAL;
	    DONTCARE: ARRAY[ 0..20 ] OF CHAR;

	BEGIN
	    Counter:= 0;
	    NameLists.MakeFirstNext( List );
	    WHILE NameLists.Next( List, DONTCARE, NameLists.DONTCARE )
	    DO
		INC( Counter );
	    END;
	    RETURN Counter;

	END CountElements;
    (* ------------------------------------------------------------------ *)
    PROCEDURE WriteSuccess( Success: BOOLEAN );

        BEGIN
	    IF Success THEN
		TestIO.Write( GenTestIO.GetErrOutput(), "TRUE" )
            ELSE
		TestIO.Write( GenTestIO.GetErrOutput(), "FALSE" )
	    END;

        END WriteSuccess;
    (* ------------------------------------------------------------------ *)
    PROCEDURE WriteCard( Card: CARDINAL );

        VAR
	    String: ARRAY[ 0..20 ] OF CHAR;
	    DONTCARE: BOOLEAN;

        BEGIN
	    DONTCARE:= CardConvert.ToString( Card, 10, 5, String );
	    TestIO.Write( GenTestIO.GetErrOutput(), String );

        END WriteCard;
    (* ------------------------------------------------------------------ *)
    BEGIN
	Ptr:= Data;
	WITH Ptr^ DO WITH Parms DO 
	    IF successUsed IN Results.Flags THEN
		TestIO.Write( GenTestIO.GetErrOutput(), "Expected result: " );
		WriteSuccess( ExpectedResults.Success );
		TestIO.WriteLn( GenTestIO.GetErrOutput() );
		TestIO.Write( GenTestIO.GetErrOutput(), "Result: " );
		WriteSuccess( Results.Success );
		TestIO.WriteLn( GenTestIO.GetErrOutput() );
	    END;
	    IF cardinalUsed IN Results.Flags THEN
		ExpectedResults.Card:= Lists[ ListNr ].NumberElements;
		Results.Card:= CountElements( Lists[ ListNr ].List );
		TestIO.Write( GenTestIO.GetErrOutput(), 
		  "Expected number list elements : " );
		WriteCard( ExpectedResults.Card );
		TestIO.WriteLn( GenTestIO.GetErrOutput() );
		TestIO.Write( GenTestIO.GetErrOutput(), 
		  "Number list elements: " );
		WriteCard( Results.Card );
		TestIO.WriteLn( GenTestIO.GetErrOutput() );
	    END;
        END;   (* with Parms... *)
        END;   (* with Ptr^... *)
	RETURN TRUE;

    END WriteResults;
(* ---------------------------------------------------------------------- *)
PROCEDURE CompareResults( Data: TestSystem.dataType; VAR Msg: TestIO.ErrMsg )
                        : BOOLEAN;

    VAR
	Ptr: pointerToData;

    BEGIN
	Ptr:= Data;
	WITH Ptr^ DO
	    IF successUsed IN Results.Flags THEN
		IF Results.Success # ExpectedResults.Success THEN
		    Msg:= FalseResult; 
		    RETURN FALSE
                END;
	    END;
	    IF cardinalUsed IN Results.Flags THEN WITH Parms DO
		IF ExpectedResults.Card # Results.Card THEN
		    Msg:= FalseResult;
		    RETURN FALSE
                END;
	    END;    (* with Parms... *)
	    END;    (* if cardinalUsed... *) 
        END;
	RETURN TRUE;

    END CompareResults;
(* ---------------------------------------------------------------------- *)
(* Test data collector:                                                   *)
(* ---------------------------------------------------------------------- *)
PROCEDURE GetInfo( Data: TestSystem.dataType; 
		   VAR Msg: TestIO.ErrMsg ): BOOLEAN;

    VAR
	DataPtr: pointerToData;
    (* ------------------------------------------------------------------ *)
    PROCEDURE GetFindCases( VAR findCases: NameLists.FindCases;
			    VAR Msg: TestIO.ErrMsg ): BOOLEAN;

	VAR
	   String: ARRAY[ 0..20 ] OF CHAR;

        BEGIN
	    IF NOT TestIO.GetString( String, 
	      "FindCases? ( allUpper, allLower, caseSensi, caseInsensi )",
	      Msg )
            THEN
		RETURN FALSE;
            END;
	    CASE CAP( String[ 4 ] ) OF
	        "I": findCases:= NameLists.caseInsensitive
		|
	        "L": findCases:= NameLists.allLowerCase
		|
	        "S": findCases:= NameLists.caseSensitive
		|
	        "U": findCases:= NameLists.allUpperCase
            ELSE
		Msg:= TestSystem.WrongData;
		RETURN FALSE
            END;     
	    RETURN TRUE;

        END GetFindCases;
    (* ------------------------------------------------------------------ *)
    PROCEDURE GetOrderings( VAR orderings: NameLists.Orderings;
			    VAR Msg: TestIO.ErrMsg ): BOOLEAN;

	VAR
	   String: ARRAY[ 0..20 ] OF CHAR;

        BEGIN
	    IF NOT TestIO.GetString( String, 
	      "Orderings? ( forward, reverse, queue, stack )",
	      Msg )
            THEN
		RETURN FALSE;
            END;
	    CASE CAP( String[ 0 ] ) OF
	        "F": orderings:= NameLists.forwardSorted
		|
	        "Q": orderings:= NameLists.queue
		|
	        "R": orderings:= NameLists.reverseSorted
		|
	        "S": orderings:= NameLists.stack
            ELSE
		Msg:= TestSystem.WrongData;
		RETURN FALSE
            END;     
	    RETURN TRUE;

        END GetOrderings;
    (* ------------------------------------------------------------------ *)
    PROCEDURE GetSuccess( VAR Success: BOOLEAN; Name: ARRAY OF CHAR;
			  Msg: TestIO.ErrMsg ): BOOLEAN;

        VAR
	    String: ARRAY[ 0..20 ] OF CHAR;

        BEGIN
	    IF NOT TestIO.GetString( String, Name, Msg ) THEN
		RETURN FALSE
            END;
	    CASE CAP( String[ 0 ] ) OF
		"F": Success:= FALSE
		|
		"T": Success:= TRUE
            ELSE
		Msg:= TestSystem.WrongData;
		RETURN FALSE;
            END;
	    RETURN TRUE

        END GetSuccess;
    (* ------------------------------------------------------------------ *)
    BEGIN
	DataPtr:= Data; 
        WITH DataPtr^ DO WITH Parms DO
	    IF NOT TestIO.
	      GetCard( ListNr, "Which list? ( 0..4 )", Msg )
	    THEN
		RETURN FALSE
            END;
	    IF orderingsUsed IN Flags THEN 
		IF NOT GetOrderings( HowToTraverse, Msg ) THEN
		    RETURN FALSE
                END;
            END;
	    IF findCasesUsed IN Flags THEN 
		IF NOT GetFindCases( HowToFind, Msg ) THEN
		    RETURN FALSE
                END;
            END;
	    IF nameUsed IN Flags THEN
		IF NOT TestIO.GetString( Name, "Name?", Msg ) THEN
		    RETURN FALSE
                END;
            END;
	    WITH ExpectedResults DO
		IF successUsed IN Flags THEN
		    IF NOT GetSuccess( Success, 
		      "Success? ( true, false )", Msg ) 
		    THEN
			RETURN FALSE
		    END;
		END;
	    END;    (* with ExpectedResults *)
        END;
        END;
	RETURN TRUE;

    END GetInfo;
(* ---------------------------------------------------------------------- *)
(* Initialisation of the test bed:                                        *)
(* ---------------------------------------------------------------------- *)
PROCEDURE InitMsgTab;

    BEGIN
        TestIO.AssignMessage( FalseResult, "false result" );

    END InitMsgTab; 
(* ---------------------------------------------------------------------- *) 
PROCEDURE AddComm( Command: ARRAY OF CHAR; 
		   CmdProc: TestSystem.standardProc; 
		   Flags, ResultsFlags: flagSet );

    VAR 
	KnownData: pointerToData; 
    
    BEGIN 
	Objects.Allocate( DataMgr, KnownData ); 
	WITH KnownData^ DO
	    Parms.Flags:= Flags;
	    Results.Flags:= ResultsFlags;
	    ExpectedResults.Flags:= ResultsFlags;
	END;
	TestSystem.AddCommand( Command, CmdProc, KnownData ); 

    END AddComm; 
(* ---------------------------------------------------------------------- *) 
PROCEDURE Init; 

    VAR
	Index: CARDINAL; 

BEGIN 
    InitMsgTab; 
    Objects.CreateManager( DataMgr, SYSTEM.TSIZE( dataRec ), "weekend" );
    FOR Index:= 0 TO 4 DO
	Lists[ Index ].NumberElements:= 0;
    END;
    AddComm( "Quit", TestSystem.Quit, flagSet{}, flagSet{} );
    AddComm( "ciao", TestSystem.Quit, flagSet{}, flagSet{} );
    AddComm( "create", Create, flagSet{ orderingsUsed, findCasesUsed }, 
	     flagSet{} );
    AddComm( "destroy", Destroy, flagSet{ onlyList }, flagSet{} );
    AddComm( "insert", Insert, flagSet{ nameUsed }, 
	     flagSet{ cardinalUsed } );
    AddComm( "delete", Delete, flagSet{ nameUsed }, 
	     flagSet{ cardinalUsed } );
    AddComm( "find", Find,  flagSet{ nameUsed }, flagSet{ successUsed } );
    AddComm( "browse", Browse, flagSet{ onlyList }, flagSet{} );

END Init;
(* ---------------------------------------------------------------------- *)

BEGIN
    Init;
    TestSystem.RunTest( GetInfo, WriteResults, CompareResults, 
			"NameLists" ) 

END TestNameLists.    
