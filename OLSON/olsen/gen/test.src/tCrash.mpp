(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tCrash;
IMPORT
    ProgErrOutput,	ProgErr, SYSTEM;
@IF IbmPcArch THEN
    IMPORT
	I8086;
@END
@IF Tasks THEN
    IMPORT
	Tasks;
@END
@IF NOT NoNotices THEN
    IMPORT
	Notices;

PROCEDURE TerminateN( mode : SYSTEM.ADDRESS );
    BEGIN
	IF mode = Notices.normalTermination THEN
	    ProgErrOutput.WriteString( "Notices: ok" );
	    ProgErrOutput.WriteLn;
	ELSE
	    ProgErrOutput.WriteString( "Notices: not so good" );
	    ProgErrOutput.WriteLn;
	END;
    END TerminateN;
@END (* NOT NoNotices *)

VAR
    oldHandler : ProgErr.TerminationHandler;
PROCEDURE Terminate( mode : ProgErr.TerminationModes );
    CONST
	intFlag = 9;	(* PSW interrupt bit *)
    VAR
	flags : BITSET;
    BEGIN
	@IF IbmPcArch THEN
	    SYSTEM.CODE( I8086.Pushf );			(* push 16 bits *)
	    SYSTEM.CODE( I8086.Pop + SYSTEM.AX );	(* pop 16 bits *)
	    SYSTEM.GETREG( SYSTEM.AX, flags );	(* get into 16 bit *)
	    IF intFlag IN flags THEN
		ProgErrOutput.WriteString( "Flags: ENABLED" );
	    ELSE
		ProgErrOutput.WriteString( "Flags: DISABLED" );
	    END;
	    ProgErrOutput.WriteLn;
	@END

	IF mode = ProgErr.normalTermination THEN
	    ProgErrOutput.WriteString( "ProgErr: ok" );
	ELSE
	    ProgErrOutput.WriteString( "ProgErr: not so good" );
	END;
	ProgErrOutput.WriteLn;

	oldHandler( mode );

	ProgErr.Terminate( "Noch ein mal" );

    END Terminate;

BEGIN (* tCrash *)
    
    ProgErr.InstallTerminationHandler( Terminate, oldHandler );
    @IF NOT NoNotices THEN
	Notices.Register( Notices.GetTerminationNotice(), TerminateN );
    @END (* NOT NoNotices *)
    ProgErrOutput.WriteString( "hello" );
    ProgErrOutput.WriteLn;

    ProgErr.Terminate( "Later daze"  );

END tCrash.

