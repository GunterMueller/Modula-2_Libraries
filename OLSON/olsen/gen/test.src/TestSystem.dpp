(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE TestSystem; 

(*
 * Provides a support for module testing by creating a list of commands 
 * supplied by client modules. 
 *
 * Data casting:
 * ------------- 
 * This module doesn't know nothing about the intim structure of the data
 * on which client modules operate, otherwise it's generality would be 
 * lost. This forces the intoduction of the procedural type standardProc. 
 * All test commands, plus the three procedural parameters passed to the 
 * procedure "RunTest" have to be of this type, which implies a special 
 * kind of dealing with the casting of the data they operate on.
 * Like:
 *
 *     Like every test command fitting to the module "TestSystem", the 
 *     command "Test" is implemented as a standardProc. 
 *     But the parameter "Data" provides only the adress of the test data
 *     and not their structure. Thus, the client module must have a
 *     casted Type like 
 *     TYPE 
 *         PointerToData = POINTER TO DataRecord;
 *         DataRecord = RECORD
 *                          Whatever = anyType;
 *                          etc...
 *                      END;
 *     and the procedure "Test" must look like
 *    
 *     PROCEDURE Test( Data: dataType; VAR Msg: TestIO.ErrMsg ):
 *                    BOOLEAN;
 * 
 *         VAR
 *             Ptr: PointerToData;
 *        
 *         BEGIN
 *             Ptr:= Data;
 *             WITH Ptr^ DO
 *             ....
 *
 *             END;
 * 
 *     Know, all the procedures of the module being tested doesn't
 *     necesserely have the same parameter list. Thus, the procedure
 *     "Test" will typically need only some fields of the data record,
 *     so some kind of selector ( a set for example ) will determine
 *     which ones. 
 *
 * Messages:
 * --------
 * The procedures of the type standardProc have a VAR parameter Msg
 * being a cardinal subrange 0 to 30. 
 * 1 to 7 are reserved for internal errors like IO - errors, 0 is reserved
 * for the test cases which cause the tested module to blow.
 * 
 *)


IMPORT
    SYSTEM, TestIO;

EXPORT QUALIFIED
    AddCommand,     RunTest,           Quit,
    SyntaxError,    WrongData,       InputError,    CommandError,    
    dataType,       standardProc;

CONST
    SyntaxError = 4;
    WrongData = 5;
    InputError = 6;
    CommandError = 7;

TYPE
    dataType = SYSTEM.ADDRESS;
    standardProc = PROCEDURE( dataType, VAR TestIO.ErrMsg ): BOOLEAN;

PROCEDURE AddCommand( CommandName: ARRAY OF CHAR; 
		      Procedure: standardProc;
		      DataWithSelector: dataType );

    (*
     * Adds new command to the list. 
     *
     * INPUT:
     *     CommandName:      name of the command.
     *     Procedure:        the procedure invoked with "Command" 
     *     DataWithSelector: general data record with the field selecting 
     *                       the parameters used by CmdProc.
     *)

PROCEDURE RunTest( TestDataRead, 
		   TestResultsWrite, 
                   TestResultsCompare: standardProc;
		   ModuleName: ARRAY OF CHAR ); 

    (*
     * Main loop. Used interactively, prompts the user for commands
     * and data, otherwise it reads them from a file.
     *     
     *)

PROCEDURE Quit( Data: dataType; VAR Msg: TestIO.ErrMsg ): BOOLEAN;

    (*
     * The "quit" command 
     *)

END TestSystem.


