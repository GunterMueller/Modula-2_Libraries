(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE LowLevel;

FROM SYSTEM IMPORT 
	ADDRESS,
	WORD,
	BYTE,
	SETREG,
	GETREG,
	CODE;


TYPE TrixPointer = RECORD 
		       CASE DUMMY: BOOLEAN OF
		           TRUE : AdrType   : ADDRESS
         		 | FALSE: SegOffset : ARRAY [0..1] OF WORD;
		           END (* CASE *);
                       END;


PROCEDURE MoveLeft (Source	: ADDRESS;
		    Destination : ADDRESS;
		    MoveLength  : CARDINAL);
VAR SaveES	 : WORD;
    SaveDS	 : WORD;
    MemPointer   : TrixPointer;
    NewES	 : WORD;
    NewDS	 : WORD;
    SourceOffset : WORD;
    DestOffset   : WORD;
BEGIN
    GETREG (8, SaveES);		(* Mov	SaveES, ES      *)
    CODE (8CH, 0D9H);		(* Mov	CX, DS		*)
    GETREG (11, SaveDS);	(* Mov	SaveDS, DS	*)
    WITH MemPointer DO
	AdrType := Source;
        NewDS := SegOffset[1];
	SourceOffset := SegOffset[0];
	AdrType := Destination;
	NewES := SegOffset[1];
	DestOffset := SegOffset[0]
	END (* WITH MemPointer *);
    SETREG (11, NewDS);		(* Mov	CX, NewDS	*)
    CODE (08EH, 0D9H);		(* Mov	DS, CX		*)
    SETREG (8, NewES);		(* Mov	ES, NewES	*)
    SETREG (6, SourceOffset );	(* Mov	SI, SourceOffset*)
    SETREG (7, DestOffset );	(* Mov	DI, DestOffset	*)
    SETREG (1, MoveLength);	(* Mov	CX, MoveLength  *)
    CODE (0FCH);		(* Cld			*)
    CODE (0F2H, 0A4H);		(* Rep  MovSB		*)
    SETREG (8, SaveES);		(* Mov	ES, SaveES	*)
    SETREG (1, SaveDS);		(* Mov	CX, SaveDS	*)
    CODE (08EH, 0D9H);		(* Mov	DS, CX		*)
END MoveLeft;


PROCEDURE FillByte (Destination  : ADDRESS;
		    ByteValue    : BYTE;
		    FillLength   : CARDINAL);
VAR SaveES	: WORD;
    MemPointer  : TrixPointer;
    NewES	: WORD;
    DestOffset  : WORD;
BEGIN
    GETREG (8, SaveES);		(* Mov	SaveES, ES      *)
    WITH MemPointer DO
	AdrType := Destination;
	NewES := SegOffset[1];
	DestOffset := SegOffset[0]
	END (* WITH MemPointer *);
    SETREG (8, NewES);		(* Mov	ES, NewES	*)
    SETREG (7, DestOffset);	(* Mov	DI, DestOffset	*)
    SETREG (1, FillLength);	(* Mov	CX, FillLength  *)
    SETREG (0, ByteValue);	(* Mov	AL, ByteValue	*)
    CODE (0FCH);		(* Cld			*)
    CODE (0F2H, 0AAH);		(* Rep  StoSB		*)
    SETREG (8, SaveES);		(* Mov	ES, SaveES	*)
END FillByte;


PROCEDURE FillWord (Destination  : ADDRESS;
		    WordValue    : WORD;
		    FillLength   : CARDINAL);
VAR SaveES	: WORD;
    MemPointer  : TrixPointer;
    NewES	: WORD;
    DestOffset  : WORD;
BEGIN
    GETREG (8, SaveES);		(* Mov	SaveES, ES      *)
    WITH MemPointer DO
	AdrType := Destination;
	NewES := SegOffset[1];
	DestOffset := SegOffset[0]
	END (* WITH MemPointer *);
    SETREG (8, NewES);		(* Mov	ES, NewES	*)
    SETREG (7, DestOffset );	(* Mov	DI, DestOffset	*)
    SETREG (1, FillLength);	(* Mov	CX, FillLength  *)
    SETREG (0, WordValue);	(* Mov	AX, WordValue	*)
    CODE (0FCH);		(* Cld			*)
    CODE (0F2H, 0ABH);		(* Rep  StoSW		*)
    SETREG (8, SaveES);		(* Mov	ES, SaveES	*)
END FillWord;


END LowLevel.
