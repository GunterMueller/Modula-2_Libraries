(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE FIOReal;
(* 
 * Reading and writing reals via formatio is the same as cardinals and integers.
 * We have to determine the size of the objects on the SunM2 and for LogitechM2,
 * we don't.  We do as many manipulations in BiggestREAL as possible, since
 * this makes things easier.
 *)

IMPORT 
    FIOBase,
    FormatIO,
    IOErrors,
    ModInit,	(* MUST BE HERE -- See ConfFIO *)
    RealConvert,
    RealIO,
    Strings,
    StringIO,
    SYSTEM,
    SysTypes,
    TextIO;

   CONST
      prompt = "Enter a real number `[ [Real,p7] .. [Real,p7] `]: ";

      (* Default modifiers are used when user doesn't supply a value *)
      defaultWidth         = 0;
      defaultFillChar      = ' ';
      defaultJustification = Strings.justifyRight;
      defaultPrecision     = 7;
      defaultFloatPrecision= 0;
      defaultExponent      = 0;
   
   TYPE
      RealPtr     = RECORD
	 @IF LogitechM2 THEN
	     CASE CARDINAL OF	(* Case tag is version 1.0 *)
	 @ELSE
	     CASE : CARDINAL OF	(* Correct version of case tag *)
	 @END
	    0: adr : SysTypes.SAUPTR;
	    |
	    1: ptr64 : POINTER TO SysTypes.REAL64;
	    @IF SunM2 THEN
	       |
	       2: ptr32 : POINTER TO SysTypes.REAL32;
	    @END (* SunM2 *)
	  END; (* CASE *)
      END;

      MaxRealString = ARRAY [ 0 .. SysTypes.maxExponentREAL64 ] OF CHAR;
      BiggestREAL   = SysTypes.REAL64;
      WhichFormat   = (float, eng, sci);
   

PROCEDURE InternalWrite(
    outFile     : TextIO.Object;
    whichFormat : WhichFormat;
    format      : ARRAY OF CHAR;
    dataAdr     : SysTypes.SAUPTR;
    length      : SysTypes.Card
    )           : TextIO.States;
    VAR
	realPtr   : RealPtr;
	real      : BiggestREAL;
	realStr   : MaxRealString;
	error     : BOOLEAN;
	modifiers : FIOBase.ModifierValues;
	precision : SysTypes.Card;  (* num digits after dec point *)
	exponent  : SysTypes.Card;  (* num digits in exponent     *)
    BEGIN (* InternalWrite *)

	realPtr.adr := dataAdr;
	@IF SunM2 THEN
	    (* Check out the size and set up real accordingly *)
	    IF length = SYSTEM.TSIZE( SysTypes.REAL32 ) THEN
		real := realPtr.ptr32^;
	    ELSIF length = SYSTEM.TSIZE( SysTypes.REAL64 ) THEN
		real := realPtr.ptr64^;
	    ELSE
		RETURN TextIO.SetError( outFile, IOErrors.badParameter );
	    END;
	@END (* SunM2 *)

	@IF LogitechM2 THEN
	    real := realPtr.ptr64^;
	@END (* LogitechM2 *)

	(* establish defaults *)
	WITH modifiers DO
	    width         := defaultWidth;
	    fillChar      := defaultFillChar;
	    justification := defaultJustification;
	END;
	IF whichFormat = float THEN
	    precision := defaultFloatPrecision;
	    (* exponent not used *)
	ELSE
	    precision := defaultPrecision;
	    exponent  := defaultExponent;
	END;

	(* scan for default modifiers *)
	IF NOT FIOBase.ScanModifiers( format, FIOBase.writeModifierSet,
	    outFile, modifiers, format ) THEN
	    RETURN TextIO.SetError( outFile, IOErrors.badParameter );
	END;

	(* strip out all command characters *)
	WHILE format[ 0 ] # 0C DO
	    CASE FIOBase.GetSpecifier(format) OF
		'p':  (* precision *)
		    error := NOT FIOBase.GetCard( format, 10, precision );
		|
		'e':  (* exponent *)
		    error := ( whichFormat = float ) OR
			     NOT FIOBase.GetCard( format, 10, exponent );
		ELSE  (* unknown *)
		    error := TRUE;
	    END; (* CASE *)
	    IF error THEN
		RETURN TextIO.SetError( outFile, IOErrors.badParameter );
	    END;
	END; (* WHILE *)


	CASE whichFormat OF
	    float:
		error := NOT RealConvert.ToFloatingString( real, 0, precision,
							   realStr );
	    |
	    eng: 
		error := NOT RealConvert.ToEngineeringString( real, 0, 
				precision, exponent, realStr );
	    |
	    sci: 
		error := NOT RealConvert.ToScientificString( real, 0, 
				precision, exponent, realStr);
	END; (* CASE *)

	IF error THEN
	    RETURN TextIO.SetError(outFile, IOErrors.badParameter);
	END;

	WITH modifiers DO
	    RETURN StringIO.WriteJustifiedField(
		outFile, realStr, justification, width, fillChar );
	END; (* WITH *)

    END InternalWrite;

   
PROCEDURE WriteSci(
    DONTCARE : SysTypes.ANYPTR;
    outFile  : TextIO.Object;
    format   : ARRAY OF CHAR;
    data     : SysTypes.SAUPTR;
    length   : SysTypes.Card
    )        : TextIO.States;
    BEGIN (* WriteSci *)

	RETURN InternalWrite( outFile, sci, format, data, length );

    END WriteSci;


PROCEDURE WriteEng(
    DONTCARE : SysTypes.ANYPTR;
    outFile  : TextIO.Object;
    format   : ARRAY OF CHAR;
    data     : SysTypes.SAUPTR;
    length   : SysTypes.Card
    )        : TextIO.States;
    BEGIN (* WriteEng *)

	RETURN InternalWrite( outFile, eng, format, data, length );

    END WriteEng;


PROCEDURE WriteFloat(
    DONTCARE : SysTypes.ANYPTR;
    outFile  : TextIO.Object;
    format   : ARRAY OF CHAR;
    data     : SysTypes.SAUPTR;
    length   : SysTypes.Card
    )        : TextIO.States;
    BEGIN (* WriteFloat *)

	RETURN InternalWrite( outFile, float, format, data, length );

    END WriteFloat;


PROCEDURE GetReal(
    VAR formatString : ARRAY OF CHAR;
    VAR real         : BiggestREAL
    )                : BOOLEAN;
    VAR
	realString : MaxRealString;
    BEGIN

	RETURN FIOBase.GetString( formatString, realString ) AND
		 RealConvert.FromString( realString, real );

    END GetReal;
   

PROCEDURE Read(
    DONTCARE   : SysTypes.ANYPTR;
    inFile     : TextIO.Object;
    format     : ARRAY OF CHAR;
    dataAdr    : SysTypes.SAUPTR;
    length     : SysTypes.Card;
    prompting  : BOOLEAN;
    promptFile : TextIO.Object
    )          : TextIO.States;
    (*
     * Figures out the type of real (SunM2) and then proceeds to 
     * get the paramters.  After getting the defaults, it goes to
     * the "locals" which are "u" and "l" for upper and lower bounds.
     * Finally, it enters the standard read loop.  Since this is a
     * formatted object, we return badData on endOfLine being encountered.
     *)
    VAR
	realPtr    : RealPtr;
	real	    : BiggestREAL;
	error      : BOOLEAN;
	state      : TextIO.States;
	modifiers  : FIOBase.ModifierValues;
	upper      : BiggestREAL;
	lower      : BiggestREAL;
	@IF SunM2 THEN
	    (* Several sizes, so have to set dynamically *)
	    maxUpper   : BiggestREAL;
	    maxLower   : BiggestREAL;
	@END (* SunM2 *)
	@IF LogitechM2 THEN
	    CONST
		(* Only one size REAL and is checked by FIO *)
		maxUpper = SysTypes.MAXREAL64;
		maxLower = SysTypes.MINREAL64;
	@END (* LogitechM2 *)
    BEGIN (* Read *)

	@IF SunM2 THEN
	    (* Check out the size and set up the size dependent parameters *)
	    IF length = SYSTEM.TSIZE( SysTypes.REAL32 ) THEN
		maxUpper := SysTypes.MAXREAL32;
		maxLower := SysTypes.MINREAL32;
	    ELSIF length = SYSTEM.TSIZE( SysTypes.REAL64 ) THEN
		maxUpper := SysTypes.MAXREAL64;
		maxLower := SysTypes.MINREAL64;
	    ELSE
		RETURN TextIO.SetError( inFile, IOErrors.badParameter );
	    END;
	@END (* SunM2 *)

	(* LogitechM2 is sized checked by FormatIO *)

	(* scan for default modifiers *)
	IF prompting THEN
	    modifiers.messageOutput := FALSE;
	    IF NOT FIOBase.ScanModifiers( format, FIOBase.readModifierSet,
					  promptFile, modifiers, format) THEN
		RETURN TextIO.SetError( inFile, IOErrors.badParameter );
	    END;
	END;

	upper := maxUpper;
	lower := maxLower;
	WHILE format[0] # 0C DO
	    CASE FIOBase.GetSpecifier( format ) OF
		'l': 
		    error := NOT GetReal( format, lower );
		|
		'u': 
		    error := NOT GetReal( format, upper );
		ELSE  
		    error := TRUE;
	    END; (* CASE *)
	    IF error THEN
		RETURN TextIO.SetError(inFile, IOErrors.badParameter);
	    END;
	END; (* WHILE *)

	(* Verify that the guy has a correct parameter *)
	IF ( upper < lower ) OR ( upper > maxUpper ) OR ( lower < maxLower ) 
	  THEN RETURN TextIO.SetError(inFile, IOErrors.badParameter);
	END;

	(* 
	 * we have the parameters: repeat the read until a valid value is read 
	 * Note that a message may have been put out.  If one hasn't,
	 * then we don't prompt (unless the guy gets something wrong).
	 *)
	LOOP  
	    IF prompting AND NOT modifiers.messageOutput THEN
		(* 
		 * We output a message of the form 
		 *)
		error := ( FormatIO.Write2( promptFile, prompt, lower, upper ) 
			   # TextIO.ok ) OR
	                 ( TextIO.Flush( promptFile ) # TextIO.ok );

		IF error THEN
		    (* Got an error during prompting, no retry! *)
		    RETURN TextIO.SetError( inFile, IOErrors.badParameter );
		END;
	    END;

	    (* now, do the read as requested *)
	    state := RealIO.Read( inFile, real );

	    (* First figure out if there was an error *)
	    IF state = TextIO.ok THEN

		(* Do the range check *)
		IF ( lower <= real ) AND ( real <= upper ) THEN

		    (* We're looking at some heavy case variant record action! *)
		    realPtr.adr := dataAdr;
		    @IF SunM2 THEN
			IF length = SYSTEM.TSIZE( SysTypes.REAL64 ) THEN
			    realPtr.ptr64^ := real;
			ELSE (* length = SYSTEM.TSIZE( SysTypes.REAL32 ) *)
			    realPtr.ptr32^ := real;
			END;
		    @END (* SunM2 *)

		    @IF LogitechM2 THEN
			realPtr.ptr64^ := real;
		    @END (* LogitechM2 *)

		    RETURN TextIO.ok;
		END; (* bounds check *)

		(* Got a range error *)
		state := TextIO.SetError( inFile, IOErrors.badData );
	    END; (* IF state *)

	    (* Nothing we can do if we aren't prompting! *)
	    IF NOT prompting THEN
		IF state = TextIO.endOfLine THEN	(* expected real *)
		    RETURN TextIO.SetError( inFile, IOErrors.badData );
		END;
		RETURN state;
	    END;

	    (* We are prompting, so use the standard procedure for errors *)
	    state := FIOBase.PromptForReread( promptFile, inFile );
	    IF state # TextIO.ok THEN
		RETURN state;
	    END;

	    (* Force a re-prompt at the top. *)
	    modifiers.messageOutput := FALSE;	

	END; (* LOOP *)

    END Read;


BEGIN (* FIOReal *)

    @IF SunM2 THEN
        FIOBase.RegisterWrite( writeFloating, WriteFloat, FIOBase.DONTCARE,
			       FIOBase.noSizeCheck );
        FIOBase.RegisterWrite( writeScientific, WriteSci, FIOBase.DONTCARE,
			       FIOBase.noSizeCheck );
        FIOBase.RegisterWrite( writeReal, WriteSci, FIOBase.DONTCARE,
			       FIOBase.noSizeCheck );
        FIOBase.RegisterWrite( writeEngineering, WriteEng, FIOBase.DONTCARE,
			       FIOBase.noSizeCheck );
        FIOBase.RegisterRead( readReal, Read, FIOBase.DONTCARE,
			      FIOBase.noSizeCheck );
    @END (* SunM2 *)

    @IF LogitechM2 THEN
        FIOBase.RegisterWrite( writeFloating, WriteFloat, FIOBase.DONTCARE,
				SYSTEM.TSIZE( BiggestREAL ) );
        FIOBase.RegisterWrite( writeScientific, WriteSci, FIOBase.DONTCARE,
				SYSTEM.TSIZE( BiggestREAL ) );
        FIOBase.RegisterWrite( writeReal, WriteSci, FIOBase.DONTCARE,
				SYSTEM.TSIZE( BiggestREAL ) );
        FIOBase.RegisterWrite( writeEngineering, WriteEng, FIOBase.DONTCARE,
				SYSTEM.TSIZE( BiggestREAL ) );
        FIOBase.RegisterRead( readReal, Read, FIOBase.DONTCARE,
				SYSTEM.TSIZE( BiggestREAL ) );
    @END (* LogitechM2 *)

END FIOReal.
