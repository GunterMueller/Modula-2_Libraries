(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE ErrorFIO;
(* 
 * Don't have Assert around the TerminateWithError because this isn't
 * really assertion check which is costly.  It provides semantics to the
 * library.  It is a post-condition and not a pre-condition.
 *
 * Tasks NOTE:
 *     This may not be right, but we terminate with the Monitor locked.
 *     The reason is that someone else might be wanting to use the file
 *     and the errors would be kind of funny.
 *     The semantics of the Tasking stuff at Olsen says that the program
 *     exits if the caller is terminated.  If other Tasks semantics are chosen,
 *     then a different approach will have to be taken.
 *)
IMPORT
    IOErrors,
    FormatIO,
    ProgErr,
    SYSTEM,
    SysTypes,
    TextIO,
    TextIOPRIVATE;

@IF Tasks THEN
    IMPORT
	TaskMonitors, IOMonitors ;

    VAR
	errorOutputMonitor : TaskMonitors.Object ;

@END (* Tasks *)


PROCEDURE WriteError;
    (*
     * If we get an error writing, then we try to reset it.  If we can't,
     * then we terminate.
     *
     * Tasks NOTE:
     * 		ASSUMES is called with the monitor locked!
     *)
    BEGIN (* WriteError *)

	IF TextIO.SetError( TextIO.Object( TextIOPRIVATE.errorOutput ), 
			    IOErrors.ok ) = TextIO.error THEN
	    TextIO.PrintErrorMessage( 
	        TextIO.Object( TextIOPRIVATE.errorOutput ), '' );
	    ProgErr.Terminate( "ErrorFIO: unable to reset file error." );
	END;

    END WriteError;


PROCEDURE Write(
    format : ARRAY OF CHAR
    );
    BEGIN (* Write *)

	@IF Tasks THEN
	    TaskMonitors.Enter( errorOutputMonitor );
	@END (* Tasks *)

	IF FormatIO.Write( TextIO.Object( TextIOPRIVATE.errorOutput ), format ) 
	  = TextIO.error THEN
	    WriteError;
	END;

	@IF Tasks THEN
	    TaskMonitors.Exit( errorOutputMonitor );
	@END (* Tasks *)


    END Write;


PROCEDURE Write1(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY
    );
    BEGIN (* Write1 *)

	@IF Tasks THEN
	    TaskMonitors.Enter( errorOutputMonitor );
	@END (* Tasks *)

	IF FormatIO.Write1( TextIO.Object( TextIOPRIVATE.errorOutput ), format, 
		arg1 ) = TextIO.error THEN
	    WriteError;
	END;

	@IF Tasks THEN
	    TaskMonitors.Exit( errorOutputMonitor );
	@END (* Tasks *)

    END Write1;


PROCEDURE Write2(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY;
    arg2   : ARRAY OF SysTypes.ANY
    );
    BEGIN (* Write2 *)

	@IF Tasks THEN
	    TaskMonitors.Enter( errorOutputMonitor );
	@END (* Tasks *)

	IF FormatIO.Write2( TextIO.Object( TextIOPRIVATE.errorOutput ), format, 
		arg1, arg2 ) = TextIO.error THEN
	    WriteError;
	END;

	@IF Tasks THEN
	    TaskMonitors.Exit( errorOutputMonitor );
	@END (* Tasks *)

    END Write2;


PROCEDURE Write3(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY;
    arg2   : ARRAY OF SysTypes.ANY;
    arg3   : ARRAY OF SysTypes.ANY
    );
    BEGIN (* Write3 *)

	@IF Tasks THEN
	    TaskMonitors.Enter( errorOutputMonitor );
	@END (* Tasks *)

	IF FormatIO.Write3( TextIO.Object( TextIOPRIVATE.errorOutput ), format, 
		arg1, arg2, arg3 ) = TextIO.error THEN
	    WriteError;
	END;

	@IF Tasks THEN
	    TaskMonitors.Exit( errorOutputMonitor );
	@END (* Tasks *)

    END Write3;


PROCEDURE Write4(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY;
    arg2   : ARRAY OF SysTypes.ANY;
    arg3   : ARRAY OF SysTypes.ANY;
    arg4   : ARRAY OF SysTypes.ANY
    );
    BEGIN (* Write4 *)

	@IF Tasks THEN
	    TaskMonitors.Enter( errorOutputMonitor );
	@END (* Tasks *)

	IF FormatIO.Write4( TextIO.Object( TextIOPRIVATE.errorOutput ), format, 
		arg1, arg2, arg3, arg4 ) = TextIO.error THEN
	    WriteError;
	END;

	@IF Tasks THEN
	    TaskMonitors.Exit( errorOutputMonitor );
	@END (* Tasks *)

    END Write4;


BEGIN
    @IF Tasks THEN
      errorOutputMonitor := IOMonitors.GetErrorOutput();
    @END (* Tasks *)


END ErrorFIO.
