(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE SimpleFIO;
(* 
 * Simple interface to FormatIO which behaves similarly
 * to SimpleIO in regards to errors.
 *
 * Default outFile    : TextIO.GetOutput( )
 * Default inFile     : TextIO.GetInput( )
 * Default promptFile : TextIO.GetOutput( )
 *
 * If there is a format problem, the caller is terminated.
 *)
IMPORT
    SysTypes;

EXPORT QUALIFIED 
    EOF,           Write,         Write1,       Write2,
    Write3,        Write4,        Read,         Read1,
    Read2,         Read3,         Read4,        PromptedRead1,
    PromptedRead2, PromptedRead3, PromptedRead4;

PROCEDURE EOF(
    ) : BOOLEAN;  (* at end-of-file => TRUE *)
    (*
     * Note that EOL is never returned by FormatIO routines,
     * because it must be "expected" in the format input (or
     * there is prompting which bypasses line boundaries).
     *)

(*
 * Write procedures.
 *
 * The "format" string is scanned for text literals and
 * for format commands (enclosed in square brackets).
 *
 * The following occurs in the sequence in which the
 * objects are encountered in the format string:  
 *
 *     Text literals are written to the file immediately and directly.  
 *
 *     Format commands are scanned for a leading name (such as "Card")
 *     and the name is looked up in a case sensitive manner in an
 *     internal dictionary of registered write names. If the name is
 *     found and the size in the dictionary is non-zero, the size of
 *     the corresponding argument is compared with the size expected
 *     by the procedure variable associated with the name. If the
 *     sizes match (or the dictionary size is zero) the remaining
 *     elements of the format command are stripped out ("f0,w2") and
 *     the procedure variable is called to perform the write operation.
 *     If the dictionary size is zero, the procedure variable is
 *     responsible for argument size checking.
 *
 *     Ill-formed format commands, format commands with proper
 *     syntax but unrecognized names, or valid format commands
 *     with arguments of an unexpected size will set the file
 *     to an error state ("IOErrors.badParameter").
 *)
PROCEDURE Write(
    format : ARRAY OF CHAR
    );
                        
PROCEDURE Write1(
    format : ARRAY OF CHAR;        (* Control of output format and text *)
    arg1   : ARRAY OF SysTypes.ANY (* Argument to be formated *)
    );

PROCEDURE Write2(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY;
    arg2   : ARRAY OF SysTypes.ANY
    );

PROCEDURE Write3(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY;
    arg2   : ARRAY OF SysTypes.ANY;
    arg3   : ARRAY OF SysTypes.ANY
    );

PROCEDURE Write4(
    format : ARRAY OF CHAR;
    arg1   : ARRAY OF SysTypes.ANY;
    arg2   : ARRAY OF SysTypes.ANY;
    arg3   : ARRAY OF SysTypes.ANY;
    arg4   : ARRAY OF SysTypes.ANY
    );

(*
 * Read procedures.
 *
 * Two versions of the Read procedures are provided, one of which
 * prompts the user for input, the other of which does not (to be
 * used for file input). They function in a similar fashion.
 *
 * The "format" string is scanned for text literals and
 * for format commands (enclosed in square brackets).
 *
 * The following occurs in the sequence in which the
 * objects are encountered in the format string:  
 *
 *     Text literals cause the file to be read in an attempt to
 *     match the incoming characters with the text literals. Match
 *     failures cause the input file to be set to an error state
 *     ("IOErrors.badParameter").
 *
 *     Format commands are scanned for a leading name (such as "Card")
 *     and the name is looked up in a case sensitive manner in an
 *     internal dictionary of registered write names. If the name is
 *     found and the size in the dictionary is non-zero, the size of
 *     the corresponding argument is compared with the size expected
 *     by the procedure variable associated with the name. If the
 *     sizes match (or the dictionary size is zero) the remaining
 *     elements of the format command are stripped out ("f0,w2") and
 *     the procedure variable is called to perform the write operation.
 *     If the dictionary size is zero, the procedure variable is
 *     responsible for argument size checking.
 *
 *     Ill-formed format commands, format commands with proper
 *     syntax but unrecognized names, or valid format commands
 *     with arguments of an unexpected size will set the file
 *     to an error state ("IOErrors.badParameter").
 *)
PROCEDURE Read(
    format : ARRAY OF CHAR
    )      : BOOLEAN;	    (* FALSE => EOF or bad data *)

PROCEDURE Read1(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY
    )          : BOOLEAN;

PROCEDURE PromptedRead1(
        format : ARRAY OF CHAR;        (* Input format and text *)
    VAR arg1   : ARRAY OF SysTypes.ANY (* Argument to be read *)
    );

PROCEDURE Read2(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY;
    VAR arg2   : ARRAY OF SysTypes.ANY
    )          : BOOLEAN;

PROCEDURE PromptedRead2(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY;
    VAR arg2   : ARRAY OF SysTypes.ANY
    );

PROCEDURE Read3(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY;
    VAR arg2   : ARRAY OF SysTypes.ANY;
    VAR arg3   : ARRAY OF SysTypes.ANY
    )          : BOOLEAN;

PROCEDURE PromptedRead3(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY;
    VAR arg2   : ARRAY OF SysTypes.ANY;
    VAR arg3   : ARRAY OF SysTypes.ANY
    );

PROCEDURE Read4(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY;
    VAR arg2   : ARRAY OF SysTypes.ANY;
    VAR arg3   : ARRAY OF SysTypes.ANY;
    VAR arg4   : ARRAY OF SysTypes.ANY
    )          : BOOLEAN;

PROCEDURE PromptedRead4(
        format : ARRAY OF CHAR;
    VAR arg1   : ARRAY OF SysTypes.ANY;
    VAR arg2   : ARRAY OF SysTypes.ANY;
    VAR arg3   : ARRAY OF SysTypes.ANY;
    VAR arg4   : ARRAY OF SysTypes.ANY
    );

END SimpleFIO.

