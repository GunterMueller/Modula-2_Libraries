(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE tIOVersions;
IMPORT
    DirIO,
    IOConsts,
    IOErrors,
    IOVersions,
    NameLists,
    Notices,
    ProgErr,
    SimpleIO,
    SYSTEM;
VAR
    created : NameLists.Object;
    base    : IOConsts.Entry;
PROCEDURE Create(
    num : IOVersions.Number
    );
    VAR
	entry : IOConsts.Entry;
    BEGIN (* Create *)

	IOVersions.Append( base, num, entry );
	IF DirIO.CreateEntry( entry, DirIO.createTextFile, 
			      DirIO.mustBeNewPath ) # IOErrors.ok  THEN
            ProgErr.Terminate( "IOError" );
	END;
	
	NameLists.Insert( created, entry, NameLists.DONTCARE );

    END Create;
    
    
PROCEDURE CreateFiles;
    VAR
	card : CARDINAL;
    BEGIN (* CreateFiles *)
    
	LOOP
	    SimpleIO.WriteString( "Enter a version to create (0 exits): " );
	    IF NOT SimpleIO.ReadCard( card ) THEN
		ProgErr.Terminate( "What?" );
	    END;
	    SimpleIO.ReadLn;
	    
	    IF card = 0 THEN
		RETURN
	    END;
	    Create( card );
	END; (* LOOP *)
	
    END CreateFiles;

VAR
    low   : CARDINAL;
    high  : CARDINAL;

PROCEDURE Find(
    mode : IOVersions.FindModes;
    name : ARRAY OF CHAR
    );
    VAR
	found : IOVersions.Number;
	ioError : IOErrors.Errors;
	path : IOConsts.Entry;
    BEGIN (* Find *)
	ioError := IOVersions.Find( base, low, high, mode, found );
	IF ioError # IOErrors.ok THEN
	    IOErrors.PrintMessage( ioError, name );
	    RETURN;
	END;
	IOVersions.Append( base, found, path );
	
	SimpleIO.WriteString( name );
	SimpleIO.WriteString( " is " );
	SimpleIO.WriteString( path );
	SimpleIO.WriteLn;

    END Find;
    

PROCEDURE Terminate(
    DONTCARE : SYSTEM.ADDRESS
    );
    VAR
	entry : IOConsts.Entry;
    BEGIN (* Terminate *)
    
	NameLists.MakeFirstNext( created );
	WHILE NameLists.Next( created, entry, NameLists.DONTCARE ) DO
	    IOErrors.DONTCARE := DirIO.DeleteEntry( entry );
	END;

    END Terminate;

    
BEGIN (* tIOVersions *)

    NameLists.Create( created, NameLists.queue, NameLists.caseSensitive );
    Notices.Register( Notices.GetTerminationNotice(), Terminate );
    
    SimpleIO.WriteString( "Enter a base name: " );
    SimpleIO.ReadString( base );
    SimpleIO.ReadLn;
    
    CreateFiles;
    
    SimpleIO.WriteString( "Enter a low high: " );
    IF NOT SimpleIO.ReadCard( low ) OR NOT SimpleIO.ReadCard( high ) THEN
	ProgErr.Terminate( "Hey?" );
    END;
    SimpleIO.ReadLn;
    
    Find( IOVersions.lowestNumber, "lowest" );
    Find( IOVersions.highestNumber, "highest" );
    Find( IOVersions.newestDate, "newest" );
    Find( IOVersions.oldestDate, "oldest" );

END tIOVersions.
