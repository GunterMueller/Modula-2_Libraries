(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

MODULE BinTest;
   
   IMPORT 
      BinaryIO, DirIO,   IOErrors,
      SYSTEM,   Strings, Intrinsics, ProgErr, ProgErrOutput,
      CardConvert,	SysTypes;
@IF LOGITECH THEN
    IMPORT
	Card32;
@END (* LOGITECH *)
   
   PROCEDURE Error(msg : ARRAY OF CHAR;
		   ioError : IOErrors.Errors);
      VAR
	string : IOErrors.String;
      BEGIN
	IOErrors.ToString( ioError, string );
	Message( string );
	ProgErr.Terminate( msg );
      END Error;
   
   PROCEDURE Message(msg : ARRAY OF CHAR);
      BEGIN
      ProgErrOutput.WriteString(msg);
      ProgErrOutput.WriteLn;
      END Message;
   
   CONST
     @IF LOGITECH THEN
	 fileName = 'binaryio.xxx';
     @END (* LOGITECH *) 
     @IF SUN THEN
	fileName = '/tmp/binaryio.xxx';
     @END (* SUN *)
     blkSize1 = 20;
     blkSize2 = 33;
     blkData1 = 72;
     blkData2 = 45;
     
    TYPE
      Blk1 = ARRAY [0..blkSize1-1] OF CARDINAL;
      Blk2 = ARRAY [0..blkSize2-1] OF CARDINAL;

    VAR
      blk1  : Blk1;
      blk2  : Blk2;
      read  : CARDINAL;
   VAR
      inFile, outFile : BinaryIO.Object;
      i     : CARDINAL;
      str   : BinaryIO.IndexString;
      index : BinaryIO.Index;
      idx   : BinaryIO.Index;
      info  : DirIO.EntryInfo;
      fileSize : SysTypes.CARDINAL32;
      fileSizeString : BinaryIO.IndexString;
      ioError : IOErrors.Errors;
      
   BEGIN

   (* initialize data in blocks to be written *)
   FOR i := 0 TO HIGH( blk1 ) DO
      blk1[i] := i + blkData1;
      END;
   FOR i := 0 TO HIGH( blk2 ) DO
      blk2[i] := i + blkData2;
      END;
   
   (* create a block file *)
   ioError := DirIO.CreateEntry(fileName, DirIO.createBinaryFile, 
				DirIO.overwritePath);
   IF ioError # IOErrors.ok THEN
      Error('Unable to create entry.', ioError );
      END;
   Message('File created.');
   
   ioError := BinaryIO.Open(outFile, fileName, BinaryIO.appendOnly, '');
   IF ioError # IOErrors.ok THEN
      Error('Unable to open file.', ioError);
      END;
   Message('File opened');
      
   IF (BinaryIO.WriteBlock(outFile, blk1) <> BinaryIO.ok) THEN
      Error('Unable to write first block', BinaryIO.GetError( outFile ));
      END;
   Message('First block written');
   
   IF (BinaryIO.WriteBlock(outFile, blk2) <> BinaryIO.ok) THEN
      Error('Unable to write second block', BinaryIO.GetError( outFile ));
      END;
   Message('Second block written');
   
   ioError := BinaryIO.Close(outFile);
   IF ioError # IOErrors.ok THEN
      Error('Unable to close file', ioError);
      END;
   Message('File closed');
   
   (* was file length correct as reported by DirIO? *)
   ioError := DirIO.GetEntryInfo(fileName, info);
   IF ioError <> IOErrors.ok THEN
      Error('Unable to get file info', ioError);
      END;
      
   @IF SUN THEN
       fileSize := SYSTEM.TSIZE( Blk1 ) + SYSTEM.TSIZE( Blk2 );
   @END (* SUN *)
   @IF LOGITECH THEN
	Card32.Zero( fileSize );
	Card32.LINC16( fileSize, SYSTEM.TSIZE( Blk1 ) + SYSTEM.TSIZE( Blk2 ) );
   @END (* LOGITECH *)
   WITH info DO
      @IF LOGITECH THEN
	    IF Card32.Compare( fileSize, size ) # Intrinsics.equal THEN
      @END (* LOGITECH *) 
      @IF SUN THEN
	  IF CARDINAL( stat.st_size ) # fileSize THEN
      @END (* SUN *)
	       Error('File size incorrect', IOErrors.ok);
	  END;
   END;
   Message('File length is correct');
      
   (* zero memory areas before reads *)
   FOR i := 0 TO HIGH( blk1 ) DO
      blk1[i] := 0;
      END;
   FOR i := 0 TO HIGH( blk2 ) DO
      blk2[i] := 0;
      END;
   
   (* make sure we can read the file properly *)
   ioError := BinaryIO.Open(inFile, fileName, BinaryIO.readWrite, '');
   IF ioError <> IOErrors.ok THEN
      Error('Unable to re-open file.', ioError);
      END;
   Message('File re-opened');
      
   IF (BinaryIO.ReadBlock(inFile, blk1) <> BinaryIO.ok) THEN
      Error('Unable to read first block (Block)', BinaryIO.GetError( inFile ));
      END;
   FOR i := 0 TO HIGH( blk1 ) DO
      IF (blk1[i] <> (i + blkData1)) THEN
         Error('Data error in block 1', BinaryIO.GetError( inFile ));
         END;
      END;
   Message('First block read');
   
   IF (BinaryIO.ReadBlock(inFile, blk2) <> BinaryIO.ok) THEN
      Error('Unable to read second block (Block)', BinaryIO.GetError( inFile ));
      END;
   FOR i := 0 TO HIGH( blk2 ) DO
      IF (blk2[i] <> (i + blkData2)) THEN
         Error('Data error in block 2', BinaryIO.GetError( inFile ));
         END;
      END;
   Message('Second block read');
   
   (* make sure we get EOF next time *)
   IF (BinaryIO.ReadBlock(inFile, blk2) <> BinaryIO.endOfFile) THEN
      Error('EOF not reached after second block', BinaryIO.GetError( inFile ));
      END;
   Message('Proper EOF');
   
   (* check GetIndex and IndexToString *)
   (* note that current file state is endOfFile, so can't expect "ok" back *)
   IF (BinaryIO.GetIndex(inFile, index) = BinaryIO.error) THEN
      Error('Unable to get current position', BinaryIO.GetError( inFile ));
      END;
   BinaryIO.IndexToString(index, str);
   IF NOT CardConvert.ToString32( fileSize, 10, 0, fileSizeString ) THEN
	Error( "Unable to convert fileSize", IOErrors.ok );
	END;
   IF (Strings.Compare(str, fileSizeString) <> Intrinsics.equal) THEN
      Error('File length as index string is incorrect', IOErrors.ok);
      END;
   Message('Current index ok as value and as string');
   
   (* the following simulates a "rewind" *)
   (* note that current file state is endOfFile, so can't expect "ok" back *)
   IF (BinaryIO.GetStart(inFile, idx) = BinaryIO.error) THEN
      Error('Unable to get start of file', BinaryIO.GetError( inFile ));
      END;
   (* note that current file state is endOfFile, so can't expect "ok" back *)
   IF (BinaryIO.SetIndex(inFile, idx) = BinaryIO.error) THEN
      Error('Unable to re-position file to start', BinaryIO.GetError( inFile ));
      END;
   Message('File rewound');
   
   (* make sure we can still "see" end index and it is correct *)
   IF (BinaryIO.GetEnd(inFile, idx) <> BinaryIO.ok) THEN
      Error('Unable to get end position', BinaryIO.GetError( inFile ));
      END;
   IF BinaryIO.CompareIndex( idx, index ) # Intrinsics.equal THEN
      Error('GetIndex not equal to GetEnd', BinaryIO.GetError( inFile ));
      END;
   
   (* zero memory areas before reads *)
   FOR i := 0 TO HIGH( blk1 ) DO
      blk1[i] := 0;
      END;
   FOR i := 0 TO HIGH( blk2 ) DO
      blk2[i] := 0;
      END;
   
   (* now, try to read the file again, with ReadBytes this time *)
   IF (BinaryIO.ReadBytes(inFile, SYSTEM.ADR(blk1), SYSTEM.TSIZE(Blk1), read) 
      <> BinaryIO.ok) OR (read <> SYSTEM.TSIZE(Blk1)) THEN
      Error('Unable to read first block (Bytes)', BinaryIO.GetError( inFile ));
      END;
   FOR i := 0 TO HIGH( blk1 ) DO
      IF (blk1[i] <> (i + blkData1)) THEN
         Error('Data error in block 1', BinaryIO.GetError( inFile ));
         END;
      END;
   Message('First block re-read');
   
   (* now, try to read the file again, with ReadBytes this time *)
   IF (BinaryIO.ReadBytes(inFile, SYSTEM.ADR(blk2), SYSTEM.TSIZE(Blk2), read)
      <> BinaryIO.ok) OR (read <> SYSTEM.TSIZE(Blk2)) THEN
      Error('Unable to read second block (Bytes)', BinaryIO.GetError( inFile ));
      END;
   FOR i := 0 TO HIGH( blk2 ) DO
      IF (blk2[i] <> (i + blkData2)) THEN
         Error('Data error in block 2', BinaryIO.GetError( inFile ));
         END;
      END;
   Message('Second block re-read');
   
   (* make sure we get EOF next time *)
   IF (BinaryIO.ReadBytes(inFile, SYSTEM.ADR(blk2), SYSTEM.TSIZE(Blk2), read)
      <> BinaryIO.endOfFile) OR (read <> 0) THEN
      Error('EOF not reached after second block (Bytes)', BinaryIO.GetError( inFile ));
      END;
   Message('Proper EOF');
   
   (* position just after the first block *)
   (* note that current file state is endOfFile, so can't expect "ok" back *)
   IF (BinaryIO.GetStart(inFile, index) = BinaryIO.error) THEN
      Error('Unable to get start of file (second time)', BinaryIO.GetError( inFile ));
      END;
   (* note that current file state is endOfFile, so can't expect "ok" back *)
   BinaryIO.CalculateIndex(index, 1, SYSTEM.TSIZE( Blk1 ), index);
   IF (BinaryIO.SetIndex(inFile, index) <> BinaryIO.ok) THEN
      Error('Unable to position file to end of first block', BinaryIO.GetError( inFile ));
      END;
   Message('File re-positioned after first block');
   
   (* test truncation *)
   IF (BinaryIO.Truncate(inFile) <> BinaryIO.ok) THEN
      Error('Unable to truncate', BinaryIO.GetError( inFile ));
      END;
   Message('File truncated');
   
   (* close, to get directory (file length) info to disk *)
   ioError := BinaryIO.Close(inFile);
   IF ioError <> IOErrors.ok THEN
      Error('Unable to close file', ioError);
      END;
   Message('File closed');
   
   (* is the new file length correct as reported by DirIO? *)
   ioError := DirIO.GetEntryInfo(fileName, info);
   IF ioError <> IOErrors.ok THEN
      Error('Unable to get truncated file info', ioError);
      END;
      
   WITH info DO
      @IF LOGITECH THEN
	  Card32.FromCard16( SYSTEM.TSIZE(Blk1), 0, fileSize );
	   IF Card32.Compare( fileSize, size ) # Intrinsics.equal THEN
      @END (* LOGITECH *) 
      @IF SUN THEN
	  IF CARDINAL( stat.st_size ) # SYSTEM.TSIZE( Blk1 ) THEN
      @END (* SUN *)
         Error('Truncated file size incorrect', IOErrors.ok);
         END;
      END;
   Message('File truncation confirmed');
      
   
   Message('Test completed without error');
   END BinTest.
