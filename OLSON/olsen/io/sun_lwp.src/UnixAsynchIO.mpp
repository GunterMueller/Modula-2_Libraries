(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE UnixAsynchIO;
(*
 * Each object contains the handle, events pending, and events being
 * waited for.   The only field that is updated by the InterruptHandler
 * is newEvents (events pending).  The other fields are protected in
 * critical sections, but not necessarily "sigblock" controlled.
 *
 * We allow multiple registrants which means trouble in the Create
 * and Destroy procedures, but not much work elsewhere.
 *
 * IMPORTANT:
 *     Unix shares the FASYNC and FNDELAY flags across all processes,
 *     this module MUST clean-up on termination.
 * 
 * TO DO:
 *     Fix Interrupts to catch all modes of termination.  This is
 *     important, because Sun M2 uses "SEGV" as their NIL pointer check
 *     and we don't catch it.  The default should be to run the termination
 *     code from the bad task.  Right now, we crash hard and leave the
 *     tty in a funny state.
 *)
IMPORT
    Interrupts,
    Notices,
    Objects,
    ProgErr,
    SYSTEM,
    SysTypes,
    TaskNotices,
    Tasks,
    UnixCprocess,
    UnixCsignal,
    UnixCsys_file,
    UnixCfcntl,
    UnixCsys_param,
    UnixCsys_stat,
    UnixCsys_time;
    
CONST
    moduleName = "UnixAsynchIO";

    noEvents = "UnixAsynchIO: at least one event flag must be set.";
    
TYPE
    Files = [ 0 .. UnixCsys_param.NOFILE - 1 ];
    
    FileSet = BITSET;	(* To be used in "select" *)

    Object = POINTER TO ObjectRec;
    ObjectRec = RECORD
	next      : Object;	(* Possible to have multiple waiters *)
	file      : Files;	(* Value passed to Create *)
	allow     : Events;	(* Value passed to Create *)
	newEvents : Events;	(* Set by interrupt; cleared by Task *)
	CASE isWaiting : BOOLEAN OF
	    TRUE:
		waitMode  : Events;	    (* Which events to accept *)
		waiter	  : Tasks.Object;   (* Which guy is waiting? *)
	END;
    END;
    
VAR
    objectMgr : Objects.Manager;     (* For alloc/dealloc *)

    objects   : ARRAY Files OF Object;   (* Indexed by file handle. NIL
					    if invalid file. *)
    oldOwners : ARRAY Files OF INTEGER;	 (* Must be able to reset the
					    pgrp/pid when file is closed.
					    This array only valid if
					    the corresponding objects value is
					    non-NIL *)
				
VAR
    allWidth  : CARDINAL;	     (* Can't be Files, because may be larger *)
    allRead   : FileSet;	     (* Files to get read signals. *)
    allWrite  : FileSet;	     (* Files to get write signals. *)
    allExcept : FileSet;	     (* Files to get exceptions. *)
	(*
	 * +-ing these values yields all the possible open files.
	 *)

    pleaseDie : BOOLEAN;    (* TaskNotices.ExitRequest was called *)

    sigurg    : Interrupts.Object;
    sigio     : Interrupts.Object;

CONST
    sigMask = { UnixCsignal.SIGURG - 1, UnixCsignal.SIGIO - 1 };


PROCEDURE Create(
    VAR asynch : Object;    (* OUT: Only valid, if return is TRUE *)
	handle : CARDINAL;  (* Unix file: set to non-blocking mode *)
	expect : Events	    (* What events can be waited for? *)
    )	       : BOOLEAN;   (* FALSE => is a plain file (can't be asynch) *)
    (*
     * Do an fstat to see if the file is ordinary.  Return failure
     * immediately if it is.   Set the process group and the flags 
     * for non-blocking I/O and signals.  If any of these
     * calls fail, we assume failure.   Allocate the object and
     * add to list of objects for his handle.  Creates the interrupt handlers
     * if necessary.
     *)
    VAR
	oldMask   : BITSET;
	fileMask  : FileSet;
	stat      : UnixCsys_stat.struct_stat;
	format    : SysTypes.CARDINAL16;
	createIO  : BOOLEAN;
	createURG : BOOLEAN;
	oldOwn    : INTEGER;
	DONTCARE  : INTEGER;
    BEGIN (* Create *)
    
	@IF Assert THEN
	    IF expect = Events { } THEN
		ProgErr.Terminate( noEvents );
	    END;
	@END
	
	IF UnixCsys_stat.fstat( handle, stat ) = 0 THEN
	    format := SysTypes.CARDINAL16( SysTypes.BITSET16( stat.st_mode )
		        * SysTypes.BITSET16( UnixCsys_stat.S_IFMT ) );
	    (*
	     * Because of sockets, we must merely check for things
	     * we know which can't be non-blocking.
	     *)
	    IF ( format = UnixCsys_stat.S_IFDIR )
	      OR ( format = UnixCsys_stat.S_IFLNK )
	      OR ( format = UnixCsys_stat.S_IFREG )
	      OR ( format = UnixCsys_stat.S_IFBLK ) THEN
		RETURN FALSE;
	    END;
	END;
	
	(* 
	 * Need to set the handle's owner to be this process and
	 * then do a file operation.  However, we must get the
	 * oldOwn first.
	 *)
	IF UnixCfcntl.fcntl( handle, UnixCfcntl.F_SETFL, 
	       UnixCfcntl.FASYNC + UnixCfcntl.FNDELAY ) = -1 THEN
	    RETURN FALSE;
	END;

	oldOwn := UnixCfcntl.fcntl( handle, UnixCfcntl.F_GETOWN, oldOwn ); 
	IF UnixCfcntl.fcntl( handle, UnixCfcntl.F_SETOWN, 
			    UnixCprocess.getpid() ) = -1 THEN
	    RETURN FALSE;
	END;
			     
	Objects.Allocate( objectMgr, asynch );
	WITH asynch^ DO
	    next := NIL;
	    file := handle;
	    allow := expect;
	    newEvents := Events { };
	    isWaiting := FALSE;
	END;

	(* Need both types of mutual exclusion *)
	Tasks.DisallowPreemption;
	oldMask := UnixCsignal.sigblock( sigMask );
	
	    (* Insert at head *)
	    IF objects[ handle ] = NIL THEN
		oldOwners[ handle ] := oldOwn;
		objects[ handle ] := asynch;
	    ELSE
		asynch^.next := objects[ handle ];
		objects[ handle ] := asynch;
	    END;
	    
	    (* Set up masks *)
	    createIO := ( ( allRead = FileSet { } ) 
		      AND ( allWrite = FileSet { } ) )
		    AND ( expect * Events { read, write } # Events { } );
	    createURG := ( allExcept = FileSet { } )
			AND ( exception IN expect );
	    IF read IN expect THEN
		INCL( allRead, handle );
	    END;
	    IF write IN expect THEN
		INCL( allWrite, handle );
	    END;
	    IF exception IN expect THEN
		createURG := allExcept = FileSet { };
		INCL( allExcept, handle );
	    END;
	    

	    IF handle >= allWidth THEN
		allWidth := handle + 1;
	    END;

	oldMask := UnixCsignal.sigsetmask( oldMask );

	    (* Don't need really strong mutex for this part *)
	    IF createURG THEN
		Interrupts.Create( sigurg, InterruptHandler, 
				   Interrupts.DONTCARE,
				   UnixCsignal.SIGURG, Interrupts.doNotChain );
	    END;

	    IF createIO THEN
		Interrupts.Create( sigio, InterruptHandler, 
				   Interrupts.DONTCARE,
				   UnixCsignal.SIGIO, Interrupts.doNotChain );
	    END;
	Tasks.AllowPreemption;
	
	RETURN TRUE;
	
    END Create;

    
PROCEDURE Destroy(
    VAR asynch : Object
    );
    (*
     * Destroying is made complicated by the fact that we may have
     * more than one registrant for a single handle.
     *)
    VAR
	oldMask    : BITSET;
	destroyURG : BOOLEAN;
	destroyIO  : BOOLEAN;
	ap         : Object;
	DONTCARE   : INTEGER;
	handle     : INTEGER;	(* IF -1, then don't reset flags & owner *)
    BEGIN (* Destroy *)
    
	Tasks.DisallowPreemption;
	oldMask := UnixCsignal.sigblock( sigMask );
	
	    destroyIO := FALSE;
	    destroyURG := FALSE;
	    IF Objects.IsValid( objectMgr, asynch ) THEN
		WITH asynch^ DO
		    (* 
		     * Delete from list (if there is one) and
		     * adjust the "allow" so we know which ones
		     * to exclude 
		     *)
		    handle := -1;
		    IF objects[ file ] = asynch THEN
			ap := next;
			objects[ file ] := ap;
		    ELSE
			ap := objects[ file ];
			WHILE ap^.next # asynch DO
			    ap := ap^.next;
			    allow := allow - ap^.allow;
			END;
			(* Delete from the list *)
			ap^.next := next;
			ap := next;
		    END;
		    IF objects[ file ] = NIL THEN
			handle := file;
		    ELSE
			(* Discount other guys registered for this handle *)
			WHILE ap # NIL DO
			    allow := allow - ap^.allow;
			    ap := ap^.next;
			END;
		    END;

		    IF ( read IN allow ) AND ( file IN allRead ) THEN
			EXCL( allRead, file );
			destroyIO := TRUE;
		    END;
		    IF ( write IN allow ) AND ( file IN allWrite ) THEN
			EXCL( allWrite, file );
			destroyIO := TRUE;
		    END;
		    IF ( exception IN allow ) AND ( file IN allExcept ) THEN
			EXCL( allExcept, file );
			destroyURG := allExcept = FileSet { };
		    END;

		    destroyIO := ( allWrite + allRead = FileSet { } )
		        AND ( Events { read, write } * allow # Events { } );

		    IF file + 1 >= allWidth THEN
			(* 
			 * Find the next greater file handle.  Note
			 * this takes into account the case that this
			 * handle was multiply registered.
			 *)
			WHILE ( allWidth # 0 ) AND
			   ( objects[ allWidth - 1 ] = NIL ) DO
			    DEC( allWidth );
			END;
		    END;

		    IF isWaiting THEN
			Tasks.Ready( waiter );
		    END;
		END;
		Objects.Deallocate( objectMgr, asynch );
	    END;
	
	oldMask := UnixCsignal.sigsetmask( oldMask );

	    (* Is this the last guy registered for this handle? *)
	    IF handle # -1 THEN
		DONTCARE := UnixCfcntl.fcntl( handle, UnixCfcntl.F_SETFL, 0 );

		DONTCARE := UnixCfcntl.fcntl( handle, UnixCfcntl.F_SETOWN,
					      oldOwners[ handle ] );
	    END;
			     
	    (* Don't need really strong mutex for this part *)
	    IF destroyURG THEN
		Interrupts.Destroy( sigurg );
	    END;
	    IF destroyIO THEN
		Interrupts.Destroy( sigio );
	    END;
	Tasks.AllowPreemption;

    END Destroy;
     

PROCEDURE Wait(
        asynch : Object;   (* May be in any state *)
    VAR which  : Events	   (* IN: What for what?  OUT: New events. *)
    )	       : BOOLEAN;  (* FALSE => do not read, object invalid *)
    (*
     * Waits for the specified events to occur.  If no events occur
     * and the object is destroyed, then the call will return false.
     * Otherwise, the call returns true and "which" contains the
     * events which were detected.  Note that events are detected
     * asynchronously, thus it may be possible for this routine to
     * return events which have already been processed.  This call
     * assumes a single task is waiting.  Concurrency control must
     * therefore be handled by the importer.
     *)
    VAR
	oldMask    : BITSET;
	result	   : BOOLEAN;
	didSuspend : BOOLEAN;
    BEGIN (* Wait *)
    
	Tasks.DisallowPreemption;
	oldMask := UnixCsignal.sigblock( sigMask );
	
	    didSuspend := FALSE;
	    LOOP
		result := FALSE;
		IF pleaseDie OR NOT Objects.IsValid( objectMgr, asynch ) THEN
		    EXIT;
		END;
		    
		WITH asynch^ DO
		    (*
		     * Test to see if we have anything.  If we don't
		     * try a suspend (if this isn't the second time through).
		     *)
		    result := which * newEvents # Events {};
		    IF result THEN
			(* Pass events back and clear values in object *)
			which := which * newEvents;
			newEvents := newEvents - which;
			isWaiting := FALSE;
			EXIT;
		    END;

		    (* Second time through? *)
		    IF didSuspend THEN
			isWaiting := FALSE;
			EXIT;
		    END;
		    
		    (* Tell the interrupt handler we're blocked any why. *)
		    isWaiting := TRUE;
		    waiter := Tasks.GetCurrent();
		    waitMode := which;
		END; (* WITH *)
		
		Tasks.Suspend;
		didSuspend := TRUE;
		
	    END; (* LOOP *)

	oldMask := UnixCsignal.sigsetmask( oldMask );
	Tasks.AllowPreemption;
	
	RETURN result;
	
    END Wait;


PROCEDURE SetInvalid(
    VAR asynch : Object 
    );
    BEGIN (* SetInvalid *)

	asynch := NIL;

    END SetInvalid;


PROCEDURE IsValid(
    asynch : Object
    )      : BOOLEAN;
    BEGIN (* IsValid *)

	RETURN Objects.IsValid( objectMgr, asynch );

    END IsValid;


PROCEDURE CheckSelect(
        event : Event;
    VAR set   : FileSet
    );
    (*
     * Go through the "set" until no files are set.  For each
     * file set, ready the task only if one is waiting and if
     * it is waiting for this particular event.
     *)
    VAR
	i      : CARDINAL;  (* Just in case we go out of bounds *)
	asynch : Object;
    BEGIN (* CheckSelect *)

	i := MIN( Files );
	WHILE set # FileSet { } DO
	    IF i IN set THEN
		EXCL( set, i );
		asynch := objects[ i ];
		REPEAT
		    WITH asynch^ DO
			INCL( newEvents, event );
			IF isWaiting AND ( event IN waitMode ) THEN
			    Tasks.Ready( waiter );
			END;
			asynch := next;
		    END; (* WITH invalid *)
		UNTIL asynch = NIL;
	    END;
	    INC( i );
	END;

    END CheckSelect;

VAR
    notimeout : UnixCsys_time.struct_timeval;
PROCEDURE InterruptHandler(
    DONTCARE : SYSTEM.ADDRESS
    );
    (*
     * Handles both SIGIO and SIGURG, because it seems like it would
     * be possible for a SIGURG to cause read or write data to be made
     * available.  
     *
     *)
    VAR
	readSet   : FileSet;
	writeSet  : FileSet;
	exceptSet : FileSet;
    BEGIN (* InterruptHandler *)
    
	readSet := allRead;
	writeSet := allWrite;
	exceptSet := allExcept;
    
	IF UnixCsys_file.select( allWidth, readSet, writeSet, exceptSet, 
				 SYSTEM.ADR( notimeout ) ) <= 0 THEN 
	    RETURN; (* Don't care about errors *)
	END;
	
	CheckSelect( read, readSet );
	CheckSelect( write, writeSet );
	CheckSelect( exception, exceptSet );
	
    END InterruptHandler;


PROCEDURE ExitRequest(
    DONTCARE : SYSTEM.ADDRESS
    );
    (*
     * Set the flag and ready all tasks.
     *)
    VAR
	i : Files;
    BEGIN (* ExitRequest *)

	pleaseDie := TRUE;
	
	Tasks.DisallowPreemption;

	    FOR i := MIN( Files ) TO MAX( Files ) DO
		IF objects[ i ] # NIL THEN
		    WITH objects[ i ]^ DO
			IF isWaiting THEN
			    Tasks.Ready( waiter );
			END;
		    END;
		END;
	    END;
    	
	Tasks.AllowPreemption;
	
    END ExitRequest;


PROCEDURE Terminate(
    mode : SYSTEM.ADDRESS
    );
    (*
     * Unix maintains the state of tty flags across all processes.
     * This means we must reset the flags in all events or other
     * processes will receive unexpected SIGIOs and EWOULDBLOCKs.
     *)
    VAR
	i        : Files;
	DONTCARE : INTEGER;
    BEGIN (* Terminate *)

	FOR i := MIN( Files ) TO MAX( Files ) DO
	    IF objects[ i ] # NIL THEN
		DONTCARE := UnixCfcntl.fcntl( i, UnixCfcntl.F_SETFL, 0 );

		DONTCARE := UnixCfcntl.fcntl( i, UnixCfcntl.F_SETOWN,
					      oldOwners[ i ] );
	    END;
	END;
			     
    END Terminate;

VAR
    i      : Files;
    
BEGIN (* UnixAsynchIO *)

    notimeout.tv_sec := 0;
    notimeout.tv_usec := 0;
    
    FOR i := MIN( Files ) TO MAX( Files ) DO
	objects[ i ] := NIL;
    END;

    allWidth := 0;
    allRead := { };
    allWrite := { };
    allExcept := { };
    
    Objects.CreateManager( objectMgr, SYSTEM.TSIZE( ObjectRec ),
			   moduleName );
    pleaseDie := FALSE;
    
    Notices.Register( TaskNotices.GetExitRequest(), ExitRequest );
    Notices.Register( Notices.GetTerminationNotice(), Terminate );

    (* Don't create interrupts unless someone is registered for them *)
    
END UnixAsynchIO.
