(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE DosBinaryIO;
(*
 * MS-DOS Class for BinaryIO.
 *
 * Implements MS-DOS files. Since all files in DOS are the same,
 * this module implements both text and binary files.
 *
 * The MakeOptions call supports non-standard MS-DOS opens
 * (e.g. printer and aux: handles are pre-defined).
 *)
IMPORT 
    BinaryIO,
    SysTypes;

EXPORT QUALIFIED
    className,        minFileHandle,  maxFileHandle,  FileHandles,
    maxOptionsLength, Options,        FullOptions,    MakeOptions,    
    GetHandle,        GetError;

CONST
    className = 'dos';

CONST
    minFileHandle = 0;
    maxFileHandle = 20; (* Current maximum for MS-DOS *)
TYPE
    FileHandles = [ minFileHandle .. maxFileHandle ];
CONST
    maxOptionsLength = (* IMPLSPEC *) 4;
TYPE
    Options     = ARRAY[ 0 .. maxOptionsLength - 1 ] OF CHAR;
    FullOptions = ARRAY[ 0 .. maxOptionsLength +
                      BinaryIO.maxOptionsLength - 1 ] OF CHAR;

PROCEDURE MakeOptions(
        handleToUse : FileHandles;   (* Must be valid *)
    VAR result      : ARRAY OF CHAR  (* To be passed to BinaryIO *)
    );
    (*
     * An options string is a combination of dynamically interpreted
     * values. DOS supplies some standard handles which are not used
     * by the library, e.g. printer. If you want to use these handles,
     * you can create an options string with the pre-defined handle
     * number with this procedure. You can then access the file as
     * an ordinary Binary file.
     *
     * When a handle is passed into BinaryIO.Open, the name passed is
     * irrelevant (but saved for BinaryIO.GetOpenPath). Also, Close
     * will not close the file handle. It is up to the caller to do
     * this. GetHandle allows you to remember what handle you were
     * using, so that it can be closed later.
     *
     * "result" must be at least as large as Options declared above.
     * If HIGH( result ) is less than maxOptionsLength - 1, the caller
     * will be terminated.
     *)
   
PROCEDURE GetHandle(
    file : BinaryIO.Object  (* Must be valid *)
    )    : SysTypes.Card;   (* MS-DOS file number *)
    (*
     * Return MS-DOS file handle number for the BinaryIO object.
     *)

PROCEDURE GetError(
    file : BinaryIO.Object  (* Must be valid *)
    )    : SysTypes.Card;   (* MS-DOS error-code (see DOS module) *)
    (*
     * Return MS-DOS error-code last recently returned by MS-DOS.
     *)

END DosBinaryIO.
