(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE ScreenIO;
(*
 * All screen output is done directly by printing
 * ANSI VT-100 type sequences.
 *
 * We thus assume that the PC screen supports ANSI.
 *)

IMPORT
    BinaryIO,
    CardConvert,
    IOErrors,
    Notices,
    ProgErr,
    StringIO,
    Strings,
    SysTypes,
    TextIO,
    DosBinaryIO;


VAR
    screenIn  : TextIO.Object;
    screenOut : TextIO.Object;
    (*
     * the input and output streams used throughout the
     * ScreenIO module. See Initialize.
     *)

PROCEDURE GetTextInput(
    ) : TextIO.Object;  (* input object from the keyboard *)
    (*
     * Initialization of this object is done in Initialize.
     *)
    BEGIN (* GetTextInput *)
        RETURN screenIn;
    END GetTextInput;

PROCEDURE GetTextOutput(
    ) : TextIO.Object;  (* output object to the screen *)
    (*
     * Initialization of this object is done in Initialize.
     *)
    BEGIN (* GetTextOutput *)
        RETURN screenOut;
    END GetTextOutput;

VAR
    screenCapabilities : CapabilitySet;
    (*
     * Set of capabilities of both the input and output streams,
     * used throughout the ScreenIO module.  See Initialize.
     *)

PROCEDURE GetCapabilities(
    ) : CapabilitySet;  (* set of all capabilities of terminal *)
    (*
     * The capabilities are taken from the termcap capabilities.
     * The set of capabilities is of course a subset of those
     * available in termcap, as many are not needed (unless
     * you're using really funky terminals).
     * The capability set is initialized in Initialize once
     * and for all.
     *)
    BEGIN (* GetCapabilities *)
        RETURN screenCapabilities;
    END GetCapabilities;

CONST
    maxSequenceLength = 10;
    (*
     * Should be enough for all ANSI sequences.
     * The longest is the cursor-motion sequence.
     *)
TYPE
    ANSIsequence = ARRAY[ 0 .. maxSequenceLength -1 ] OF CHAR;

VAR
    operation : ARRAY Operations OF ANSIsequence;
    (*
     * To make things fast, these strings are defined
     * once and for all in Initialize.
     *)

PROCEDURE Do(
    whatToDo : Operations  (* operation to be done on screen *)
    );
    (*
     * A certain number of capabilities can be executed without
     * any arguments or other.  These capabilities all write a
     * string to the output.  To make things fast these strings
     * are initialized once and for all in initialize.
     *)
    BEGIN (* Do *)
        (* check if in capabilities *)
        IF NOT (whatToDo IN screenCapabilities) THEN Error; END;

	IF NOT inVisualMode THEN
	    EnterVisualMode;
	END;

        (* write the ANSI string *)
        IF (StringIO.Write( screenOut, operation[ whatToDo ] ) # TextIO.ok) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END (* IF *);
    END Do;

VAR
    screenAttributes : AttributeSet;
    (*
     * Set of screen attributes for characters used throughout the
     * ScreenIO module (set of all the attributes that are on).
     * See Initialize.
     *)

    attribute        : ARRAY Attributes OF ANSIsequence;
    allAttributesOff : ANSIsequence;
    (*
     * To make things fast, these strings are defined once
     * and for all in Initialize.
     *)

PROCEDURE SetAttributes(
    attributes : AttributeSet  (* set of all attributes that are on *)
    );
    (*
     * All attributes are first turned off, and then the attributes that
     * are on are turned on.  This is pretty easy and efficient for ANSI
     * type terminals (might be better ways for other types of terminals).
     *)
    VAR
        count : Attributes;
    BEGIN (* SetAttributes *)
        (* check if in capabilities *)
        IF NOT (attributeCtl IN screenCapabilities) THEN Error; END;

        (* set internal static status *)
        screenAttributes := attributes;

        (* reset all attributes *)
        IF (StringIO.Write( screenOut, allAttributesOff ) # TextIO.ok) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END (* IF *);

        (* turn on attributes that are on *)
        FOR count := bold TO inverse DO
            IF (count IN screenAttributes) THEN
                IF (StringIO.Write( screenOut, attribute[ count ])
                    # TextIO.ok)
                THEN
                    Notices.Call( errorNotice, Notices.DONTCARE );
                END (* IF *);
            END (* IF *);
        END (* FOR *);
    END SetAttributes;

PROCEDURE GetAttributes(
    ) : AttributeSet;  (* set of all attributes that are on *)
    BEGIN (* GetAttributes *)
        RETURN screenAttributes;
    END GetAttributes;

CONST
    numRows = 24;
    numCols = 80;
    (*
     * the number of rows and columns of the screen used throughout
     * the ScreenIO module. See Initialize.
     * (the screen size is not allowed to change: this is also a
     * termcap limitation)
     *)

PROCEDURE NumRows(
    ) : SysTypes.Card;  (* number of rows *)
    BEGIN (* NumRows *)
        RETURN numRows;
    END NumRows;

PROCEDURE NumCols(
    ) : SysTypes.Card;  (* number of rows *)
    BEGIN (* NumCols *)
        RETURN numCols;
    END NumCols;

VAR
    cmString : ANSIsequence;
    (*
     * String for cursor positioning.
     *)

PROCEDURE GotoRowCol(
    row : SysTypes.Card;  (*  0 <= Row < NumRows  *)
    col : SysTypes.Card   (*  0 <= Col < NumCols  *)
    );
    (*
     * This is more complicated than it looks, as we have to
     * convert the two Cards to strings, and then build the
     * string (more efficient than multiple writes).
     *)
    VAR
        rowStr : ANSIsequence;  (* string for row *)
        colStr : ANSIsequence;  (* string for col *)
        rowTop : SysTypes.Card; (* top of rowStr *)
        colTop : SysTypes.Card; (* top of colStr *)
        full   : ANSIsequence;  (* full build sequence *)
    BEGIN (* GotoRowCol *)
        (* check if in capabilities, convert row to string *)
        IF (NOT (cursorCtl IN screenCapabilities)) OR
           (NOT CardConvert.ToString( row, 10, 0, rowStr )) OR
           (NOT CardConvert.ToString( col, 10, 0, colStr ))
        THEN
            Error;
        END (* IF *);

	IF NOT inVisualMode THEN
	    EnterVisualMode;
	END;

        (* find (fast) top of strings *)
        IF (row >= 100) THEN rowTop := 3;
        ELSIF( row >= 10 ) THEN rowTop := 2;
        ELSE rowTop := 1;
        END (* IF *);
        IF (col >= 100) THEN colTop := 3;
        ELSIF( col >= 10) THEN colTop := 2;
        ELSE colTop := 1;
        END (* IF *);

        (* add end chars to both strings *)
        rowStr[ rowTop     ] := ';';
        rowStr[ rowTop + 1 ] := 0C;
        colStr[ colTop     ] := 'H';
        colStr[ colTop + 1 ] := 0C;

        (* concat and add start sequence *)
        IF (NOT Strings.ConcatOK( rowStr, colStr, full )) OR
           (NOT Strings.ConcatOK( cmString, full, full))
        THEN
            Error;
        END (* IF *);

        (* write result string *)
        IF (StringIO.Write( screenOut, full ) # TextIO.ok) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END;
    END GotoRowCol;

VAR
    screenEchoMode : EchoModes;
    (*
     * the screen echo mode used throughout the ScreenIO module.
     * See Initialize.
     *)

PROCEDURE SetEchoMode(
    newMode : EchoModes
    );
    BEGIN (* SetEchoMode *)
        (* check if in capabilities *)
        IF NOT (echoCtl IN screenCapabilities) THEN Error; END;
    END SetEchoMode;

PROCEDURE GetEchoMode(
    ) : EchoModes;  (* current echo mode *)
    BEGIN (* GetEchoMode *)
        RETURN screenEchoMode;
    END GetEchoMode;

VAR
    screenEditMode : EditModes;
    (*
     * the screen edit mode used throughout the ScreenIO module.
     * See Initialize.
     *)

PROCEDURE SetEditMode(
    newMode : EditModes
    );
    BEGIN (* SetEditMode *)
        (* check if in capabilities *)
        IF NOT (editCtl IN screenCapabilities) THEN Error; END;
    END SetEditMode;

PROCEDURE GetEditMode(
    ) : EditModes;  (* current edit mode *)
    BEGIN (* GetEditMode *)
        RETURN screenEditMode;
    END GetEditMode;

VAR
    errorNotice : Notices.Object;
    (*
     * Notice called when an error occurs during reading or
     * writing to the screen.  The notice is needed as it would
     * be too heavy to implement BinaryIO type error handling.
     * On the other hand the program should not terminate the
     * caller when an error occurs.
     *)

PROCEDURE GetErrorNotice(
    ) : Notices.Object;
    BEGIN (* GetErrorNotice *)
        RETURN errorNotice;
    END GetErrorNotice;

VAR
    inVisualMode : BOOLEAN;
PROCEDURE EnterVisualMode;
    BEGIN (* EnterVisualMode *)
	IF inVisualMode THEN
	    RETURN;
	END;
	inVisualMode := TRUE;
        Do( clear );
        GotoRowCol( 0, 0 );
    END EnterVisualMode;

PROCEDURE ExitVisualMode;
    BEGIN (* ExitVisualMode *)
	IF NOT inVisualMode THEN
	    RETURN;
	END;
	inVisualMode := FALSE;
        Do( clear );
        GotoRowCol( 0, 0 );
    END ExitVisualMode;

PROCEDURE OpenTty(
    VAR file : TextIO.Object;
        mode : TextIO.Modes
    );
    (*
     * Used by ReadInitialize and WriteInitialize.
     * Procedure exists so that this piece of code need
     * not be duplicated.
     *)
    CONST
        maxOptionsLength = DosBinaryIO.maxOptionsLength +
            BinaryIO.maxOptionsLength + TextIO.maxOptionsLength;
    TYPE
        Options = ARRAY[ 0 .. maxOptionsLength -1 ] OF CHAR;
    VAR
        options : Options;
    BEGIN (* OpenTty *)
        BinaryIO.MakeOptions( DosBinaryIO.className, '', options );
        TextIO.MakeOptions( TextIO.doNotBuffer, options, options );
        IF (TextIO.Open( file, tty, mode, options ) # IOErrors.ok) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END (* IF *);
    END OpenTty;

    (*
     * The TextIO objects must be associated to a screen
     * (in the definition of this module).
     * Often this is the case for standard input and output.
     * If this is also not a screen, Initialize will open the
     * con (console) file (for sure the screen and keyboard).
     *)

CONST
    tty = 'con:';
    (*
     * The controlling terminal. This file is opened if
     * stdInputHandle or stdOutputHandle is not a ttys.
     * See Read/Write Initialize.
     *)

PROCEDURE ReadInitialize(
    );
    BEGIN (* ReadInitialize *)
        (* Input streams *)
        screenIn := TextIO.GetInput();
        IF NOT TextIO.IsInteractive( screenIn ) THEN
            (* stdin not a tty: open /dev/tty *)
            OpenTty( screenIn, TextIO.readOnly );
        END (* IF *);

        (* echo and edit are on *)
        screenEchoMode := echo;
        screenEditMode := edit;
    END ReadInitialize;

PROCEDURE WriteInitialize(
    );
    BEGIN (* WriteInitialize *)
        (* Output stream *)
        screenOut := TextIO.GetOutput();
        IF NOT TextIO.IsInteractive( screenOut ) THEN
            (* stdout not a tty: open /dev/tty *)
            OpenTty( screenOut, TextIO.appendOnly );
        END (* IF *);
    END WriteInitialize;

PROCEDURE Initialize(
    );
    VAR
        opCount   : Operations;
        attrCount : Attributes;
    BEGIN (* Initialize *)
	inVisualMode := FALSE;

        (* create the error notice used throughout this module. *)
        (* will be called when a read or write error occurs.    *)
        Notices.Create( errorNotice, Notices.firstRegisteredFirstCalled );

        (* Operations *)
        screenCapabilities := CapabilitySet{ clear .. insertBlankLine };
        (* fill screen capabilities strings: *)
        operation[ clear           ] := 'E[2J';
        operation[ clearToEOS      ] := 'E[J';
        operation[ clearToEOL      ] := 'E[K';
        operation[ deleteChar      ] := 'E[P';
        operation[ deleteLine      ] := 'E[M';
        operation[ insertBlankChar ] := 'E[4h E[4I';
        operation[ insertBlankLine ] := 'E[L';
        (* first character is always ESC *)
        operation[ insertBlankChar ][ 5 ] := 033C;
        FOR opCount := clear TO insertBlankLine DO
            operation[ opCount ][ 0 ] := 033C;
        END (* FOR *);

        (* Attributes *)
        INCL( screenCapabilities, attributeCtl );
        screenAttributes := AttributeSet{ };
        (* fill screen attributes strings (enter mode): *)
        attribute[ bold      ] := 'E[1m';
        attribute[ dim       ] := 'E[2m';
        attribute[ blink     ] := 'E[5m';
        attribute[ underline ] := 'E[4m';
        attribute[ inverse   ] := 'E[7m';
        (* to turn off all above attributes: *)
        allAttributesOff := 'E[m';
        (* first character is always ESC *)
        FOR attrCount := bold TO inverse DO
            attribute[ attrCount ][ 0 ] := 033C;
        END (* FOR *);
        allAttributesOff[ 0 ] := 033C;

        (* Cursor control *)
        INCL( screenCapabilities, cursorCtl );
        (* fill cursor control string: *)
        cmString[ 0 ] := 033C;
        cmString[ 1 ] := '[';
        cmString[ 2 ] := 0C;

        (* other capabilities not available *)
    END Initialize;

PROCEDURE Error(
    );
    BEGIN (* Error *)
        ProgErr.Terminate( "ScreenIO: error" );
    END Error;

PROCEDURE Terminate(
    DONTCARE : SysTypes.ANYPTR
    );
    (*
     * The screen stream has to be put back into the default
     * mode so that the terminal responds correctly when the
     * program exits.
     *)
    BEGIN (* Terminate *)
        (* turn off all attributes *)
        SetAttributes( AttributeSet{ } );
        ExitVisualMode;
    END Terminate;


BEGIN (* ScreenIO *)
    Notices.Register( Notices.GetTerminationNotice(), Terminate );
    Initialize;
    ReadInitialize;
    WriteInitialize;
END ScreenIO.
