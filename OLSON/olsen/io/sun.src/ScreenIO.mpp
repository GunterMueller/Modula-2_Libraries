(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

IMPLEMENTATION MODULE ScreenIO;
(*
 * All screen output is done with termcap.  This means that only
 * one terminal (screen) is supported at a time (because termcap has
 * some static variables).  This is not an important limitation since
 * it wouldn't be logical for ScreenIO to work with several screens
 * at a time (see the definition module).
 *
 * Parsing the termcap file in Modula-2 is too complex (for now at
 * least).  The padding routines and decoding would be especially
 * difficult to implement.  Thus, calls are made to the C library.
 *
 * Curses was judged to be too high-level for what we needed (it
 * forces you to use a lot of things about screens, windows, etc
 * that are not used here).
 *
 * Reading is done from the the input stream.  Just as ScreenIO insures
 * that the output stream goes to a screen, it also insures that
 * input is comming from a keyboard (see Initialize).  Standard tty
 * commands are used to modify input stream modes (editing and such
 * are NOT done here in the implementation).
 *
 * All this is done because the module bypasses TextIO to write to
 * the screen, as it uses a termcap call (tputs) that we would prefer
 * not to implement in Modula-2.  If the program did not make sure
 * that we're writing to the same thing (with the TextIO object and
 * with tputs), you'd be doing cursor control on one thing, and writing
 * to another (not very logical, and confusing to the user)!
 *
 * In any case the module needs to do this (even if the tputs call
 * was implemented in Modula-2) as you have to do operations that
 * don't go through a stream on some screens (like graphic screens),
 * unless you start writing your own ANSI type drivers...
 *)
IMPORT
    BinaryIO,
    IOErrors,
    Notices,
    ProgErr,
    SafeStorage,
    SYSTEM,
    SysTypes,
    TextIO,
    TextIOPRIVATE,
    UnixBinaryIO,
    UnixCioctl,
    UnixCenviron,
    UnixCsys_file,
    UnixCtermcap,
    UnixCtty,
    UnixCtypes;

VAR
    screenIn  : TextIO.Object;
    screenOut : TextIO.Object;
    (*
     * the input and output streams used throughout the
     * ScreenIO module. See Initialize.
     *)

PROCEDURE GetTextInput(
    ) : TextIO.Object;  (* input object from the keyboard *)
    (*
     * Initialization of this object is done in Initialize.
     * This is necessary as ScreenIO has to set up things
     * before to get handles, etc.
     *)
    BEGIN (* GetTextInput *)
        RETURN screenIn;
    END GetTextInput;

PROCEDURE GetTextOutput(
    ) : TextIO.Object;  (* output object to the screen *)
    (*
     * Initialization of this object is done in Initialize.
     * This is necessary as ScreenIO has to set up things
     * before to get handles, etc.
     *)
    BEGIN (* GetTextOutput *)
        RETURN screenOut;
    END GetTextOutput;

VAR
    screenCapabilities : CapabilitySet;
    (*
     * Set of capabilities of both the input and output streams,
     * used throughout the ScreenIO module.  See Initialize.
     *)

PROCEDURE GetCapabilities(
    ) : CapabilitySet;  (* set of all capabilities of terminal *)
    (*
     * The capabilities are taken from the termcap capabilities.
     * The set of capabilities is of course a subset of those
     * available in termcap, as many are not needed (unless
     * you're using really funky terminals).
     * The capability set is initialized in Initialize once
     * and for all.
     *)
    BEGIN (* GetCapabilities *)
        RETURN screenCapabilities;
    END GetCapabilities;

VAR
    operation : ARRAY Operations OF SYSTEM.ADDRESS;
    (*
     * To make things fast, these strings are defined once and
     * for all in Initialize.
     *)

PROCEDURE Do(
    whatToDo : Operations  (* operation to be done on screen *)
    );
    (*
     * A certain number of capabilities can be executed without
     * any arguments or other.  These capabilities all write a
     * string to the output.  To make things fast these strings
     * are initialized once and for all in initialize.
     *)
    BEGIN (* Do *)
        (* check if in capabilities *)
        IF NOT (whatToDo IN screenCapabilities) THEN Error; END;

        IF NOT inVisualMode THEN
            EnterVisualMode;
        END (* IF *);

        (* write the termcap string *)
        UnixCtermcap.tputs( operation[ whatToDo ], 1, Outc );
	FlushBuffer;
    END Do;

VAR
    screenAttributes : AttributeSet;
    (*
     * Set of screen attributes for characters used throughout the
     * ScreenIO module (set of all the attributes that are on).
     * See Initialize.
     *)

    attributeOn : ARRAY Attributes OF SYSTEM.ADDRESS;
    allAttributesOff : SYSTEM.ADDRESS;
    (*
     * To make things fast, these strings are defined once and
     * for all in Initialize.
     *)

PROCEDURE SetAttributes(
    attributes : AttributeSet  (* set of all attributes that are on *)
    );
    (*
     * All attributes are first turned off, and then the attributes that
     * are on are turned on.  This is pretty easy and efficient for ANSI
     * type terminals (might be better ways for other types of terminals).
     *)
    VAR
        count : Attributes;
    BEGIN (* SetAttributes *)
        (* check if in capabilities *)
        IF NOT (attributeCtl IN screenCapabilities) THEN Error; END;

        (* set internal static status *)
        screenAttributes := attributes;

        (* reset all attributes *)
        UnixCtermcap.tputs( allAttributesOff, 1, Outc );

        (* turn on attributes that are on *)
        FOR count := bold TO inverse DO
            IF (count IN screenAttributes) THEN
                UnixCtermcap.tputs( attributeOn[ count ], 1, Outc );
            END (* IF *);
        END (* FOR *);
	FlushBuffer;
    END SetAttributes;

PROCEDURE GetAttributes(
    ) : AttributeSet;  (* set of all attributes that are on *)
    BEGIN (* GetAttributes *)
        RETURN screenAttributes;
    END GetAttributes;

VAR
    numRows : SysTypes.Card;
    numCols : SysTypes.Card;
    (*
     * the number of rows and columns of the screen used throughout
     * the ScreenIO module. See Initialize.
     * (the screen size is not allowed to change: this is also a
     * termcap limitation)
     *)

PROCEDURE NumRows(
    ) : SysTypes.Card;  (* number of rows *)
    BEGIN (* NumRows *)
        RETURN numRows;
    END NumRows;

PROCEDURE NumCols(
    ) : SysTypes.Card;  (* number of rows *)
    BEGIN (* NumCols *)
        RETURN numCols;
    END NumCols;

VAR
    cmString : SYSTEM.ADDRESS;
    (*
     * String containing the string to be parsed by termcap
     * for cursor positioning (contains "%"s in printf style).
     *)
    safeToMoveInAttributes : BOOLEAN;
    (* 
     * If it is not safe to move during attributes, we must turn off
     * the attributes before doing the cursor motion and then turn
     * them back on again after the move is complete.
     *)

PROCEDURE GotoRowCol(
    row : SysTypes.Card;  (*  0 <= Row < NumRows  *)
    col : SysTypes.Card   (*  0 <= Col < NumCols  *)
    );
    (*
     * This is more complicated than is looks, as a string has to
     * be built that contains the Row and Col cardinals.
     * The termcap call is again used to build this string, but it
     * would be unnecessary to get a new "cm" string each time, so
     * this string is initialized once.
     *)
    VAR
        decoded : SYSTEM.ADDRESS;  (* decoded string with padding info *)
	savedAttr : AttributeSet;
    BEGIN (* GotoRowCol *)
        (* check if in capabilities *)
        IF NOT (cursorCtl IN screenCapabilities) THEN Error; END;

        IF NOT inVisualMode THEN
            EnterVisualMode;
        END (* IF *);

        (* parse string and then write *)
        decoded := UnixCtermcap.tgoto( cmString, col, row );
	IF safeToMoveInAttributes THEN
	    UnixCtermcap.tputs( decoded, 1, Outc );
	    FlushBuffer;
	ELSE
	    savedAttr := screenAttributes;
	    SetAttributes( AttributeSet{ } );
	    UnixCtermcap.tputs( decoded, 1, Outc );
	    SetAttributes( savedAttr );	(* Does flush *)
	END;
    END GotoRowCol;

VAR
    screenEchoMode : EchoModes;
    (*
     * the screen echo mode used throughout the ScreenIO module.
     * See Initialize.
     *)

PROCEDURE SetEchoMode(
    newMode : EchoModes
    );
    BEGIN (* SetEchoMode *)
        (* check if in capabilities *)
        IF NOT (echoCtl IN screenCapabilities) THEN Error; END;

        IF (newMode = echo) THEN
            IF (screenEchoMode = noEcho) THEN
                screenEchoMode := echo;
                (* set the flag *)
                ioctlIn.sg_flags := ioctlIn.sg_flags +
                    UnixCtty.ECHO;
                (* set the record back *)
                UnixCioctl.ioctl( handleIn,
                    UnixCtty.TIOCSETP, SYSTEM.ADR(ioctlIn) );
            END (* IF *);

        ELSE (* newMode = noEcho *)
            IF (screenEchoMode = echo) THEN
                screenEchoMode := noEcho;
                (* clear the flag *)
                ioctlIn.sg_flags := ioctlIn.sg_flags -
                    UnixCtty.ECHO;
                (* set the record back *)
                UnixCioctl.ioctl( handleIn,
                    UnixCtty.TIOCSETP, SYSTEM.ADR(ioctlIn) );
            END (* IF *);
        END (* IF *);
    END SetEchoMode;

PROCEDURE GetEchoMode(
    ) : EchoModes;  (* current echo mode *)
    BEGIN (* GetEchoMode *)
        RETURN screenEchoMode;
    END GetEchoMode;

VAR
    screenEditMode : EditModes;
    (*
     * the screen edit mode used throughout the ScreenIO module.
     * See Initialize.
     *)

PROCEDURE SetEditMode(
    newMode : EditModes
    );
    BEGIN (* SetEditMode *)
        (* check if in capabilities *)
        IF NOT (editCtl IN screenCapabilities) THEN Error; END;

        IF (newMode = edit) THEN
            IF (screenEditMode = noEdit) THEN
                screenEditMode := edit;
                (* clear the flag *)
                ioctlIn.sg_flags := ioctlIn.sg_flags -
                    UnixCtty.CBREAK;
                (* set the record back *)
                UnixCioctl.ioctl( handleIn,
                    UnixCtty.TIOCSETP, SYSTEM.ADR(ioctlIn) );
            END (* IF *);

        ELSE (* newMode = noEdit *)
            IF (screenEditMode = edit) THEN
                screenEditMode := noEdit;
                (* set the flag *)
                ioctlIn.sg_flags := ioctlIn.sg_flags +
                    UnixCtty.CBREAK;
                (* set the record back *)
                UnixCioctl.ioctl( handleIn,
                    UnixCtty.TIOCSETP, SYSTEM.ADR(ioctlIn) );
            END (* IF *);
        END (* IF *);
    END SetEditMode;

PROCEDURE GetEditMode(
    ) : EditModes;  (* current edit mode *)
    BEGIN (* GetEditMode *)
        RETURN screenEditMode;
    END GetEditMode;

VAR
    errorNotice : Notices.Object;
    (*
     * Notice called when an error occurs during reading or
     * writing to the screen.  The notice is needed as it would
     * be too heavy to implement BinaryIO type error handling.
     * On the other hand the program should not terminate the
     * caller when an error occurs.
     *)

PROCEDURE GetErrorNotice(
    ) : Notices.Object;
    BEGIN (* GetErrorNotice *)
        RETURN errorNotice;
    END GetErrorNotice;

VAR
    inVisualMode : BOOLEAN;
    (*
     * Whether a 'ti' has been issued or not.
     * Some procedures test this flag before
     * doing their thing.
     *)
    enterCursorMode : SYSTEM.ADDRESS;  (* a termcap string *)
    exitCursorMode  : SYSTEM.ADDRESS;  (* a termcap string *)

PROCEDURE EnterVisualMode;
    BEGIN (* EnterVisualMode *)
	IF inVisualMode THEN
	    RETURN;
	END;
        inVisualMode    := TRUE;
        UnixCtermcap.tputs( enterCursorMode, 1, Outc );
        Do( clear );	(* Does flush *)
    END EnterVisualMode;

PROCEDURE ExitVisualMode;
    BEGIN (* ExitVisualMode *)
	IF NOT inVisualMode THEN
	    RETURN;
	END;
        inVisualMode   := FALSE;
        UnixCtermcap.tputs( exitCursorMode, 1, Outc );
	FlushBuffer;
    END ExitVisualMode;

(*
 * Outc doesn't write directly, but writes to a buffer.  This is for
 * performance.
 *)
VAR
    outcBuffer : ARRAY [ 0 .. 23 ] OF CHAR;
    outcIndex  : SysTypes.Card;

PROCEDURE Outc(
    ch : CHAR
    );
    (*
     * Put the character in the buffer and flush it if is too big!
     *)
    BEGIN (* Outc *)

	outcBuffer[ outcIndex ] := ch;
	INC( outcIndex );
	IF outcIndex > HIGH( outcBuffer ) THEN
	    FlushBuffer;
	END;

    END Outc;

PROCEDURE FlushBuffer;
    BEGIN (* FlushBuffer *)
	IF TextIO.WriteChars( screenOut, SYSTEM.ADR( outcBuffer ), outcIndex ) 
	   = TextIO.error THEN
	    Notices.Call( errorNotice, Notices.DONTCARE );
	    TextIO.DONTCARE := TextIO.SetError( screenOut, IOErrors.ok );
	END;
	outcIndex := 0;

    END FlushBuffer;

CONST
    maxOptionsLength = UnixBinaryIO.maxOptionsLength +
        BinaryIO.maxOptionsLength + TextIO.maxOptionsLength;
TYPE
    Options = ARRAY[ 0 .. maxOptionsLength -1 ] OF CHAR;

PROCEDURE GetTextFromHandle(
    VAR file   : TextIO.Object;
        handle : SysTypes.Int;
        mode   : TextIO.Modes
    );
    (*
     * Used by ReadInitialize and WriteInitialize.
     * Procedure exists so that this piece of code need
     * not be duplicated.
     * The file name is set to 'standard' but is really
     * irrelevant (as the object is opened with a handle).
     *)
    VAR
        options : Options;
    BEGIN (* GetTextFromHandle *)
        UnixBinaryIO.MakeOptions( handle, options );
        BinaryIO.MakeOptions( UnixBinaryIO.className, options, options );
        TextIO.MakeOptions( TextIO.doNotBuffer, options, options );
        IF (TextIO.Open( file, 'standard', mode, options ) # IOErrors.ok) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END (* IF *);
    END GetTextFromHandle;

PROCEDURE OpenTty(
    VAR file   : TextIO.Object;
    VAR handle : SysTypes.Int;
        mode   : TextIO.Modes
    );
    (*
     * Used by ReadInitialize and WriteInitialize.
     * Procedure exists so that this piece of code need
     * not be duplicated.
     * It is a little messy as I need the BinaryIO object from
     * the TextIO object, so that I can get the Unix handle.
     *)
    VAR
        options  : Options;
        tempText : TextIOPRIVATE.Object;
    BEGIN (* OpenTty *)
        BinaryIO.MakeOptions( UnixBinaryIO.className, '', options );
        TextIO.MakeOptions( TextIO.doNotBuffer, options, options );
        IF (TextIO.Open( file, tty, mode, options ) # IOErrors.ok) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END (* IF *);
        tempText := TextIOPRIVATE.Object( file );
        handle   := UnixBinaryIO.GetHandle( tempText^.binaryFile );
    END OpenTty;

    (*
     * The TextIO objects must be associated to a screen
     * (in the definition of this module).
     * Often this is the case for standard input (handle 0)
     * and output (handle 1).
     * If they have been redirected, Initialize tries to use
     * standard error (handle 2).
     * If this is also not a screen, Initialize will open the
     * \dev\tty file (for sure the screen).
     *
     * The screen streams have to be initialized (put in the
     * correct modes) so that the termcap strings will work,
     * and also so that ScreenIO knows for sure in what modes
     * they're in.
     *
     * The set of capabilities and just about everything else
     * is determined by calling termcap (sometimes a bit
     * complicated and low-level but portable).
     *)

CONST
    tty = '/dev/tty';
    (*
     * The controlling terminal. This file is opened if stdInputHandle,
     * stdOutputHandle and stdErrorHandle are not ttys.
     * See Read/Write Initialize.
     *)

VAR
    termcap : SYSTEM.ADDRESS;
    (*
     * Decoded strings area
     * (see Initialize).
     *)

    handleIn  : SysTypes.Int;
    handleOut : SysTypes.Int;
    (*
     * The two UNIX handles associated to the two TextIO
     * files screenIn and screenOut.
     *)

    ioctlIn : UnixCtty.sgttyb;
    (*
     * Ioctl sg record.
     * We only use the sg_flags field, to control reading
     * (cooked or CBREAK mode).
     *)

PROCEDURE ReadInitialize(
    );
    VAR
        tempConst : SysTypes.CARDINAL16;
    BEGIN (* ReadInitialize *)
        (* Input streams *)

        (* try using stdInputHandle *)
        handleIn := UnixCsys_file.stdInputHandle;
        IF (UnixCsys_file.isatty( handleIn ) # 1) THEN

            (* stdin is not a tty: use stdErrorHandle *)
            handleIn := UnixCsys_file.stdErrorHandle;

            IF (UnixCsys_file.isatty( handleIn ) # 1) THEN
                (* stderr also not a tty: open /dev/tty *)
                OpenTty( screenIn, handleIn, TextIO.readOnly );

            ELSE GetTextFromHandle( screenIn, handleIn, TextIO.readOnly );
            END (* IF *);
        ELSE GetTextFromHandle( screenIn, handleIn, TextIO.readOnly );
        END (* IF *);

        (* Ioctl record (sg_flags) *)
        UnixCioctl.ioctl( handleIn,
            UnixCtty.TIOCGETP, SYSTEM.ADR(ioctlIn) );

        (* Update echo status *)
        tempConst := SysTypes.CARDINAL16(UnixCtty.ECHO);
        IF (SysTypes.BITSET16(tempConst) *
            SysTypes.BITSET16(ioctlIn.sg_flags) =
            SysTypes.BITSET16(tempConst))
        THEN
            (* echo is probably on (we hope)! *)
            screenEchoMode := echo;
        ELSE
            (* echo is probably off (we hope)! *)
            screenEchoMode := noEcho;
        END (* IF *);

        (* Update edit status *)
        tempConst := SysTypes.CARDINAL16(UnixCtty.CBREAK);
        IF (SysTypes.BITSET16(tempConst) *
            SysTypes.BITSET16(ioctlIn.sg_flags) =
            SysTypes.BITSET16(tempConst))
        THEN
            (* half-cooked mode *)
            screenEditMode := noEdit;
        ELSE
            (* probably in cooked (normal) mode, although we're
               not checking the other flags: maybe in RAW! *)
            screenEditMode := edit;
        END (* IF *);

    END ReadInitialize;

PROCEDURE WriteInitialize(
    );
    BEGIN (* WriteInitialize *)
        (* Output stream *)

        (* try using stdOutputHandle *)
        handleOut := UnixCsys_file.stdOutputHandle;
        IF (UnixCsys_file.isatty( handleOut ) # 1) THEN

            (* stdout is not a tty: use stdErrorHandle *)
            handleOut := UnixCsys_file.stdErrorHandle;

            IF (UnixCsys_file.isatty( handleOut ) # 1) THEN
                (* stderr also not a tty: open /dev/tty *)
                OpenTty( screenOut, handleOut, TextIO.appendOnly );

            ELSE GetTextFromHandle( screenOut, handleOut, TextIO.appendOnly );
            END (* IF *);
        ELSE GetTextFromHandle( screenOut, handleOut, TextIO.appendOnly );
        END (* IF *);
    END WriteInitialize;

PROCEDURE Initialize(
    );
    VAR
        termcapBuffer : SYSTEM.ADDRESS;     (* undecoded termcap    *)
        terminal      : UnixCtypes.p_char;  (* environment variable *)
	standOut      : SYSTEM.ADDRESS;
	attribute     : Attributes;
    BEGIN (* Initialize *)
        (* at this point, we haven't done a 'ti' yet *)
        inVisualMode := FALSE;

	outcIndex := 0;

        (* create the error notice used throughout this module. *)
        (* will be called when a read or write error occurs.    *)
        Notices.Create( errorNotice, Notices.firstRegisteredFirstCalled );

        (* Termcap *)
        (* allocate area for termcap string. This area can be freed *)
        (* if none of the tget calls will be made (it's okay to do  *)
        (* tputs after).  The size is fixed (see man page).         *)
        SafeStorage.ALLOCATE( termcapBuffer, 1024 );
        terminal := UnixCenviron.getenv( 'TERM' );
        IF (UnixCtermcap.tgetent( termcapBuffer, terminal^ ) # 1) THEN
            Notices.Call( errorNotice, Notices.DONTCARE );
        END (* IF *);
        (* we assume that the decoded strings will not be longer *)
        (* than the entire termcap string                        *)
        SafeStorage.ALLOCATE( termcap, 1024 );

        (* needed for enter and exit procedures *)
        enterCursorMode := UnixCtermcap.tgetstr( 'ti', termcap );
        exitCursorMode  := UnixCtermcap.tgetstr( 'te', termcap );

        (* Operations *)
        (* these are always supported. Actually, there is no way of *)
        (* knowing if they are supported or not as termcap assumes  *)
        (* that the strings are available.                          *)
        screenCapabilities := CapabilitySet{ clear .. insertBlankLine };
        (* fill screen capabilities strings: *)
        operation[ clear           ] := UnixCtermcap.tgetstr( 'cl', termcap);
        operation[ clearToEOS      ] := UnixCtermcap.tgetstr( 'cd', termcap);
        operation[ clearToEOL      ] := UnixCtermcap.tgetstr( 'ce', termcap);
        operation[ deleteChar      ] := UnixCtermcap.tgetstr( 'dc', termcap);
        operation[ deleteLine      ] := UnixCtermcap.tgetstr( 'dl', termcap);
        operation[ insertBlankChar ] := UnixCtermcap.tgetstr( 'ic', termcap);
        operation[ insertBlankLine ] := UnixCtermcap.tgetstr( 'al', termcap);

        (* Attributes *)
        (* These are always supported.  It is up to termcap to decide *)
        (* what really to do though (an empty string is legal)        *)
        INCL( screenCapabilities, attributeCtl );
        screenAttributes := AttributeSet{ };
        (* fill screen attributes strings (enter mode): *)
        attributeOn[ bold      ] := UnixCtermcap.tgetstr( 'md', termcap );
        attributeOn[ dim       ] := UnixCtermcap.tgetstr( 'mh', termcap );
        attributeOn[ blink     ] := UnixCtermcap.tgetstr( 'mb', termcap );
        attributeOn[ underline ] := UnixCtermcap.tgetstr( 'us', termcap );
        attributeOn[ inverse   ] := UnixCtermcap.tgetstr( 'mr', termcap );

	(* If an attribute is missing, we turn on stand-out instead *)
	(* The idea is that the caller wants something.  This may *)
	(* not be so true for "dim", but it is better to be consistent. *)
	standOut := UnixCtermcap.tgetstr( 'so', termcap );
	FOR attribute := MIN( Attributes ) TO MAX( Attributes ) DO
	    IF attributeOn[ attribute ] = NIL THEN
		attributeOn[ attribute ] := standOut;
	    END;
	END;
        (* to turn off all above attributes: *)
        allAttributesOff := UnixCtermcap.tgetstr( 'me', termcap );
	IF allAttributesOff = NIL THEN
	    (* If there is no way to turn everything off, just guess... *)
	    allAttributesOff := UnixCtermcap.tgetstr( 'se', termcap );
	END;

        (* Cursor control *)
        (* termcap provides again no way of knowing, so... *)
        INCL( screenCapabilities, cursorCtl );
        (* fill dimensions and cursor control string: *)
        numRows  := UnixCtermcap.tgetnum( 'li' );
        numCols  := UnixCtermcap.tgetnum( 'co' );
        cmString := UnixCtermcap.tgetstr( 'cm', termcap );

	safeToMoveInAttributes := UnixCtermcap.tgetflag( 'ms' ) # 0;

        (* termcap provides again no way of knowing, so... *)
        INCL( screenCapabilities, echoCtl );
        INCL( screenCapabilities, editCtl );
    END Initialize;

PROCEDURE Terminate(
    DONTCARE : SysTypes.ANYPTR
    );
    (*
     * The screen stream has to be put back into the default
     * mode so that the terminal responds correctly when the
     * program exits.
     *)
    BEGIN (* Terminate *)
        (* turn off all attributes *)
        SetAttributes( AttributeSet{ } );

        (* back to a normal type terminal screen *)
        ExitVisualMode;
    END Terminate;

PROCEDURE Error(
    );
    BEGIN (* Error *)
        ProgErr.Terminate( "ScreenIO: error" );
    END Error;


BEGIN (* ScreenIO *)
    Notices.Register( Notices.GetTerminationNotice(), Terminate );
    Initialize;
    ReadInitialize;
    WriteInitialize;
END ScreenIO.
