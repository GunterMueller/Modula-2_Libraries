(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE UnixBinaryIO;
(*
 * Unix Class for BinaryIO.
 *
 * Implements Unix files. Since all files on Unix are the same,
 * this module implements both text and binary files.
 *
 * The MakeOptions call supports non-standard Unix opens
 * (e.g. socket).
 *)
IMPORT
    BinaryIO,
    SysTypes,
    UnixCsys_param;

EXPORT QUALIFIED
    className,        minFileHandle,  maxFileHandle,  FileHandles,
    maxOptionsLength, Options,        FullOptions,    MakeOptions,
    GetHandle,        GetError;

CONST
    className = 'Unix';

CONST
    minFileHandle = 0;
    maxFileHandle = UnixCsys_param.NOFILE - 1;
TYPE
    FileHandles   = [ minFileHandle .. maxFileHandle ];
CONST
    maxOptionsLength = (* IMPLSPEC*) 4;
TYPE
    Options     = ARRAY[ 0 .. maxOptionsLength - 1 ] OF CHAR;
    FullOptions = ARRAY[ 0 .. maxOptionsLength + 
                      BinaryIO.maxOptionsLength - 1 ] OF CHAR;

PROCEDURE MakeOptions(
        handleToUse : FileHandles;   (* Must be valid *)
    VAR result      : ARRAY OF CHAR  (* To be passed to BinaryIO *)
    );
    (*
     * An options string is a combination of dynamically interpreted
     * values. Most Unix operating system calls take a handle as a
     * parameter, since most things in Unix are I/O entities. This
     * procedure allows you to call Unix specific file open procedures
     * (e.g. the socket call) and then use BinaryIO for normal file
     * operations.
     *
     * When a handle is passed into BinaryIO.Open, the name passed is
     * irrelevant (but saved for BinaryIO.GetOpenPath). Also, Close
     * will not close the file handle. It is up to the caller to do
     * this. GetHandle allows you to remember what handle you were
     * using, so that it can be closed later.
     *
     * "result" must be at least as large as Options declared above.
     * If HIGH( result ) is less than maxOptionsLength - 1, the caller
     * will be terminated.
     *)

PROCEDURE GetHandle(
    file : BinaryIO.Object  (* Must be valid *)
    )    : SysTypes.Int;    (* Unix file number *)
    (*
     * Return Unix file handle number for the BinaryIO object.
     *)

PROCEDURE GetError(
    file : BinaryIO.Object  (* Must be valid *)
    )    : SysTypes.Int;    (* Value of errno (may be 0) *)
    (*
     * Return MS-DOS error-code last recently returned by MS-DOS.
     *)

END UnixBinaryIO.
