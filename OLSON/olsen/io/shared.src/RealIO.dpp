(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE RealIO;
(*
 * Supports REAL I/O for TextIO files.
 *
 * The semantic descriptions in IntIO apply to this module as well.
 * The routines obey the semantics described in TextIO, including
 * the rules about ReadXXX and WriteXXX routines. The RealConvert
 * module specifies the syntax and semantics of the conversions
 * performed by this module.
 *)
IMPORT
    SysTypes,
    TextIO;

EXPORT QUALIFIED
    Read,
    Read64,
    WriteFloating,
    WriteScientific,
    WriteEngineering;

PROCEDURE Read(
        file   : TextIO.Object;  (* Not in "endOfFile" or "error" state *)
    VAR toRead : SysTypes.Real   (* The real to be read *)
    )          : TextIO.States;  (* TextIO.ok => real read *)

PROCEDURE Read64(     (* FOR BACKWARDS COMPATIBILITY *)
        file   : TextIO.Object;   (* Not in "endOfFile" or "error" state *)
    VAR toRead : SysTypes.REAL64  (* The long real to be read *)
    )          : TextIO.States;   (* TextIO.ok => long real read *)
    (*
     * Read a real number from the file.
     * The syntax is described in RealConvert.FromString.
     *)

PROCEDURE WriteFloating(
    file          : TextIO.Object;    (* In "ok" state *)
    toWrite       : SysTypes.Real;    (* The long real to be written *)
    totalWidth    : SysTypes.Card;    (* Size of field: real right-justified *)
    fractionWidth : SysTypes.Card     (* Number of digits right of point *)
    )             : TextIO.States;    (* TextIO.ok => floating string written *)
    (*
     * Write the long real in human readable form to the file.
     * The syntax of the converted number is described in
     * RealConvert.ToFloatingString.
     *)
                                           
PROCEDURE WriteScientific(
    file          : TextIO.Object;    (* In "ok" state *)
    toWrite       : SysTypes.Real;    (* The long real to be written *)
    totalWidth    : SysTypes.Card;    (* Size of field: real right-justified *)
    fractionWidth : SysTypes.Card;    (* Number of digits right of point *)
    exponentWidth : SysTypes.Card     (* Number of exponent digits *)
    )             : TextIO.States;    (* TextIO.ok => sci. string written *)
    (*
     * Write the long real in human readable form to the file.
     * The syntax of the converted number is described in
     * RealConvert.ToScientificString.
     *)
                                           
PROCEDURE WriteEngineering(
    file          : TextIO.Object;    (* In "ok" state *)
    toWrite       : SysTypes.Real;    (* The long real to be written *)
    totalWidth    : SysTypes.Card;    (* Size of field: real right-justified *)
    fractionWidth : SysTypes.Card;    (* Number of digits right of point *)
    exponentWidth : SysTypes.Card     (* Number of exponent digits *)
    )             : TextIO.States;    (* TextIO.ok => eng. string written *)
    (*
     * Write the long real in human readable form to the file.
     * The syntax of the converted number is described in
     * RealConvert.ToEngineeringString.
     *)

END RealIO.

