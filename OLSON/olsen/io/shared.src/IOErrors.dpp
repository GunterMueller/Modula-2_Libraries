(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE IOErrors;
(*
 * Common list of errors used for all types of files.  The errors
 * listed in this module are provided on all implementations although
 * certain errors may not occur on some implementations.
 *)
EXPORT QUALIFIED  
    Errors,
    DONTCARE,
    maxStringLength,
    String,
    ToString,
    PrintMessage;

TYPE
    Errors = ( 
        ok,             (* Previous operation was successful *)
        notOpen,        (* File variable not created with Open *)
        illegalOp,      (* Previous operation not allowed *)
        noMoreRoom,     (* Could not increase file's size *)
        invalidIndex,   (* File index outside of file *)
        readPastEOF,    (* Attempt to read past end-of-file *)
        badData,        (* Operation unable to interpret file data *)
        noAccess,       (* Inaccessible file or directory *)
        illegalName,    (* Name syntax is incorrect for the operation *)
        notFound,       (* Name legal but doesn't exist *)
        alreadyExists,  (* Name identifies an existing file *)
        badParameter,   (* Some parameter (other than path) is illegal *)
        otherError      (* Error unforseen by definition *)
    );
VAR
    DONTCARE : Errors;
    (*
     * Garbage can, don't use for other purposes.
     *)

CONST
    maxStringLength = (* IMPLSPEC *) 30;        
TYPE 
    String = ARRAY[ 0 .. maxStringLength - 1 ] OF CHAR;
                                           
PROCEDURE ToString(
        error : Errors;  (* The machine form to be converted *)
    VAR name  : String   (* Human readable string form of error *)
    );
    
PROCEDURE PrintMessage(
    Error   : Errors;        (* Will be ToString-ed before being printed *)
    message : ARRAY OF CHAR  (* Any message (usually object of error) *)
    );
    (*
     * Prints the message and error to ProgErrOutput.
     *
     * The message will appear in a system dependent form
     * combined with the error (converted to a string).
     *)

END IOErrors.

