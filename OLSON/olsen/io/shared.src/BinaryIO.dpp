(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE BinaryIO;
(*
 * Supports binary (unformated) file input/output. The file is treated
 * as a collection of bytes (words) and it is up to the programmer to
 * impose a structure on this simple data format.
 *
 * There are several groups of operations in this module; they are
 * presented in the following order:
 *
 *     Directory level ( Open/Close ) 
 *     Basic I/O       ( Read/Write, Truncate, Flush )
 *     Random Access   ( Get/SetIndex, CompareIndex, CalculateIndex )
 *     State oriented  ( GetState, Get/SetError, IsInteractive, IsIndexable )
 *     Default files   ( input/output, error output )
 *
 *)
IMPORT 
    GenConsts,
    Intrinsics,
    IOConsts,
    IOErrors,
    SysTypes;

EXPORT QUALIFIED
    Object,             States,         DONTCARE,       Modes,
    defaultOptions,     Open,           ClassName,      maxClassNameLength,
    maxOptionsLength,   Options,        MakeOptions,    Close,
    SetInvalid,         ReadBlock,      ReadBytes,      WriteBlock,
    WriteBytes,         Flush,          Truncate,       Index,
    GetStart,           GetEnd,         GetIndex,       SetIndex,
    CalculateIndex,     CompareIndex,   IndexString,    maxIndexStringLength,
    IndexToString,      GetState,       GetError,       SetError,
    PrintErrorMessage,  GetOpenPath,    GetMode,        IsIndexable,
    IsInteractive,      GetInput,       GetOutput,      GetErrorOutput,
    SetInput,           SetOutput,      SetErrorOutput;

TYPE 
    Object;
    (*
     * Identifies an open file.
     *)

TYPE
    States = ( 
        ok,        (* previous read/write operation was successful *)
        endOfFile, (* end of file was encountered on last read operation *)
        error      (* the last operation failed *)
    );
    (*
     * The "state" parameter returned by the procedures in this module
     * will reflect the value returned by GetState (the only exception
     * is the Close procedure).
     *
     * "endOfFile":
     *     If the file is in the "endOfFile" state and a ReadXXX
     *     procedure is called, the file will be put in an "error"
     *     state, with the error being "IOErrors.readPastEOF".
     *
     *     If "endOfFile" is returned by a Read procedure, the operation 
     *     failed (no data was read or is returned).
     *
     * "error":
     *     If a file is in the "error" state and any of the Read, Write,
     *     Index, or Flush procedures are called, the caller will 
     *     be terminated.
     *
     *     If a procedure returns "error", the other output parameters
     *     associated with the call are invalid (except for "bytesRead"
     *     in ReadBytes and "bytesWritten" in WriteBytes).
     *)
VAR
    DONTCARE : States;
    (*
     * Garbage can, don't use for other purposes.
     *)

TYPE
    Modes = ( 
        readOnly,    (* reads and index operations are legal *)
        appendOnly,  (* only writes are legal and start at end-of-file *)
        readWrite    (* all operations are legal *)
    );
    (*
     * A file opened with "readOnly" or "readWrite" is readable,
     * with "appendOnly" or "readWrite" is writable.
     *
     * The error "IOErrors.illegalOp" will occur if you attempt to
     * write to a "readOnly" file, or read an "appendOnly" file.
     *)

CONST
    defaultOptions = '';
    (*
     * Use the default set of options.
     * Both the constant and the empty string are portable.
     *)

PROCEDURE Open(
    VAR file    : Object;           (* Associated with the external file *)
        path    : ARRAY OF CHAR;    (* External file to be opened *)
        mode    : Modes;            (* The type of access requested *)
        options : ARRAY OF CHAR     (* Empty or generated by MakeOptions *)
    )           : IOErrors.Errors;  (* IOErrors.ok => file is valid *)
    (*
     * Initialize the file object with the external file identified
     * by the "path" string.
     *
     * The options string is used to specify non-portable options.
     * "defaultOptions" or '' are the only portable values for this
     * parameter. See the procedure MakeOptions for a specification
     * of this implementation's local options.
     *)

(* 
 * Options are always IMPLEMENTATION SPECIFIC, thus all of the following
 * declarations are non-portable.
 *)
CONST
    maxClassNameLength = GenConsts.maxIdentifierLength;
    maxOptionsLength   = maxClassNameLength + 1;
TYPE
    ClassName = GenConsts.Identifier;
    Options   = ARRAY[ 0 .. maxOptionsLength - 1 ] OF CHAR;

PROCEDURE MakeOptions(
        className    : ARRAY OF CHAR;  (* Class implementation used for Open *)
        classOptions : ARRAY OF CHAR;  (* Passed to class-specific Open *)
    VAR result       : ARRAY OF CHAR   (* Combination of inputs *)
    );
    (*
     * An options string is a combination of dynamically interpreted
     * values. There are multiple classes of binary files.
     *
     * If you don't want to specify a class name (i. e. you want the
     * default class), then you don't need to call this procedure.
     *
     * Classes:
     *     There are multiple classes of binary files. Each class is
     *     specified by a string name. Classes are registered through
     *     the module CatBinaryIO. The default class accesses the files
     *     in the operating-system.
     *
     *     The "classOptions" are created by calling the MakeOptions in
     *     the particular class module. If there are no class specific
     *     options, then defaultOptions may be specified (i.e. '').
     *
     * "result":
     *     The result string is a combination of the "className" and
     *     the "classOptions" passed in.
     *
     *     If result is smaller than the length of "classOptions" plus
     *     the "maxOptionsLength", the caller will be terminated. This
     *     means that if you want to have both BinaryIO and class specific
     *     options, you will have declare a string of the appropriate
     *     length. Each class definition has its own options, thus the
     *     lengths will vary depending upon the class you are using.
     *)

PROCEDURE Close(
    VAR file : Object            (* May be in any state, will be invalid *)
    )        : IOErrors.Errors;  (* Success => "IOErrors.ok" *)
    (*
     * Attempt to flush internal buffers and dissociate "file"
     * with the external file, and close the external file.
     *
     * Errors occurring during the attempted flush are returned but
     * do not cause premature termination of the Close.
     *)

PROCEDURE SetInvalid(
    VAR file : Object  (* will be invalid *)
    );
    (*   
     * Initializes the file variable to an invalid object.
     * This procedure allows an importer to properly initialize
     * all data structures without actually creating spaces.
     *)

PROCEDURE ReadBlock(
        file  : Object;                (* In "ok" state and readable *)
    VAR block : ARRAY OF SysTypes.ANY  (* Data read if state is "ok" *)
    )         : States;                (* Success => "ok" *)
    (*
     * Fill "block" with data read from "file".
     *
     * An "IOErrors.readPastEOF" will occur, if only part of the
     * data was read before an end-of-file was encountered.
     *)

PROCEDURE ReadBytes(
        file       : Object;          (* In "ok" state and readable *)
        buffer     : SysTypes.SAUPTR; (* Location where read data is put *)
        bufferSize : SysTypes.Card;   (* Maximum number of SAUs to read *)
    VAR amountRead : SysTypes.Card    (* Actual number of SAUs read *)
    )              : States;          (* Something read => "ok" *)
    (*
     * Fill location in memory pointed to by "buffer" with data
     * read from file.  "buffer" is treated as if it where a 
     * a POINTER TO ARRAY OF SysTypes.SAU.  Therefore, bufferSize and
     * amountRead are numbers of SAUs.  See SysTypes for more details.
     *
     * If only partial read occurs before end-of-file, returned
     * value is "ok".
     *)

PROCEDURE WriteBlock(
    file  : Object;               (* In "ok" state and writable *)
    block : ARRAY OF SysTypes.ANY (* Contains data to be written *)
    )     : States;               (* Success => "ok" *)
    (*
     * Write "block" to "file".
     *)

PROCEDURE WriteBytes(
        file          : Object;         (* Not in "error" state and writable *)
        buffer        : SysTypes.SAUPTR;(* Contains data to be written *)
        bufferSize    : SysTypes.Card;  (* Number of bytes to be written *)
    VAR amountWritten : SysTypes.Card   (* Actual number of bytes written *)
    )                 : States;         (* ok => all the data was written *)
    (*
     * Write "bufferSize" worth of "buffer" data to "file".  The buffer
     * is treated as if it were a POINTER TO ARRAY OF SysTypes.SAU.  
     * Therefore, bufferSize and numWritten numbers of SAUs.  See SysTypes
     * for more details.
     *)

PROCEDURE Flush(
    file : Object   (* Not in "error" state and writable *)
    )    : States;  (* error => problem flushing buffers *)
    (*
     * Write any buffers to the external file to guarantee consistency.
     *
     * DOS IMPLEMENTATION SPECIFIC NOTE: 
     *     Attempts to Flush the initial standard files will fail, because
     *     Flush requires the file's name and this is unavailable for the
     *     initial standard input, output and error output.
     *)

PROCEDURE Truncate(
    file : Object   (* Not in "error" state and writable *)
    )    : States;  (* error => problem truncating  *)
    (*
     * Set the end of file to be the current file position and
     * discard the rest of the file.
     *)

(*
 * Start of routines to support random access to file positions.
 * These support randomly accessible binary file I/O.
 *
 * Index:
 *     The "Index" exported defines a unique pointer to a location
 *     within a binary file. The file index points to the next
 *     location within the file from which data will be read or data
 *     will be written.
 *
 *     With each succeeding I/O operation the file pointer is
 *     incremented by the "size" of the data object that was read
 *     or written, so that the next operation will begin at a new
 *     index "size" storage units away from the previous one.
 * 
 *     For portability reasons, you should limit the access to the
 *     internals of a Index.  The procedures provided here should
 *     allow you to do a reasonable set of operations without 
 *     knowing the representation of the type of Index.
 *
 * These routines allow one to reposition the current Index to any
 * location within the file (not just the one "size" storage units
 * away) without reading or writing data.
 *) 

TYPE
    Index = (* IMPLEMENTATION SPECIFIC *) SysTypes.CARDINAL32;   

PROCEDURE GetStart(
        file       : Object;  (* Not in "error" state and indexable *)
    VAR firstIndex : Index    (* Will point to the first datum in file *)
    )              : States;  (* error => unable to get start of file *)
    (*
     * Get the Index of the first datum in "file".
     *)

PROCEDURE GetEnd(
        file     : Object;  (* Not in "error" state and indexable *)
    VAR endIndex : Index    (* Will point just after the last datum in file *)
    )            : States;  (* error => unable to get end of file *)
    (*
     * Get the Index just after the last datum in "file".
     *)

PROCEDURE GetIndex(
        file         : Object;  (* Not in "error" state and indexable *)
    VAR currentIndex : Index    (* Will point at the next datum in file *)
    )                : States;  (* error => unable to get index *)
    (*
     * Get the Index of the current datum in "file".
     *)

PROCEDURE SetIndex(
    file     : Object;  (* Not in "error" state and indexable *)
    newIndex : Index    (* The new value of the file index *)
    )        : States;  (* (index = newIndex) => "ok" *)
    (*
     * Position the current file index to the specified value.
     *
     * If the position is not in the valid range of indices for the file,
     * then the error (IOErrors.invalidIndex) will occur and the file
     * position will not be changed.
     *)

PROCEDURE CalculateIndex(
        baseIndex   : Index;        (* Where to start the computation *)
        numElements : SysTypes.Int; (* Number of elements and dir to count *)
        elementSize : SysTypes.Card;(* Size of the homogeneous elements *)
    VAR resultIndex : Index         (* Result of the computation *)
    );
    (*
     * Compute a file index as if the file were a one dimensional
     * array whose elements are "elementSize" long. The computation 
     * can be abstractly represented by the following formula:
     *
     *     resultIndex := baseIndex + (numElements * elementSize);
     *
     * Range checking is performed and the caller will be terminated
     * in the event that overflow or underflow occurs.
     *)

PROCEDURE CompareIndex(
    left  : Index;                       (* Left side of comparison *)
    right : Index                        (* Right side of comparison *)
    )     : Intrinsics.CompareResults;   (* Comparison result *)
    (*
     * Determine whether leftIndex is less than, equal to,
     * or greater than the righIndex.
     *)

CONST
    maxIndexStringLength = (* IMPLSPEC *) 32 DIV 3;
TYPE
    IndexString = ARRAY[ 0 .. maxIndexStringLength - 1 ] OF CHAR;

PROCEDURE IndexToString(
        toConvert : Index;       (* Machine representable form *)
    VAR result    : IndexString  (* Index value as a string *)
    );
    (*
     * Convert index (in implementation specific format) into
     * string for debugging output.
     *
     * The string will not contain leading blanks.
     *)

PROCEDURE GetState(
    file : Object   (* Must be valid *)
    )    : States;  (* Current state of "file" *)

PROCEDURE GetError(
    file : Object            (* Must be valid *)
    )    : IOErrors.Errors;  (* Error code for "file" *)

PROCEDURE SetError(
    file     : Object;          (* Must be valid *)
    newError : IOErrors.Errors  (* What to set the internal error value to *)
    )        : States;          (* See comment *)
    (*
     * This procedure provides a means for changing/resetting the file's
     * error state and value. It does not actually modify the external
     * file object, but allows the caller to indicate an error by changing
     * the file to an error state or to retry operations by resetting the
     * state of the file.
     *
     * If the newError is "IOErrors.ok" and the call is successful, then the
     * state of the file will change to what it was before the file was
     * in the error state. If the newError is not "IOErrors.ok", then the
     * state of the file will always be "error" after this call.  
     *
     * Failure in all cases is indicated if both conditions are true:
     *     - the file is in an error state after the call, and
     *     - calling GetError yields something other than newError
     *
     * The "error" code will be returned if the file's error value is
     * not "IOErrors.ok" (the file is in an error state).
     *)

PROCEDURE PrintErrorMessage(
    file    : Object;        (* For which info is to be printed *)
    message : ARRAY OF CHAR  (* What is to be printed, if empty use state *)
    );
    (* 
     * Print an error message to ProgErrOutput.
     *
     * The message consists of the "message", path and index, but
     * the exact format of this message is implementation specific.
     *
     * If "message" is empty, then the IOErrors.ToString of the
     * current error state will be used.
     *)

PROCEDURE GetOpenPath(
        file  : Object;        (* Must be valid *)
    VAR path  : IOConsts.Path  (* Path of external file, or empty *)
    );
    (*
     * Returns the path of the file exactly as specified by the caller
     * to the Open routine.
     *
     * This may not be an absolute file name. If the default directory has
     * been changed, the path may thus not point to the name of the file.
     *)

PROCEDURE GetMode(
    file : Object  (* Must be valid *)
    )    : Modes;  (* Mode of "file" passed to Open *)

PROCEDURE IsIndexable(
    file : Object    (* Must be valid *)
    )    : BOOLEAN;  (* Indexing legal => TRUE *)
   (* 
    * Determines if index operations are legal for this particular
    * file. Note that appendOnly files are never indexable.
    *)

PROCEDURE IsInteractive(
    file : Object    (* Must be valid *)
    )    : BOOLEAN;  (* Is interactive => TRUE *)
    (*
     * This procedure specifies whether the file is "interactive".
     * The exact definition is very implementation specific.
     *)

(*
 * Start of routines to allow redirection of the default (standard)
 * input/output files. These files (Input, Output, and ErrorOutput)
 * are initialized to implementation specific values and may be
 * changed at any point during the program's execution.
 *
 * Tasks NOTE:
 *     Mutual exclusion is not provided for these global objects,
 *     because concurrent access to these objects is not seen.
 *     The TextIO monitors are provided for concurrent access,
 *     because concurrent text output can be expected during
 *     debugging. If these objects are used, then they must be
 *     used by a single thread of control.
 *)

PROCEDURE GetInput(
    ) : Object;  (* Is "readOnly" or readWrite *)
    (*
     * Get the default (standard) input-file.
     *)

PROCEDURE GetOutput(
    ) : Object;  (* Is "appendOnly" or "readWrite" *)
    (*
     * Get the default (standard) output-file.
     *)

PROCEDURE GetErrorOutput(
    ) : Object;  (* Is "appendOnly" or "readWrite" *)
    (*
     * Get the default (standard) error output-file.
     *)

PROCEDURE SetInput(
    file : Object   (* Not in "error" state and readable *)
    )    : States;  (* error => input NOT changed *)
    (*
     * Set the default (standard) input-file.
     *)

PROCEDURE SetOutput(
    file : Object   (* Not in "error" state and writable *)
    )    : States;  (* error => output NOT changed *)
    (*
     * Set the default (standard) output-file.
     *)

PROCEDURE SetErrorOutput(
    file : Object   (* Not in "error" state and writable *)
    )    : States;  (* error => error output NOT change *)
    (*
     * Set the default (standard) error output-file.
     *)

END BinaryIO.

