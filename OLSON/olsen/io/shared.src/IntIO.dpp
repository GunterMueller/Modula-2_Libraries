(*$Copyright 1988 by Olsen & Associates (O&A), Zurich, Switzerland.

                       All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies, and
that both that copyright notice and this permission notice appear in
supporting documentation, and that all modifications of this software
or its documentation not made by O&A or its agents are accompanied
by a prominent notice stating who made the modifications and the date
of the modifications.

O&A DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE AND ITS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS.  IN NO EVENT SHALL O&A BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES, ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE OR ITS DOCUMENTATION.
******************)

DEFINITION MODULE IntIO;
(*
 * Supports INTEGER I/O for TextIO files.
 *
 * The routines obey the semantics described in TextIO, including
 * the rules about ReadXXX and WriteXXX routines. The IntConvert
 * module specifies the syntax and semantics of the conversions
 * performed by this module.
 *
 * The following semantics are common to all Read routines:
 *
 *     Leading white space (as defined in IntConvert) is skipped.
 *
 *     If "endOfFile" or "endOfLine" is encountered before reading
 *     any non-white space characters, the call fails.
 *
 *     The first non-digit encountered is always put back on the input
 *     stream. The operation is successful if at least one legal digit
 *     was encountered. Otherwise an error is flagged.
 *
 *     If an IO error occurs at any point, the routine returns immediately.
 *
 *     The routines stop just before "endOfLine" or "endOfFile" if the
 *     number being converted is legal (conversion is terminated by
 *     these conditions).
 *
 *     The error "IOErrors.badData" will be imposed on the file in the
 *     event of non-conforming or illegal input. This includes overflows
 *     and and incorrect syntax.
 *
 * The following semantics are common to all Write routines:
 *
 *     "toWrite" is to be converted to human readable form and
 *     written in all cases.
 *
 *     If the length of the string representation of "toWrite" is less
 *     than the specified width, the number output will be right-justified
 *     within a field specified by width, and the padding characters will
 *     be blanks.
 *
 *     If the length of the string representation of "toWrite" is greater 
 *     than the specified width (and the width is not zero), the field
 *     will be filled with asterisks ('*') to the specified width and
 *     the file will have the error "IOErrors.badParameter".
 *
 *     If the width specified is 0, the integer will be written with
 *     no padding characters.
 *)
IMPORT 
    SysTypes,
    TextIO;

EXPORT QUALIFIED
    Read,
    Write;

PROCEDURE Read(
        file   : TextIO.Object;  (* Not in "endOfFile" or "error" state *)
    VAR toRead : SysTypes.Int    (* The integer read *)
    )          : TextIO.States;  (* TextIO.ok => integer read *)
    (*
     * Read an integer number (base 10) from the file.
     * The syntax is described in IntConvert.FromString.
     *)

PROCEDURE Write(
    file    : TextIO.Object;  (* In "ok" state *)
    toWrite : SysTypes.Int;   (* The integer to be written *)
    width   : SysTypes.Card   (* Size of field: cardinal right-justified *)
    )       : TextIO.States;  (* TextIO.ok => integer written *)
    (*
     * Write the integer to the file in human readable form.
     * The syntax of the converted number is described in
     * IntConvert.ToString.
     *)

END IntIO.
